// Code generated by compiling proto template. DO NOT EDIT.
// protoc --proto_path=$GOPATH/src:$GOPATH/src/github.com/centrifugal/centrifugo/vendor:. --gogofaster_out=plugins=grpc:. api.proto
// python3 -m grpc_tools.protoc --proto_path $GOPATH/src:$GOPATH/src/github.com/centrifugal/centrifugo/vendor:. --python_out=. --grpc_python_out=. api.proto
syntax = "proto3";

package apiproto;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.equal_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;

message ClientInfo {
    string User = 1 [(gogoproto.jsontag) = "user"];
    string Client = 2 [(gogoproto.jsontag) = "client"];
    bytes ConnInfo = 3 [(gogoproto.customtype) = "github.com/centrifugal/centrifugo/lib/proto.Raw", (gogoproto.jsontag) = "conn_info,omitempty", (gogoproto.nullable) = false];
    bytes ChanInfo = 4 [(gogoproto.customtype) = "github.com/centrifugal/centrifugo/lib/proto.Raw", (gogoproto.jsontag) = "chan_info,omitempty", (gogoproto.nullable) = false];
}

message Publication {
    string UID = 1 [(gogoproto.jsontag) = "uid,omitempty"];
    bytes Data = 2 [(gogoproto.customtype) = "github.com/centrifugal/centrifugo/lib/proto.Raw", (gogoproto.jsontag) = "data", (gogoproto.nullable) = false];
    ClientInfo Info = 3 [(gogoproto.jsontag) = "info,omitempty"];
}

message Error {
    uint32 Code = 1 [(gogoproto.jsontag) = "code"];
    string Message = 2 [(gogoproto.jsontag) = "message"];
}

message Command {
    uint64 ID = 1 [(gogoproto.jsontag) = "id"];
    string Method = 2 [(gogoproto.jsontag) = "method"];
    bytes Params = 3 [(gogoproto.customtype) = "github.com/centrifugal/centrifugo/lib/proto.Raw", (gogoproto.jsontag) = "params", (gogoproto.nullable) = false];
}

message Reply {
    uint64 ID = 1 [(gogoproto.jsontag) = "id,omitempty"];
    Error Error = 2 [(gogoproto.jsontag) = "error,omitempty"];
    bytes Result = 3 [(gogoproto.customtype) = "github.com/centrifugal/centrifugo/lib/proto.Raw", (gogoproto.jsontag) = "result,omitempty", (gogoproto.nullable) = false];
}

message PublishRequest {
    string Channel = 1 [(gogoproto.jsontag) = "channel"];
    bytes Data = 2 [(gogoproto.customtype) = "github.com/centrifugal/centrifugo/lib/proto.Raw", (gogoproto.jsontag) = "data", (gogoproto.nullable) = false];
    string UID = 3 [(gogoproto.jsontag) = "uid"];
}

message PublishResponse {
    Error Error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    PublishResult Result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message PublishResult {}

message BroadcastRequest {
    repeated string Channels = 1 [(gogoproto.jsontag) = "channels"];
    bytes Data = 2 [(gogoproto.customtype) = "github.com/centrifugal/centrifugo/lib/proto.Raw", (gogoproto.jsontag) = "data", (gogoproto.nullable) = false];
    string UID = 3 [(gogoproto.jsontag) = "uid"];
}

message BroadcastResponse {
    Error Error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    BroadcastResult Result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message BroadcastResult {}

message UnsubscribeRequest {
    string Channel = 1 [(gogoproto.jsontag) = "channel"];
    string User = 2 [(gogoproto.jsontag) = "user"];
}

message UnsubscribeResponse {
    Error Error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    UnsubscribeResult Result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message UnsubscribeResult {}

message DisconnectRequest {
    string User = 1 [(gogoproto.jsontag) = "user"];
}

message DisconnectResponse {
    Error Error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    DisconnectResult Result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message DisconnectResult {}

message PresenceRequest {
    string Channel = 1 [(gogoproto.jsontag) = "channel"];
}

message PresenceResponse {
    Error Error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    PresenceResult Result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message PresenceResult {
    map<string, ClientInfo> Presence = 1 [(gogoproto.jsontag) = "presence"];
}

message PresenceStatsRequest {
    string Channel = 1 [(gogoproto.jsontag) = "channel"];
}

message PresenceStatsResponse {
    Error Error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    PresenceStatsResult Result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message PresenceStatsResult {
    uint64 NumClients = 1 [(gogoproto.jsontag) = "num_clients"];
    uint64 NumUsers = 2 [(gogoproto.jsontag) = "num_users"];
}

message HistoryRequest {
    string Channel = 1 [(gogoproto.jsontag) = "channel"];
}

message HistoryResponse {
    Error Error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    HistoryResult Result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message HistoryResult {
    repeated Publication Publications = 1 [(gogoproto.jsontag) = "publications", (gogoproto.nullable) = true];
}

message ChannelsRequest {}

message ChannelsResponse {
    Error Error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    ChannelsResult Result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message ChannelsResult {
    repeated string Channels = 1 [(gogoproto.jsontag) = "channels"];
}

message InfoRequest {}

message InfoResponse {
    Error Error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    InfoResult Result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message InfoResult {
    string Engine = 1 [(gogoproto.jsontag) = "engine"];
    repeated NodeResult Nodes = 2 [(gogoproto.jsontag) = "nodes"];
}

message NodeResult {
    string UID = 1 [(gogoproto.jsontag) = "uid"];
    string Name = 2 [(gogoproto.jsontag) = "name"];
    string Version = 3 [(gogoproto.jsontag) = "version"];
    uint64 NumClients = 4 [(gogoproto.jsontag) = "num_clients"];
    uint64 NumUsers = 5 [(gogoproto.jsontag) = "num_users"];
    uint64 NumChannels = 6 [(gogoproto.jsontag) = "num_channels"];
    uint64 Uptime = 7 [(gogoproto.jsontag) = "uptime"];
}

service Centrifugo {
    rpc Publish (PublishRequest) returns (PublishResponse) {}
    rpc Broadcast (BroadcastRequest) returns (BroadcastResponse) {}
    rpc Unsubscribe (UnsubscribeRequest) returns (UnsubscribeResponse) {}
    rpc Disconnect (DisconnectRequest) returns (DisconnectResponse) {}
    rpc Presence (PresenceRequest) returns (PresenceResponse) {}
    rpc PresenceStats (PresenceStatsRequest) returns (PresenceStatsResponse) {}
    rpc History (HistoryRequest) returns (HistoryResponse) {}
    rpc Channels (ChannelsRequest) returns (ChannelsResponse) {}
    rpc Info (InfoRequest) returns (InfoResponse) {}
}
