{
    "docs": [
        {
            "location": "/",
            "text": "Centrifugo overview\n\u00b6\n\n\nFirst of all we have chats on Gitter and in Telegram \u2013 welcome!\n\n\n \n\n\nCentrifugo is a language-agnostic real-time messaging server. Language-agnostic means that it does not matter which programming language your application uses on frontend or backend sides \u2013 Centrifugo can work in conjunction with any.\n\n\nReal-time messages are messages that delivered to your application users almost immediately after some event happened - think live comments, chats, real-time charts, dynamic counters and games.\n\n\nThere are several real-time messaging transports Centrifugo supports at moment:\n\n\n\n\nWebsocket\n with JSON or binary Protobuf protocols\n\n\nSockJS\n \u2013 library that tries to establish Websocket connection first and then falls back to HTTP transports (Server-Sent Events, XHR-streaming, XHR-polling etc) automatically in case of problems with Websocket connection\n\n\n\n\nMotivation of project\n\u00b6\n\n\nCentrifugo was originally born to help applications written in language or framework without builtin concurency support to introduce real-time updates. For example frameworks like Django, Flask, Yii, Laravel, Ruby on Rails etc has poor support of working with many persistent connections. Centrifugo aims to help with this and continue to write backend in your favorite language and favorite framework. It also has some features (performance, scalability, connection management, message recovery on reconnect etc) that can simplify your life as a developer even if you are writing backend in asynchronous concurrent language.\n\n\nConcepts\n\u00b6\n\n\nCentrifugo runs as standalone server and takes care of handling persistent connections from your application users. Your application backend and frontend can be written in any programming language. Your clients connect to Centrifugo from frontend using connection token (JWT) provided by your application backend and subscribe to channels. As soon as some event happens your application backend can publish message with event into channel using Centrifugo API. And that message will be delivered to all clients currently subscribed on channel. So actually Centrifugo is a user-facing PUB/SUB server. Here is a simplified scheme:",
            "title": "Getting Started"
        },
        {
            "location": "/#centrifugo-overview",
            "text": "First of all we have chats on Gitter and in Telegram \u2013 welcome!     Centrifugo is a language-agnostic real-time messaging server. Language-agnostic means that it does not matter which programming language your application uses on frontend or backend sides \u2013 Centrifugo can work in conjunction with any.  Real-time messages are messages that delivered to your application users almost immediately after some event happened - think live comments, chats, real-time charts, dynamic counters and games.  There are several real-time messaging transports Centrifugo supports at moment:   Websocket  with JSON or binary Protobuf protocols  SockJS  \u2013 library that tries to establish Websocket connection first and then falls back to HTTP transports (Server-Sent Events, XHR-streaming, XHR-polling etc) automatically in case of problems with Websocket connection",
            "title": "Centrifugo overview"
        },
        {
            "location": "/#motivation-of-project",
            "text": "Centrifugo was originally born to help applications written in language or framework without builtin concurency support to introduce real-time updates. For example frameworks like Django, Flask, Yii, Laravel, Ruby on Rails etc has poor support of working with many persistent connections. Centrifugo aims to help with this and continue to write backend in your favorite language and favorite framework. It also has some features (performance, scalability, connection management, message recovery on reconnect etc) that can simplify your life as a developer even if you are writing backend in asynchronous concurrent language.",
            "title": "Motivation of project"
        },
        {
            "location": "/#concepts",
            "text": "Centrifugo runs as standalone server and takes care of handling persistent connections from your application users. Your application backend and frontend can be written in any programming language. Your clients connect to Centrifugo from frontend using connection token (JWT) provided by your application backend and subscribe to channels. As soon as some event happens your application backend can publish message with event into channel using Centrifugo API. And that message will be delivered to all clients currently subscribed on channel. So actually Centrifugo is a user-facing PUB/SUB server. Here is a simplified scheme:",
            "title": "Concepts"
        },
        {
            "location": "/guide/",
            "text": "Centrifugo integration guide\n\u00b6\n\n\nThis chapter aims to help you get started with Centrifugo. We will look at step-by-step workflow of integrating your application with Centrifugo providing links to relevant parts of this documentation.\n\n\nAs Centrifugo is language-agnostic and can be used together with any language/framework we won't be specific here about any backend or frontend technology your application can be built with. Only abstract steps which you can extrapolate to your stack.\n\n\nSo first of all let's look again at simplified scheme:\n\n\n\n\nThere are three parts involved into idiomatic Centrifugo usage scenario: your clients (frontend app), your application backend and Centrifugo. It's possible to use Centrifugo without any application backend involved but here we won't consider this use case. \n\n\nHere let's suppose you already have 2 of 3 elements: clients and backend. And you want to add Centrifugo for real-time events.\n\n\n1) First you need to do is download/install Centrifugo server. See \ninstall\n chapter for details.\n\n\n2) Create basic configuration file with \nsecret\n and \napi_key\n set and then run Centrifugo. See \nthis chapter\n for details about secret key and \nchapter about API\n for API description. The simplest way to do this automatically is by using \ngenconfig\n command:\n\n\n./centrifugo genconfig\n\n\n\n\n\u2013 which will generate \nconfig.json\n file for you with all required fields.\n\n\n3) In configuration file \nof your application backend\n register several variables: Centrifugo secret and Centrifugo API key you set on previous step and Centrifugo API address. By default API address is \nhttp://localhost:8000/api\n. You \nmust never reveal secret and API key to your users\n.\n\n\n4) Now your users can start connecting to Centrifugo. You should get client library (see \nlist of available client libraries\n) for your application frontend. Every library has method to connect to Centrifugo. See information about Centrifugo connection endpoints \nhere\n. Every client should provide connection token (JWT) on connect. You must generate this token on your backend side using Centrifugo secret key you set to backend configuration. See how to generate this JWT \nin special chapter\n. You pass this token from backend to your frontend app (pass it in template context or use separate request from client side to get user specific JWT from backend side). And use this token when connecting to Centrifugo (for example browser client has special method \nsetToken\n).\n\n\n5) After connecting to Centrifugo subscribe clients to channels they are interested in. See more about channels in \nspecial chapter\n. All client libraries provide a way to handle messages coming to client from channel after subscribing to it.\n\n\n6) So everything should work now \u2013 as soon as user opens some page of your application it must successfully connect to Centrifugo and subscribe to channel (or channels). Now let's imagine you want to send real-time message to users subscribed on specific channel. This message can be a reaction on some event happened in your app: someone posted new comment, administrator just created new post, user pressed like button etc. Anyway this is an event your backend just got and you want to immediately share it with interested users. You can do this using Centrifugo \nHTTP API\n. To simplify your life \nwe have several API libraries\n for different languages. You can publish message into channel using one of those libraries or you can simply \nfollow API description\n to construct API request yourself - this is very simple. As soon as you published message to channel it must be delivered to your client.\n\n\n7) To put this all into production you need to deploy Centrifugo on your production server. To help you with this we have many things like Docker image, \nrpm\n and \ndeb\n packages, Nginx configuration. You can find more information in Deploy section of this doc.\n\n\n8) Don't forget to \nmonitor\n your production Centrifugo setup.\n\n\nThat's all for basics. Documentation actually covers lots of other concepts Centrifugo server has: like scalability, private channels, admin web interface, SockJS fallback, Protobuf support and more. And don't forget to read our \nFAQ\n.",
            "title": "Integration Guide"
        },
        {
            "location": "/guide/#centrifugo-integration-guide",
            "text": "This chapter aims to help you get started with Centrifugo. We will look at step-by-step workflow of integrating your application with Centrifugo providing links to relevant parts of this documentation.  As Centrifugo is language-agnostic and can be used together with any language/framework we won't be specific here about any backend or frontend technology your application can be built with. Only abstract steps which you can extrapolate to your stack.  So first of all let's look again at simplified scheme:   There are three parts involved into idiomatic Centrifugo usage scenario: your clients (frontend app), your application backend and Centrifugo. It's possible to use Centrifugo without any application backend involved but here we won't consider this use case.   Here let's suppose you already have 2 of 3 elements: clients and backend. And you want to add Centrifugo for real-time events.  1) First you need to do is download/install Centrifugo server. See  install  chapter for details.  2) Create basic configuration file with  secret  and  api_key  set and then run Centrifugo. See  this chapter  for details about secret key and  chapter about API  for API description. The simplest way to do this automatically is by using  genconfig  command:  ./centrifugo genconfig  \u2013 which will generate  config.json  file for you with all required fields.  3) In configuration file  of your application backend  register several variables: Centrifugo secret and Centrifugo API key you set on previous step and Centrifugo API address. By default API address is  http://localhost:8000/api . You  must never reveal secret and API key to your users .  4) Now your users can start connecting to Centrifugo. You should get client library (see  list of available client libraries ) for your application frontend. Every library has method to connect to Centrifugo. See information about Centrifugo connection endpoints  here . Every client should provide connection token (JWT) on connect. You must generate this token on your backend side using Centrifugo secret key you set to backend configuration. See how to generate this JWT  in special chapter . You pass this token from backend to your frontend app (pass it in template context or use separate request from client side to get user specific JWT from backend side). And use this token when connecting to Centrifugo (for example browser client has special method  setToken ).  5) After connecting to Centrifugo subscribe clients to channels they are interested in. See more about channels in  special chapter . All client libraries provide a way to handle messages coming to client from channel after subscribing to it.  6) So everything should work now \u2013 as soon as user opens some page of your application it must successfully connect to Centrifugo and subscribe to channel (or channels). Now let's imagine you want to send real-time message to users subscribed on specific channel. This message can be a reaction on some event happened in your app: someone posted new comment, administrator just created new post, user pressed like button etc. Anyway this is an event your backend just got and you want to immediately share it with interested users. You can do this using Centrifugo  HTTP API . To simplify your life  we have several API libraries  for different languages. You can publish message into channel using one of those libraries or you can simply  follow API description  to construct API request yourself - this is very simple. As soon as you published message to channel it must be delivered to your client.  7) To put this all into production you need to deploy Centrifugo on your production server. To help you with this we have many things like Docker image,  rpm  and  deb  packages, Nginx configuration. You can find more information in Deploy section of this doc.  8) Don't forget to  monitor  your production Centrifugo setup.  That's all for basics. Documentation actually covers lots of other concepts Centrifugo server has: like scalability, private channels, admin web interface, SockJS fallback, Protobuf support and more. And don't forget to read our  FAQ .",
            "title": "Centrifugo integration guide"
        },
        {
            "location": "/server/",
            "text": "Server overview\n\u00b6\n\n\nCentrifugo server is written in Go language. It's an open-source software, the source code is available \non Github\n.\n\n\nCentrifugo is built around \ncentrifuge\n library for Go language. That library defines custom protocol and message types which must be sent over various transports (Websocket, SockJS). Server clients use that protocol internally and provide simple API to features - making persistent connection, subscribing on channels, calling RPC commands and more.\n\n\nThis documentation chapter covers some server concepts in detail. This is documentation for Centrifugo server but many things said here are also valid for centrifuge library as it's a core of Centrifugo server.",
            "title": "Overview"
        },
        {
            "location": "/server/#server-overview",
            "text": "Centrifugo server is written in Go language. It's an open-source software, the source code is available  on Github .  Centrifugo is built around  centrifuge  library for Go language. That library defines custom protocol and message types which must be sent over various transports (Websocket, SockJS). Server clients use that protocol internally and provide simple API to features - making persistent connection, subscribing on channels, calling RPC commands and more.  This documentation chapter covers some server concepts in detail. This is documentation for Centrifugo server but many things said here are also valid for centrifuge library as it's a core of Centrifugo server.",
            "title": "Server overview"
        },
        {
            "location": "/server/install/",
            "text": "Install and quick start\n\u00b6\n\n\nIn this chapter we will look at how you can get Centrifugo.\n\n\nBinary releases\n\u00b6\n\n\nGo language gives developers an opportunity to build single binary executable file with application and cross-compile application for all common operating systems. This means that all you need to get Centrifugo \u2013 \ndownload latest release\n for you operating system, unpack it and you are done!\n\n\nNow you can see help information for Centrifugo:\n\n\n./centrifugo -h\n\n\n\n\nCentrifugo server node requires configuration file with secret key. If you are new to Centrifugo then there is \ngenconfig\n command which generates minimal required configuration file:\n\n\n./centrifugo genconfig\n\n\n\n\nIt generates secret key automatically and creates configuration file \nconfig.json\n in current directory (by default) so you can finally run Centrifugo instance:\n\n\n./centrifugo --config\n=\nconfig.json\n\n\n\n\nWe will talk about configuration in detail in next sections.\n\n\nYou can also put or symlink \ncentrifugo\n into your \nbin\n OS directory and run it from anywhere:\n\n\ncentrifugo --config\n=\nconfig.json\n\n\n\n\nLinux packages\n\u00b6\n\n\nWe have prebuilt \nrpm\n and \ndeb\n packages for most popular Linux distributions and Docker image. See \nthis chapter\n for more information.\n\n\nDocker image\n\u00b6\n\n\nAnd of course we have official Docker image \u2013 see \nthis chapter\n for more information.",
            "title": "Installation"
        },
        {
            "location": "/server/install/#install-and-quick-start",
            "text": "In this chapter we will look at how you can get Centrifugo.",
            "title": "Install and quick start"
        },
        {
            "location": "/server/install/#binary-releases",
            "text": "Go language gives developers an opportunity to build single binary executable file with application and cross-compile application for all common operating systems. This means that all you need to get Centrifugo \u2013  download latest release  for you operating system, unpack it and you are done!  Now you can see help information for Centrifugo:  ./centrifugo -h  Centrifugo server node requires configuration file with secret key. If you are new to Centrifugo then there is  genconfig  command which generates minimal required configuration file:  ./centrifugo genconfig  It generates secret key automatically and creates configuration file  config.json  in current directory (by default) so you can finally run Centrifugo instance:  ./centrifugo --config = config.json  We will talk about configuration in detail in next sections.  You can also put or symlink  centrifugo  into your  bin  OS directory and run it from anywhere:  centrifugo --config = config.json",
            "title": "Binary releases"
        },
        {
            "location": "/server/install/#linux-packages",
            "text": "We have prebuilt  rpm  and  deb  packages for most popular Linux distributions and Docker image. See  this chapter  for more information.",
            "title": "Linux packages"
        },
        {
            "location": "/server/install/#docker-image",
            "text": "And of course we have official Docker image \u2013 see  this chapter  for more information.",
            "title": "Docker image"
        },
        {
            "location": "/server/configuration/",
            "text": "Configuration\n\u00b6\n\n\nCentrifugo expects JSON, TOML or YAML as format of configuration file. Thanks to brilliant Go library for application configuration - \nviper\n.\n\n\nFirst let's look at all available command-line options:\n\n\ncentrifugo -h\n\n\n\n\nYou should see something like this as output:\n\n\nCentrifugo \u2013 real-time messaging server\n\nUsage:\n   [flags]\n   [command]\n\nAvailable Commands:\n  checkconfig Check configuration file\n  genconfig   Generate simple configuration file to start with\n  help        Help about any command\n  version     Centrifugo version information\n\nFlags:\n  -a, --address string             interface address to listen on\n      --admin                      enable admin web interface\n      --admin_insecure             use insecure admin mode \u2013 no auth required for admin socket\n      --api_insecure               use insecure API mode\n      --client_insecure            start in insecure client mode\n  -c, --config string              path to config file (default \"config.json\")\n      --debug                      enable debug endpoints\n  -e, --engine string              engine to use: memory or redis (default \"memory\")\n      --grpc_api                   enable GRPC API server\n  -h, --help                       help for this command\n      --internal_port string       custom port for internal endpoints\n      --log_file string            optional log file - if not specified logs go to STDOUT\n      --log_level string           set the log level: debug, info, error, fatal or none (default \"info\")\n  -n, --name string                unique node name\n      --pid_file string            optional path to create PID file\n  -p, --port string                port to bind HTTP server to (default \"8000\")\n      --prometheus                 enable Prometheus metrics endpoint\n      --redis_db int               Redis database (Redis engine)\n      --redis_host string          Redis host (Redis engine) (default \"127.0.0.1\")\n      --redis_master_name string   name of Redis master Sentinel monitors (Redis engine)\n      --redis_password string      Redis auth password (Redis engine)\n      --redis_port string          Redis port (Redis engine) (default \"6379\")\n      --redis_sentinels string     comma-separated list of Sentinel addresses (Redis engine)\n      --redis_tls                  enable Redis TLS connection\n      --redis_tls_skip_verify      disable Redis TLS host verification\n      --redis_url string           Redis connection URL in format redis://:password@hostname:port/db (Redis engine)\n      --tls                        enable TLS, requires an X509 certificate and a key file\n      --tls_cert string            path to an X509 certificate file\n      --tls_key string             path to an X509 certificate key\n\n\n\n\nversion\n\u00b6\n\n\nTo show version and exit run:\n\n\ncentrifugo version\n\n\n\n\nJSON file\n\u00b6\n\n\nCentrifugo requires configuration file on start. As was mentioned earlier it must be a file with valid JSON.\n\n\nThis is a minimal Centrifugo configuration file:\n\n\n{\n\n  \n\"secret\"\n:\n \n\"<YOUR-SECRET-STRING-HERE>\"\n,\n\n  \n\"api_key\"\n:\n \n\"<YOUR-API-KEY-HERE>\"\n\n\n}\n\n\n\n\n\nThe only two fields required are \nsecret\n and \napi_key\n. Secret used to check JWT signature (more about JWT in \nauthentication chapter\n). API key used for Centrifugo API endpoint authorization, see more in \nchapter about server HTTP API\n. Keep both values in secret and never reveal to clients.\n\n\nTOML file\n\u00b6\n\n\nCentrifugo also supports TOML format for configuration file:\n\n\ncentrifugo --config=config.toml\n\n\n\n\nWhere \nconfig.toml\n contains:\n\n\nsecret = \"<YOUR-SECRET-STRING-HERE>\"\napi_key = \"<YOUR-API-KEY-HERE>\"\nlog_level = \"debug\"\n\n\n\n\nI.e. the same configuration as JSON file above with one extra option.\n\n\nYAML file\n\u00b6\n\n\nAnd YAML config also supported. \nconfig.yaml\n:\n\n\nsecret: \"<YOUR-SECRET-STRING-HERE>\"\napi_key: \"<YOUR-API-KEY-HERE>\"\nlog_level: debug\n\n\n\n\nWith YAML remember to use spaces, not tabs when writing configuration file.\n\n\ncheckconfig command\n\u00b6\n\n\nCentrifugo has special command to check configuration file \ncheckconfig\n:\n\n\ncentrifugo checkconfig --config\n=\nconfig.json\n\n\n\n\nIf any errors found during validation \u2013 program will exit with error message and exit code 1.\n\n\ngenconfig command\n\u00b6\n\n\nAnother command is \ngenconfig\n:\n\n\ncentrifugo genconfig -c config.json\n\n\n\n\nIt will generate the minimal required configuration file automatically.\n\n\nImportant options\n\u00b6\n\n\nSome of the most important options you can configure when running Centrifugo:\n\n\n\n\naddress\n \u2013 bind your Centrifugo to specific interface address (by default \n\"\"\n)\n\n\nport\n \u2013 port to bind Centrifugo to (by default \n8000\n)\n\n\nengine\n \u2013 engine to use - \nmemory\n or \nredis\n (by default \nmemory\n). Read more about engines in \nspecial chapter\n.\n\n\n\n\nNote that some options can be set via command-line. Command-line options are more valuable when set than configuration file's options. See description of \nviper\n \u2013 to see more details about configuration options priority.\n\n\nChannel options\n\u00b6\n\n\nLet's look at options related to channels. Channel is an entity to which clients can subscribe to receive messages published into that channel. Channel is just a string (several symbols has special meaning in Centrifugo - see \nspecial chapter\n to find more information about channels). The following options will affect channel behaviour:\n\n\n\n\n\n\npublish\n \u2013 allow clients to publish messages into channels directly (from client side). Your application will never receive those messages. In idiomatic case all messages must be published to Centrifugo by your application backend using Centrifugo API. But this option can be useful when you want to build something without backend-side validation and saving into database. This option can also be useful for demos and prototyping real-time ideas. By default it's \nfalse\n.\n\n\n\n\n\n\nsubscribe_to_publish\n - when \npublish\n option enabled client can publish into channel without being subscribed to it. This option enables automatic check that client subscribed on channel before allowing client to publish into channel.\n\n\n\n\n\n\nanonymous\n \u2013 this option enables anonymous access (with empty \nsub\n claim in connection token). In most situations your application works with authenticated users so every user has its own unique id. But if you provide real-time features for public access you may need unauthorized access to some channels. Turn on this option and use empty string as user ID. By default \nfalse\n.\n\n\n\n\n\n\npresence\n \u2013 enable/disable presence information. Presence is an information about clients currently subscribed on channel. By default \nfalse\n \u2013 i.e. no presence information will be available for channels.\n\n\n\n\n\n\njoin_leave\n \u2013 enable/disable sending join(leave) messages when client subscribes on channel (unsubscribes from channel). By default \nfalse\n.\n\n\n\n\n\n\nhistory_size\n \u2013 history size (amount of messages) for channels. As Centrifugo keeps all history messages in memory it's very important to limit maximum amount of messages in channel history to reasonable value. \nhistory_size\n defines maximum amount of messages that Centrifugo will keep for \neach\n channel in namespace during history lifetime (see below). By default history size is \n0\n - this means that channels will have no history messages at all.\n\n\n\n\n\n\nhistory_lifetime\n \u2013 interval in seconds how long to keep channel history messages. As all history is storing in memory it is also very important to get rid of old history data for unused (inactive for a long time) channels. By default history lifetime is \n0\n \u2013 this means that channels will have no history messages at all. \nSo to turn on keeping history messages you should wisely configure both \nhistory_size\n and \nhistory_lifetime\n options\n.\n\n\n\n\n\n\nhistory_recover\n \u2013 boolean option, when enabled Centrifugo will try to recover missed publications while client was disconnected for some reason (bad internet connection for example). By default \nfalse\n. This option must be used in conjunction with reasonably configured message history for channel i.e. \nhistory_size\n and \nhistory_lifetime\n \nmust be set\n (because Centrifugo uses channel history to recover messages). Also note that not all real-time events require this feature turned on so think wisely when you need this. When this option turned on your application should be designed in a way to tolerate duplicate messages coming from channel (currently Centrifugo returns recovered publications in order and without duplicates but this is implementation detail that can be theoretically changed in future). See more details about how recovery works in \nspecial chapter\n.\n\n\n\n\n\n\nLet's look how to set some of these options in config:\n\n\n{\n\n    \n\"secret\"\n:\n \n\"my-secret-key\"\n,\n\n    \n\"anonymous\"\n:\n \ntrue\n,\n\n    \n\"publish\"\n:\n \ntrue\n,\n\n    \n\"subscribe_to_publish\"\n:\n \ntrue\n,\n\n    \n\"presence\"\n:\n \ntrue\n,\n\n    \n\"join_leave\"\n:\n \ntrue\n,\n\n    \n\"history_size\"\n:\n \n10\n,\n\n    \n\"history_lifetime\"\n:\n \n300\n,\n\n    \n\"history_recover\"\n:\n \ntrue\n\n\n}\n\n\n\n\n\nAnd the last channel specific option is \nnamespaces\n. \nnamespaces\n are optional and if set must be an array of namespace objects. Namespace allows to configure custom options for channels starting with namespace name. This provides a great control over channel behaviour.\n\n\nNamespace has a name and the same channel options (with same defaults) as described above.\n\n\n\n\nname\n - unique namespace name (name must must consist of letters, numbers, underscores or hyphens and be more than 2 symbols length i.e. satisfy regexp \n^[-a-zA-Z0-9_]{2,}$\n).\n\n\n\n\nIf you want to use namespace options for channel - you must include namespace name into\nchannel name with \n:\n as separator:\n\n\npublic\n:\nmessages\n\n\ngossips\n:\nmessages\n\n\nWhere \npublic\n and \ngossips\n are namespace names from project \nnamespaces\n.\n\n\nAll things together here is an example of \nconfig.json\n which includes registered project with all options set and 2 additional namespaces in it:\n\n\n{\n\n    \n\"secret\"\n:\n \n\"very-long-secret-key\"\n,\n\n    \n\"anonymous\"\n:\n \ntrue\n,\n\n    \n\"publish\"\n:\n \ntrue\n,\n\n    \n\"presence\"\n:\n \ntrue\n,\n\n    \n\"join_leave\"\n:\n \ntrue\n,\n\n    \n\"history_size\"\n:\n \n10\n,\n\n    \n\"history_lifetime\"\n:\n \n30\n,\n\n    \n\"namespaces\"\n:\n \n[\n\n        \n{\n\n          \n\"name\"\n:\n \n\"public\"\n,\n\n          \n\"publish\"\n:\n \ntrue\n,\n\n          \n\"anonymous\"\n:\n \ntrue\n,\n\n          \n\"history_size\"\n:\n \n10\n,\n\n          \n\"history_lifetime\"\n:\n \n300\n,\n\n          \n\"history_recover\"\n:\n \ntrue\n\n        \n},\n\n        \n{\n\n          \n\"name\"\n:\n \n\"gossips\"\n,\n\n          \n\"presence\"\n:\n \ntrue\n,\n\n          \n\"join_leave\"\n:\n \ntrue\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nChannel \nnews\n will use globally defined channel options.\n\n\nChannel \npublic\n:\nnews\n will use \npublic\n namespace's options.\n\n\nChannel \ngossips\n:\nnews\n will use \ngossips\n namespace's options.\n\n\nThere is no inheritance in channel options and namespaces \u2013 so if for example you defined \npresence\n:\n \ntrue\n on top level of configuration and then defined namespace \u2013 that namespace won't have presence enabled - you must enable it for namespace explicitly. \n\n\nAdvanced configuration\n\u00b6\n\n\nCentrifugo has some options for which default values make sense for most applications. In many case you\ndon't need (and you really should not) change them. This chapter is about such options.\n\n\nclient_channel_limit\n\u00b6\n\n\nDefault: 128\n\n\nSets maximum number of different channel subscriptions single client can have.\n\n\nchannel_max_length\n\u00b6\n\n\nDefault: 255\n\n\nSets maximum length of channel name.\n\n\nchannel_user_connection_limit\n\u00b6\n\n\nDefault: 0\n\n\nMaximum number of connections from user (with known user ID) to Centrifugo node. By default - unlimited.\n\n\nclient_request_max_size\n\u00b6\n\n\nDefault: 65536\n\n\nMaximum allowed size of request from client in bytes.\n\n\nclient_queue_max_size\n\u00b6\n\n\nDefault: 10485760\n\n\nMaximum client message queue size in bytes to close slow reader connections. By default - 10mb.\n\n\nclient_anonymous\n\u00b6\n\n\nDefault: false\n\n\nEnable mode when all clients can connect to Centrifugo without JWT connection token. In this case all connections will be treated as anonymous (i.e. with empty user ID) and only can subscribe to channels with \nanonymous\n option enabled.\n\n\nsockjs_heartbeat_delay\n\u00b6\n\n\nDefault: 25\n\n\nInterval in seconds how often to send SockJS h-frames to client.\n\n\nwebsocket_compression\n\u00b6\n\n\nDefault: false\n\n\nEnable websocket compression, see chapter about websocket transport for more details.\n\n\ngomaxprocs\n\u00b6\n\n\nDefault: 0\n\n\nBy default Centrifugo runs on all available CPU cores. If you want to limit amount of cores Centrifugo can utilize in one moment use this option.\n\n\nAdvanced endpoint configuration.\n\u00b6\n\n\nAfter you started Centrifugo you have several endpoints available. As soon as you have not provided any extra options you have 3 endpoints by default.\n\n\nDefault endpoints.\n\u00b6\n\n\nThe main endpoint is raw Websocket endpoint to serve client connections that use pure Websocket protocol:\n\n\nws://localhost:8000/connection/websocket\n\n\n\n\nThen there is SockJS endpoint - it's needed to serve client connections that use SockJS library:\n\n\nhttp://localhost:8000/connection/sockjs\n\n\n\n\nAnd finally you have API endpoint to \npublish\n messages to channels (and execute other available API commands):\n\n\nhttp://localhost:8000/api\n\n\n\n\nBy default all endpoints work on port \n8000\n. You can change it using \nport\n option:\n\n\n{\n    \"port\": 9000\n}\n\n\n\n\nIn production setup you will have your domain name in endpoint addresses above instead of \nlocalhost\n. Also if your Centrifugo will be behind proxy or load balancer software you most probably won't have ports in your endpoint addresses. What will always be the same as shown above are URL paths: \n/connection/sockjs\n, \n/connection/websocket\n, \n/api\n.\n\n\nLet's look at possibilities to tweak available endpoints.\n\n\nAdmin endpoints.\n\u00b6\n\n\nFirst is enabling admin endpoints:\n\n\n{\n    ...\n    \"admin\": true,\n    \"admin_password\": \"password\",\n    \"admin_secret\": \"secret\"\n}\n\n\n\n\nThis makes the following endpoint available: http://localhost:8000\n\n\nAt this address you will see admin web interface. You can log into it using \nadmin_password\n value shown above.\n\n\nDebug endpoints.\n\u00b6\n\n\nNext, when Centrifugo started in debug mode some extra debug endpoints become available. To start in debug mode add \ndebug\n option to config:\n\n\n{\n    ...\n    \"debug\": true\n}\n\n\n\n\nAnd endpoint:\n\n\nhttp://localhost:8000/debug/pprof/\n\n\n\n\n\u2013 will show you useful info about internal state of Centrifugo instance. This info is especially helpful when troubleshooting. See \nwiki page\n for more info.\n\n\nCustom internal ports\n\u00b6\n\n\nWe strongly recommend to not expose API, admin, debug and prometheus endpoints to Internet. The following Centrifugo endpoints are considered internal:\n\n\n\n\nAPI endpoint (\n/api\n) - for HTTP API requests\n\n\nAdmin web interface endpoints (\n/\n, \n/admin/auth\n, \n/admin/api\n) - used by web interface\n\n\nPrometheus endpoint (\n/metrics\n) - used for exposing server metrics in Prometheus format \n\n\ndebug endpoints (\n/debug/pprof\n) - used to inspect internal server state\n\n\n\n\nIt's a good practice to protect those endpoints with firewall. For example you can do this in \nlocation\n section of Nginx configuration.\n\n\nThough sometimes you don't have access to per-location configuration in your proxy/load balancer software. For example when using Amazon ELB. In this case you can change ports on which your internal endpoints work.\n\n\nTo run internal endpoints on custom port use \ninternal_port\n option:\n\n\n{\n    ...\n    \"internal_port\": 9000\n}\n\n\n\n\nSo admin web interface will work on address:\n\n\nws://localhost:9000\n\n\n\n\nAlso debug page will be available on new custom port too:\n\n\nhttp://localhost:9000/debug/pprof/\n\n\n\n\nThe same for API and prometheus endpoint.",
            "title": "Configuration"
        },
        {
            "location": "/server/configuration/#configuration",
            "text": "Centrifugo expects JSON, TOML or YAML as format of configuration file. Thanks to brilliant Go library for application configuration -  viper .  First let's look at all available command-line options:  centrifugo -h  You should see something like this as output:  Centrifugo \u2013 real-time messaging server\n\nUsage:\n   [flags]\n   [command]\n\nAvailable Commands:\n  checkconfig Check configuration file\n  genconfig   Generate simple configuration file to start with\n  help        Help about any command\n  version     Centrifugo version information\n\nFlags:\n  -a, --address string             interface address to listen on\n      --admin                      enable admin web interface\n      --admin_insecure             use insecure admin mode \u2013 no auth required for admin socket\n      --api_insecure               use insecure API mode\n      --client_insecure            start in insecure client mode\n  -c, --config string              path to config file (default \"config.json\")\n      --debug                      enable debug endpoints\n  -e, --engine string              engine to use: memory or redis (default \"memory\")\n      --grpc_api                   enable GRPC API server\n  -h, --help                       help for this command\n      --internal_port string       custom port for internal endpoints\n      --log_file string            optional log file - if not specified logs go to STDOUT\n      --log_level string           set the log level: debug, info, error, fatal or none (default \"info\")\n  -n, --name string                unique node name\n      --pid_file string            optional path to create PID file\n  -p, --port string                port to bind HTTP server to (default \"8000\")\n      --prometheus                 enable Prometheus metrics endpoint\n      --redis_db int               Redis database (Redis engine)\n      --redis_host string          Redis host (Redis engine) (default \"127.0.0.1\")\n      --redis_master_name string   name of Redis master Sentinel monitors (Redis engine)\n      --redis_password string      Redis auth password (Redis engine)\n      --redis_port string          Redis port (Redis engine) (default \"6379\")\n      --redis_sentinels string     comma-separated list of Sentinel addresses (Redis engine)\n      --redis_tls                  enable Redis TLS connection\n      --redis_tls_skip_verify      disable Redis TLS host verification\n      --redis_url string           Redis connection URL in format redis://:password@hostname:port/db (Redis engine)\n      --tls                        enable TLS, requires an X509 certificate and a key file\n      --tls_cert string            path to an X509 certificate file\n      --tls_key string             path to an X509 certificate key",
            "title": "Configuration"
        },
        {
            "location": "/server/configuration/#version",
            "text": "To show version and exit run:  centrifugo version",
            "title": "version"
        },
        {
            "location": "/server/configuration/#json-file",
            "text": "Centrifugo requires configuration file on start. As was mentioned earlier it must be a file with valid JSON.  This is a minimal Centrifugo configuration file:  { \n   \"secret\" :   \"<YOUR-SECRET-STRING-HERE>\" , \n   \"api_key\" :   \"<YOUR-API-KEY-HERE>\"  }   The only two fields required are  secret  and  api_key . Secret used to check JWT signature (more about JWT in  authentication chapter ). API key used for Centrifugo API endpoint authorization, see more in  chapter about server HTTP API . Keep both values in secret and never reveal to clients.",
            "title": "JSON file"
        },
        {
            "location": "/server/configuration/#toml-file",
            "text": "Centrifugo also supports TOML format for configuration file:  centrifugo --config=config.toml  Where  config.toml  contains:  secret = \"<YOUR-SECRET-STRING-HERE>\"\napi_key = \"<YOUR-API-KEY-HERE>\"\nlog_level = \"debug\"  I.e. the same configuration as JSON file above with one extra option.",
            "title": "TOML file"
        },
        {
            "location": "/server/configuration/#yaml-file",
            "text": "And YAML config also supported.  config.yaml :  secret: \"<YOUR-SECRET-STRING-HERE>\"\napi_key: \"<YOUR-API-KEY-HERE>\"\nlog_level: debug  With YAML remember to use spaces, not tabs when writing configuration file.",
            "title": "YAML file"
        },
        {
            "location": "/server/configuration/#checkconfig-command",
            "text": "Centrifugo has special command to check configuration file  checkconfig :  centrifugo checkconfig --config = config.json  If any errors found during validation \u2013 program will exit with error message and exit code 1.",
            "title": "checkconfig command"
        },
        {
            "location": "/server/configuration/#genconfig-command",
            "text": "Another command is  genconfig :  centrifugo genconfig -c config.json  It will generate the minimal required configuration file automatically.",
            "title": "genconfig command"
        },
        {
            "location": "/server/configuration/#important-options",
            "text": "Some of the most important options you can configure when running Centrifugo:   address  \u2013 bind your Centrifugo to specific interface address (by default  \"\" )  port  \u2013 port to bind Centrifugo to (by default  8000 )  engine  \u2013 engine to use -  memory  or  redis  (by default  memory ). Read more about engines in  special chapter .   Note that some options can be set via command-line. Command-line options are more valuable when set than configuration file's options. See description of  viper  \u2013 to see more details about configuration options priority.",
            "title": "Important options"
        },
        {
            "location": "/server/configuration/#channel-options",
            "text": "Let's look at options related to channels. Channel is an entity to which clients can subscribe to receive messages published into that channel. Channel is just a string (several symbols has special meaning in Centrifugo - see  special chapter  to find more information about channels). The following options will affect channel behaviour:    publish  \u2013 allow clients to publish messages into channels directly (from client side). Your application will never receive those messages. In idiomatic case all messages must be published to Centrifugo by your application backend using Centrifugo API. But this option can be useful when you want to build something without backend-side validation and saving into database. This option can also be useful for demos and prototyping real-time ideas. By default it's  false .    subscribe_to_publish  - when  publish  option enabled client can publish into channel without being subscribed to it. This option enables automatic check that client subscribed on channel before allowing client to publish into channel.    anonymous  \u2013 this option enables anonymous access (with empty  sub  claim in connection token). In most situations your application works with authenticated users so every user has its own unique id. But if you provide real-time features for public access you may need unauthorized access to some channels. Turn on this option and use empty string as user ID. By default  false .    presence  \u2013 enable/disable presence information. Presence is an information about clients currently subscribed on channel. By default  false  \u2013 i.e. no presence information will be available for channels.    join_leave  \u2013 enable/disable sending join(leave) messages when client subscribes on channel (unsubscribes from channel). By default  false .    history_size  \u2013 history size (amount of messages) for channels. As Centrifugo keeps all history messages in memory it's very important to limit maximum amount of messages in channel history to reasonable value.  history_size  defines maximum amount of messages that Centrifugo will keep for  each  channel in namespace during history lifetime (see below). By default history size is  0  - this means that channels will have no history messages at all.    history_lifetime  \u2013 interval in seconds how long to keep channel history messages. As all history is storing in memory it is also very important to get rid of old history data for unused (inactive for a long time) channels. By default history lifetime is  0  \u2013 this means that channels will have no history messages at all.  So to turn on keeping history messages you should wisely configure both  history_size  and  history_lifetime  options .    history_recover  \u2013 boolean option, when enabled Centrifugo will try to recover missed publications while client was disconnected for some reason (bad internet connection for example). By default  false . This option must be used in conjunction with reasonably configured message history for channel i.e.  history_size  and  history_lifetime   must be set  (because Centrifugo uses channel history to recover messages). Also note that not all real-time events require this feature turned on so think wisely when you need this. When this option turned on your application should be designed in a way to tolerate duplicate messages coming from channel (currently Centrifugo returns recovered publications in order and without duplicates but this is implementation detail that can be theoretically changed in future). See more details about how recovery works in  special chapter .    Let's look how to set some of these options in config:  { \n     \"secret\" :   \"my-secret-key\" , \n     \"anonymous\" :   true , \n     \"publish\" :   true , \n     \"subscribe_to_publish\" :   true , \n     \"presence\" :   true , \n     \"join_leave\" :   true , \n     \"history_size\" :   10 , \n     \"history_lifetime\" :   300 , \n     \"history_recover\" :   true  }   And the last channel specific option is  namespaces .  namespaces  are optional and if set must be an array of namespace objects. Namespace allows to configure custom options for channels starting with namespace name. This provides a great control over channel behaviour.  Namespace has a name and the same channel options (with same defaults) as described above.   name  - unique namespace name (name must must consist of letters, numbers, underscores or hyphens and be more than 2 symbols length i.e. satisfy regexp  ^[-a-zA-Z0-9_]{2,}$ ).   If you want to use namespace options for channel - you must include namespace name into\nchannel name with  :  as separator:  public : messages  gossips : messages  Where  public  and  gossips  are namespace names from project  namespaces .  All things together here is an example of  config.json  which includes registered project with all options set and 2 additional namespaces in it:  { \n     \"secret\" :   \"very-long-secret-key\" , \n     \"anonymous\" :   true , \n     \"publish\" :   true , \n     \"presence\" :   true , \n     \"join_leave\" :   true , \n     \"history_size\" :   10 , \n     \"history_lifetime\" :   30 , \n     \"namespaces\" :   [ \n         { \n           \"name\" :   \"public\" , \n           \"publish\" :   true , \n           \"anonymous\" :   true , \n           \"history_size\" :   10 , \n           \"history_lifetime\" :   300 , \n           \"history_recover\" :   true \n         }, \n         { \n           \"name\" :   \"gossips\" , \n           \"presence\" :   true , \n           \"join_leave\" :   true \n         } \n     ]  }   Channel  news  will use globally defined channel options.  Channel  public : news  will use  public  namespace's options.  Channel  gossips : news  will use  gossips  namespace's options.  There is no inheritance in channel options and namespaces \u2013 so if for example you defined  presence :   true  on top level of configuration and then defined namespace \u2013 that namespace won't have presence enabled - you must enable it for namespace explicitly.",
            "title": "Channel options"
        },
        {
            "location": "/server/configuration/#advanced-configuration",
            "text": "Centrifugo has some options for which default values make sense for most applications. In many case you\ndon't need (and you really should not) change them. This chapter is about such options.",
            "title": "Advanced configuration"
        },
        {
            "location": "/server/configuration/#client_channel_limit",
            "text": "Default: 128  Sets maximum number of different channel subscriptions single client can have.",
            "title": "client_channel_limit"
        },
        {
            "location": "/server/configuration/#channel_max_length",
            "text": "Default: 255  Sets maximum length of channel name.",
            "title": "channel_max_length"
        },
        {
            "location": "/server/configuration/#channel_user_connection_limit",
            "text": "Default: 0  Maximum number of connections from user (with known user ID) to Centrifugo node. By default - unlimited.",
            "title": "channel_user_connection_limit"
        },
        {
            "location": "/server/configuration/#client_request_max_size",
            "text": "Default: 65536  Maximum allowed size of request from client in bytes.",
            "title": "client_request_max_size"
        },
        {
            "location": "/server/configuration/#client_queue_max_size",
            "text": "Default: 10485760  Maximum client message queue size in bytes to close slow reader connections. By default - 10mb.",
            "title": "client_queue_max_size"
        },
        {
            "location": "/server/configuration/#client_anonymous",
            "text": "Default: false  Enable mode when all clients can connect to Centrifugo without JWT connection token. In this case all connections will be treated as anonymous (i.e. with empty user ID) and only can subscribe to channels with  anonymous  option enabled.",
            "title": "client_anonymous"
        },
        {
            "location": "/server/configuration/#sockjs_heartbeat_delay",
            "text": "Default: 25  Interval in seconds how often to send SockJS h-frames to client.",
            "title": "sockjs_heartbeat_delay"
        },
        {
            "location": "/server/configuration/#websocket_compression",
            "text": "Default: false  Enable websocket compression, see chapter about websocket transport for more details.",
            "title": "websocket_compression"
        },
        {
            "location": "/server/configuration/#gomaxprocs",
            "text": "Default: 0  By default Centrifugo runs on all available CPU cores. If you want to limit amount of cores Centrifugo can utilize in one moment use this option.",
            "title": "gomaxprocs"
        },
        {
            "location": "/server/configuration/#advanced-endpoint-configuration",
            "text": "After you started Centrifugo you have several endpoints available. As soon as you have not provided any extra options you have 3 endpoints by default.",
            "title": "Advanced endpoint configuration."
        },
        {
            "location": "/server/configuration/#default-endpoints",
            "text": "The main endpoint is raw Websocket endpoint to serve client connections that use pure Websocket protocol:  ws://localhost:8000/connection/websocket  Then there is SockJS endpoint - it's needed to serve client connections that use SockJS library:  http://localhost:8000/connection/sockjs  And finally you have API endpoint to  publish  messages to channels (and execute other available API commands):  http://localhost:8000/api  By default all endpoints work on port  8000 . You can change it using  port  option:  {\n    \"port\": 9000\n}  In production setup you will have your domain name in endpoint addresses above instead of  localhost . Also if your Centrifugo will be behind proxy or load balancer software you most probably won't have ports in your endpoint addresses. What will always be the same as shown above are URL paths:  /connection/sockjs ,  /connection/websocket ,  /api .  Let's look at possibilities to tweak available endpoints.",
            "title": "Default endpoints."
        },
        {
            "location": "/server/configuration/#admin-endpoints",
            "text": "First is enabling admin endpoints:  {\n    ...\n    \"admin\": true,\n    \"admin_password\": \"password\",\n    \"admin_secret\": \"secret\"\n}  This makes the following endpoint available: http://localhost:8000  At this address you will see admin web interface. You can log into it using  admin_password  value shown above.",
            "title": "Admin endpoints."
        },
        {
            "location": "/server/configuration/#debug-endpoints",
            "text": "Next, when Centrifugo started in debug mode some extra debug endpoints become available. To start in debug mode add  debug  option to config:  {\n    ...\n    \"debug\": true\n}  And endpoint:  http://localhost:8000/debug/pprof/  \u2013 will show you useful info about internal state of Centrifugo instance. This info is especially helpful when troubleshooting. See  wiki page  for more info.",
            "title": "Debug endpoints."
        },
        {
            "location": "/server/configuration/#custom-internal-ports",
            "text": "We strongly recommend to not expose API, admin, debug and prometheus endpoints to Internet. The following Centrifugo endpoints are considered internal:   API endpoint ( /api ) - for HTTP API requests  Admin web interface endpoints ( / ,  /admin/auth ,  /admin/api ) - used by web interface  Prometheus endpoint ( /metrics ) - used for exposing server metrics in Prometheus format   debug endpoints ( /debug/pprof ) - used to inspect internal server state   It's a good practice to protect those endpoints with firewall. For example you can do this in  location  section of Nginx configuration.  Though sometimes you don't have access to per-location configuration in your proxy/load balancer software. For example when using Amazon ELB. In this case you can change ports on which your internal endpoints work.  To run internal endpoints on custom port use  internal_port  option:  {\n    ...\n    \"internal_port\": 9000\n}  So admin web interface will work on address:  ws://localhost:9000  Also debug page will be available on new custom port too:  http://localhost:9000/debug/pprof/  The same for API and prometheus endpoint.",
            "title": "Custom internal ports"
        },
        {
            "location": "/server/channels/",
            "text": "Channels\n\u00b6\n\n\nChannel is a route for publication messages. Clients can subscribe to channel to receive events related to this channel \u2013 new publications, join/leave events etc. Also client must be subscribed on channel to get channel presence or history information.\n\n\nChannel is just a string - \nnews\n, \ncomments\n are valid channel names.\n\n\nChannel name rules\n\u00b6\n\n\nOnly ASCII symbols must be used in channel string.\n\n\nChannel name length is limited by \n255\n characters by default (can be changed via configuration file option \nchannel_max_length\n).\n\n\nSeveral symbols in channel names are reserved for Centrifugo internal needs:\n\n\n\n\n:\n \u2013 for namespace channel boundary (see below)\n\n\n$\n \u2013 for private channel prefix (see below)\n\n\n#\n \u2013 for user channel boundary (see below)\n\n\n*\n \u2013 for future Centrifugo needs\n\n\n&\n \u2013 for future Centrifugo needs\n\n\n/\n \u2013 for future Centrifugo needs\n\n\n\n\nnamespace channel boundary (:)\n\u00b6\n\n\n:\n \u2013 is a channel namespace boundary.\n\n\nIf channel is \npublic\n:\nchat\n - then Centrifugo will apply options to this channel from channel namespace with name \npublic\n.\n\n\nprivate channel prefix ($)\n\u00b6\n\n\nIf channel starts with \n$\n then it considered private. Subscription on private channel must be properly signed by your web application. Read \nspecial chapter in docs\n about private channel subscriptions.\n\n\nuser channel boundary (#)\n\u00b6\n\n\n#\n \u2013 is a user channel boundary. This is a separator to create private channels for users (user limited channels) without sending POST request to your web application. For example if channel is \nnews#42\n then only user with ID \n42\n can subscribe on this channel (Centrifugo knows user ID as clients provide it in connection credentials).\n\n\nMoreover you can provide several user IDs in channel name separated by comma: \ndialog#42,43\n \u2013 in this case only user with ID \n42\n and user with ID \n43\n will be able to subscribe on this channel.\n\n\nThis is useful for channels with static allowed users, for example for user personal messages channel, for dialog channel between certainly defined users. As soon as you need dynamic user access to channel this channel type does not suit well.",
            "title": "Channels"
        },
        {
            "location": "/server/channels/#channels",
            "text": "Channel is a route for publication messages. Clients can subscribe to channel to receive events related to this channel \u2013 new publications, join/leave events etc. Also client must be subscribed on channel to get channel presence or history information.  Channel is just a string -  news ,  comments  are valid channel names.",
            "title": "Channels"
        },
        {
            "location": "/server/channels/#channel-name-rules",
            "text": "Only ASCII symbols must be used in channel string.  Channel name length is limited by  255  characters by default (can be changed via configuration file option  channel_max_length ).  Several symbols in channel names are reserved for Centrifugo internal needs:   :  \u2013 for namespace channel boundary (see below)  $  \u2013 for private channel prefix (see below)  #  \u2013 for user channel boundary (see below)  *  \u2013 for future Centrifugo needs  &  \u2013 for future Centrifugo needs  /  \u2013 for future Centrifugo needs",
            "title": "Channel name rules"
        },
        {
            "location": "/server/channels/#namespace-channel-boundary",
            "text": ":  \u2013 is a channel namespace boundary.  If channel is  public : chat  - then Centrifugo will apply options to this channel from channel namespace with name  public .",
            "title": "namespace channel boundary (:)"
        },
        {
            "location": "/server/channels/#private-channel-prefix",
            "text": "If channel starts with  $  then it considered private. Subscription on private channel must be properly signed by your web application. Read  special chapter in docs  about private channel subscriptions.",
            "title": "private channel prefix ($)"
        },
        {
            "location": "/server/channels/#user-channel-boundary",
            "text": "#  \u2013 is a user channel boundary. This is a separator to create private channels for users (user limited channels) without sending POST request to your web application. For example if channel is  news#42  then only user with ID  42  can subscribe on this channel (Centrifugo knows user ID as clients provide it in connection credentials).  Moreover you can provide several user IDs in channel name separated by comma:  dialog#42,43  \u2013 in this case only user with ID  42  and user with ID  43  will be able to subscribe on this channel.  This is useful for channels with static allowed users, for example for user personal messages channel, for dialog channel between certainly defined users. As soon as you need dynamic user access to channel this channel type does not suit well.",
            "title": "user channel boundary (#)"
        },
        {
            "location": "/server/authentication/",
            "text": "Authentication\n\u00b6\n\n\nWhen you are using \ncentrifuge\n library from Go language you can implement any user authentication using middleware. In Centrifugo case you need to tell server who is connecting in well-known predefined way. This chapter will describe this mechanism.\n\n\nWhen connecting to Centrifugo client must provide connection JWT token with several predefined credential claims. If you've never heard about JWT before - refer to \njwt.io\n page.\n\n\nAt moment \nthe only supported JWT algorithm is HS256\n - i.e. HMAC SHA-256. This can be extended later.\n\n\nWe will use Javascript Centrifugo client here for example snippets for client side and \nPyJWT\n Python library to generate connection token on backend side.\n\n\nClaims\n\u00b6\n\n\nCentrifugo uses the following claims in JWT: \nsub\n, \nexp\n, \ninfo\n and \nb64info\n. What do they mean? Let's describe in detail.\n\n\nsub\n\u00b6\n\n\nThis is a standard JWT claim which must contain an ID of current application user (\nas string\n). \n\n\nIf your user is not currently authenticated in your application but you want to let him connect to Centrifugo anyway you can use empty string as user ID in this \nsub\n claim. This is called anonymous access. In this case \nanonymous\n option must be enabled in Centrifugo configuration for channels that client will subscribe to.\n\n\nexp\n\u00b6\n\n\nThis is an a UNIX timestamp seconds when token will expire. This is standard JWT claim - all JWT libraries for different languages provide an API to set it.\n\n\nIf \nexp\n claim not provided then Centrifugo won't expire any connections. When provided special algorithm will find connections with \nexp\n in the past and activate connection refresh mechanism. Refresh mechanism allows connection to survive and be prolonged. In case of refresh failure client connection will be eventually closed by Centrifugo and won't be accepted until new valid and actual credentials provided in connection token.\n\n\nYou can use connection expiration mechanism in cases when you don't want users of your app be subscribed on channels after being banned/deactivated in application. Or to protect your users from token leak (providing reasonably small time of expiration).\n\n\nChoose \nexp\n value wisely, you don't need small values because refresh mechanism will hit your application often with refresh requests. But setting this value too large can lead to non very fast user connection deactivation. This is a trade off.\n\n\nRead more about connection expiration in special chapter.\n\n\ninfo\n\u00b6\n\n\nThis claim is optional - this is additional information about client connection that can be provided for Centrifugo. This information will be included in presence information, join/leave events and in channel publication message if it was published from client side.\n\n\nb64info\n\u00b6\n\n\nIf you are using binary protobuf protocol you may want info to be custom bytes. Use this field in this case.\n\n\nThis field contains a \nbase64\n representation of your bytes. After receiving Centrifugo will decode base64 back to bytes and will embed result into various places described above.\n\n\nExamples\n\u00b6\n\n\nLet's look how to generate connection JWT in Python:\n\n\nSimplest token\n\u00b6\n\n\nimport\n \njwt\n\n\n\ntoken\n \n=\n \njwt\n.\nencode\n({\n\"sub\"\n:\n \n\"42\"\n},\n \n\"secret\"\n)\n.\ndecode\n()\n\n\n\nprint\n(\ntoken\n)\n\n\n\n\n\nNote that we use the value of \nsecret\n from Centrifugo config here (in this case \nsecret\n value is just \nsecret\n). The only two who must know secret key is your application backend which generates JWT and Centrifugo itself. You should never show secret key to your users. \n\n\nThen you can pass this token to your client side and use it when connecting to Centrifugo:\n\n\nvar\n \ncentrifuge\n \n=\n \nnew\n \nCentrifuge\n(\n\"ws://localhost:8000/connection/websocket\"\n);\n\n\ncentrifuge\n.\nsetToken\n(\ntoken\n);\n\n\ncentrifuge\n.\nconnect\n();\n\n\n\n\n\nToken with expiration\n\u00b6\n\n\nToken that will be valid for 5 minutes:\n\n\nimport\n \njwt\n\n\nimport\n \ntime\n\n\n\ntoken\n \n=\n \njwt\n.\nencode\n({\n\"sub\"\n:\n \n\"42\"\n,\n \n\"exp\"\n:\n \nint\n(\ntime\n.\ntime\n())\n \n+\n \n5\n*\n60\n},\n \n\"secret\"\n,\n \nalgorithm\n=\n\"HS256\"\n)\n.\ndecode\n()\n\n\n\nprint\n(\ntoken\n)\n\n\n\n\n\nToken with additional connection info\n\u00b6\n\n\nimport\n \njwt\n\n\n\ntoken\n \n=\n \njwt\n.\nencode\n({\n\"sub\"\n:\n \n\"42\"\n,\n \n\"info\"\n:\n \n{\n\"name\"\n:\n \n\"Alexander Emelin\"\n}},\n \n\"secret\"\n,\n \nalgorithm\n=\n\"HS256\"\n)\n.\ndecode\n()\n\n\n\nprint\n(\ntoken\n)",
            "title": "Authentication"
        },
        {
            "location": "/server/authentication/#authentication",
            "text": "When you are using  centrifuge  library from Go language you can implement any user authentication using middleware. In Centrifugo case you need to tell server who is connecting in well-known predefined way. This chapter will describe this mechanism.  When connecting to Centrifugo client must provide connection JWT token with several predefined credential claims. If you've never heard about JWT before - refer to  jwt.io  page.  At moment  the only supported JWT algorithm is HS256  - i.e. HMAC SHA-256. This can be extended later.  We will use Javascript Centrifugo client here for example snippets for client side and  PyJWT  Python library to generate connection token on backend side.",
            "title": "Authentication"
        },
        {
            "location": "/server/authentication/#claims",
            "text": "Centrifugo uses the following claims in JWT:  sub ,  exp ,  info  and  b64info . What do they mean? Let's describe in detail.",
            "title": "Claims"
        },
        {
            "location": "/server/authentication/#sub",
            "text": "This is a standard JWT claim which must contain an ID of current application user ( as string ).   If your user is not currently authenticated in your application but you want to let him connect to Centrifugo anyway you can use empty string as user ID in this  sub  claim. This is called anonymous access. In this case  anonymous  option must be enabled in Centrifugo configuration for channels that client will subscribe to.",
            "title": "sub"
        },
        {
            "location": "/server/authentication/#exp",
            "text": "This is an a UNIX timestamp seconds when token will expire. This is standard JWT claim - all JWT libraries for different languages provide an API to set it.  If  exp  claim not provided then Centrifugo won't expire any connections. When provided special algorithm will find connections with  exp  in the past and activate connection refresh mechanism. Refresh mechanism allows connection to survive and be prolonged. In case of refresh failure client connection will be eventually closed by Centrifugo and won't be accepted until new valid and actual credentials provided in connection token.  You can use connection expiration mechanism in cases when you don't want users of your app be subscribed on channels after being banned/deactivated in application. Or to protect your users from token leak (providing reasonably small time of expiration).  Choose  exp  value wisely, you don't need small values because refresh mechanism will hit your application often with refresh requests. But setting this value too large can lead to non very fast user connection deactivation. This is a trade off.  Read more about connection expiration in special chapter.",
            "title": "exp"
        },
        {
            "location": "/server/authentication/#info",
            "text": "This claim is optional - this is additional information about client connection that can be provided for Centrifugo. This information will be included in presence information, join/leave events and in channel publication message if it was published from client side.",
            "title": "info"
        },
        {
            "location": "/server/authentication/#b64info",
            "text": "If you are using binary protobuf protocol you may want info to be custom bytes. Use this field in this case.  This field contains a  base64  representation of your bytes. After receiving Centrifugo will decode base64 back to bytes and will embed result into various places described above.",
            "title": "b64info"
        },
        {
            "location": "/server/authentication/#examples",
            "text": "Let's look how to generate connection JWT in Python:",
            "title": "Examples"
        },
        {
            "location": "/server/authentication/#simplest-token",
            "text": "import   jwt  token   =   jwt . encode ({ \"sub\" :   \"42\" },   \"secret\" ) . decode ()  print ( token )   Note that we use the value of  secret  from Centrifugo config here (in this case  secret  value is just  secret ). The only two who must know secret key is your application backend which generates JWT and Centrifugo itself. You should never show secret key to your users.   Then you can pass this token to your client side and use it when connecting to Centrifugo:  var   centrifuge   =   new   Centrifuge ( \"ws://localhost:8000/connection/websocket\" );  centrifuge . setToken ( token );  centrifuge . connect ();",
            "title": "Simplest token"
        },
        {
            "location": "/server/authentication/#token-with-expiration",
            "text": "Token that will be valid for 5 minutes:  import   jwt  import   time  token   =   jwt . encode ({ \"sub\" :   \"42\" ,   \"exp\" :   int ( time . time ())   +   5 * 60 },   \"secret\" ,   algorithm = \"HS256\" ) . decode ()  print ( token )",
            "title": "Token with expiration"
        },
        {
            "location": "/server/authentication/#token-with-additional-connection-info",
            "text": "import   jwt  token   =   jwt . encode ({ \"sub\" :   \"42\" ,   \"info\" :   { \"name\" :   \"Alexander Emelin\" }},   \"secret\" ,   algorithm = \"HS256\" ) . decode ()  print ( token )",
            "title": "Token with additional connection info"
        },
        {
            "location": "/server/engines/",
            "text": "Engines\n\u00b6\n\n\n\n\nMemory engine\n\n\nRedis engine\n\n\n\n\nEngine in Centrifugo is responsible for publishing messages between nodes, handle PUB/SUB broker subscriptions, save/retrieve presence and history data.\n\n\nBy default Centrifugo uses Memory engine. There is also Redis engine available.\n\n\nThe difference between them - with Memory engine you can start only one node of Centrifugo, while Redis engine allows to run several nodes on different machines and they will be connected via Redis, will know about each other due to Redis and will also keep history and presence data in Redis instead of Centrifugo node process memory so this data can be accessed from each node.\n\n\nTo set engine you can use \nengine\n configuration option. Available values are \nmemory\n and \nredis\n. Default value is \nmemory\n.\n\n\nFor example to work with Redis engine:\n\n\ncentrifugo --config=config.json --engine=redis\n\n\n\n\nOr just set \nengine\n in config:\n\n\n{\n\n    \n...\n\n    \n\"engine\"\n:\n \n\"redis\"\n\n\n}\n\n\n\n\n\nMemory engine\n\u00b6\n\n\nSupports only one node. Nice choice to start with. Supports all features keeping everything in Centrifugo node process memory. You don't need to install Redis when using this engine.\n\n\nAdvantages:\n\n\n\n\nfast\n\n\ndoes not require separate Redis setup\n\n\n\n\nDisadvantages:\n\n\n\n\ndoes not allow to scale nodes (actually you still can scale Centrifugo with Memory engine but you have to publish data into each Centrifugo node and you won't have consistent state of presence)\n\n\n\n\nRedis engine\n\u00b6\n\n\nAllows scaling Centrifugo nodes to different machines. Nodes will use Redis as message broker. Redis engine keeps presence and history data in Redis, uses Redis PUB/SUB for internal nodes communication.\n\n\nSeveral configuration options related to Redis engine:\n\n\n\n\nredis_host\n (string, default \n\"127.0.0.1\"\n) - Redis server host\n\n\nredis_port\n (int, default \n6379\n) - Redis server port\n\n\nredis_url\n (string, default \n\"\"\n) - optional Redis connection URL\n\n\nredis_password\n (string, default \n\"\"\n) - Redis password\n\n\nredis_db\n (int, default \n0\n) - number of Redis db to use\n\n\nredis_tls\n (boolean, default \nfalse\n) - enable Redis TLS connection (new in v2.0.2)\n\n\nredis_tls_skip_verify\n (boolean, default \nfalse\n) - disable Redis TLS host verification (new in v2.0.2)\n\n\nredis_sentinels\n (string, default \n\"\"\n) - comma separated list of Sentinels for HA\n\n\nredis_master_name\n (string, default \n\"\"\n) - name of Redis master Sentinel monitors\n\n\nredis_prefix\n (string, default \n\"centrifugo\"\n) \u2013 custom prefix to use for channels and keys in Redis\n\n\n\n\nSome of these options can be set over command-line arguments (see \ncentrifugo -h\n output), some only over configuration file.\n\n\nLet's describe a bit more \nredis_url\n option. \nredis_url\n allows to set Redis connection parameters in a form of URL in format \nredis://:password@hostname:port/db_number\n. When \nredis_url\n set Centrifugo will use URL instead of values provided in \nredis_host\n, \nredis_port\n, \nredis_password\n, \nredis_db\n options.\n\n\nScaling with Redis tutorial\n\u00b6\n\n\nLet's see how to start several Centrifugo nodes using Redis engine. We will start 3 Centrifugo nodes and all those nodes will be connected via Redis.\n\n\nFirst, you should have Redis running. As soon as it's running - we can launch 3 Centrifugo instances. Open your terminal and start first one:\n\n\ncentrifugo --config=config.json --port=8000 --engine=redis --redis_host=127.0.0.1 --redis_port=6379\n\n\n\n\nIf your Redis on the same machine and runs on its default port you can omit \nredis_host\n and \nredis_port\n options in command above.\n\n\nThen open another terminal and start another Centrifugo instance:\n\n\ncentrifugo --config=config.json --port=8001 --engine=redis --redis_host=127.0.0.1 --redis_port=6379\n\n\n\n\nNote that we use another port number (\n8001\n) as port 8000 already busy by our first Centrifugo instance. If you are starting Centrifugo instances on different machines then you most probably can use\nthe same port number (\n8000\n or whatever you want) for all instances.\n\n\nAnd finally let's start third instance:\n\n\ncentrifugo --config=config.json --port=8002 --engine=redis --redis_host=127.0.0.1 --redis_port=6379\n\n\n\n\nNow you have 3 Centrifugo instances running on ports 8000, 8001, 8002 and clients can connect to any of them. You can also send API requests to any of those nodes \u2013 as all nodes connected over Redis PUB/SUB message will be delivered to all interested clients on all nodes.\n\n\nTo load balance clients between nodes you can use Nginx \u2013 you can find its configuration here in documentation.\n\n\nRedis sharding\n\u00b6\n\n\nCentrifugo has a built-in Redis sharding support.\n\n\nThis resolves situation when Redis becoming a bottleneck on large Centrifugo setup. Redis is single-threaded server, it's very fast but it's power is not infinite so when your Redis approaches 100% CPU usage then sharding feature can help your application to scale.\n\n\nAt moment Centrifugo supports simple comma-based approach to configuring Redis shards. Let's just look on examples.\n\n\nTo start Centrifugo with 2 Redis shards on localhost running on port 6379 and port 6380:\n\n\ncentrifugo --config=config.json --engine=redis --redis_port=6379,6380\n\n\n\n\nTo start Centrifugo with Redis instances on different hosts:\n\n\ncentrifugo --config=config.json --engine=redis --redis_host=192.168.1.34,192.168.1.35\n\n\n\n\nIf you also need to customize AUTH password, Redis DB number then you can use \nredis_url\n option.\n\n\nNote, that due to how Redis PUB/SUB work it's not possible (and it's pretty useless anyway) to run shards in one Redis instances using different Redis DB numbers.\n\n\nWhen sharding enabled Centrifugo will spread channels and history/presence keys over configured Redis instances using consistent hashing algorithm. At moment we use Jump consistent hash algorithm (see \npaper\n and \nimplementation\n)",
            "title": "Engines"
        },
        {
            "location": "/server/engines/#engines",
            "text": "Memory engine  Redis engine   Engine in Centrifugo is responsible for publishing messages between nodes, handle PUB/SUB broker subscriptions, save/retrieve presence and history data.  By default Centrifugo uses Memory engine. There is also Redis engine available.  The difference between them - with Memory engine you can start only one node of Centrifugo, while Redis engine allows to run several nodes on different machines and they will be connected via Redis, will know about each other due to Redis and will also keep history and presence data in Redis instead of Centrifugo node process memory so this data can be accessed from each node.  To set engine you can use  engine  configuration option. Available values are  memory  and  redis . Default value is  memory .  For example to work with Redis engine:  centrifugo --config=config.json --engine=redis  Or just set  engine  in config:  { \n     ... \n     \"engine\" :   \"redis\"  }",
            "title": "Engines"
        },
        {
            "location": "/server/engines/#memory-engine",
            "text": "Supports only one node. Nice choice to start with. Supports all features keeping everything in Centrifugo node process memory. You don't need to install Redis when using this engine.  Advantages:   fast  does not require separate Redis setup   Disadvantages:   does not allow to scale nodes (actually you still can scale Centrifugo with Memory engine but you have to publish data into each Centrifugo node and you won't have consistent state of presence)",
            "title": "Memory engine"
        },
        {
            "location": "/server/engines/#redis-engine",
            "text": "Allows scaling Centrifugo nodes to different machines. Nodes will use Redis as message broker. Redis engine keeps presence and history data in Redis, uses Redis PUB/SUB for internal nodes communication.  Several configuration options related to Redis engine:   redis_host  (string, default  \"127.0.0.1\" ) - Redis server host  redis_port  (int, default  6379 ) - Redis server port  redis_url  (string, default  \"\" ) - optional Redis connection URL  redis_password  (string, default  \"\" ) - Redis password  redis_db  (int, default  0 ) - number of Redis db to use  redis_tls  (boolean, default  false ) - enable Redis TLS connection (new in v2.0.2)  redis_tls_skip_verify  (boolean, default  false ) - disable Redis TLS host verification (new in v2.0.2)  redis_sentinels  (string, default  \"\" ) - comma separated list of Sentinels for HA  redis_master_name  (string, default  \"\" ) - name of Redis master Sentinel monitors  redis_prefix  (string, default  \"centrifugo\" ) \u2013 custom prefix to use for channels and keys in Redis   Some of these options can be set over command-line arguments (see  centrifugo -h  output), some only over configuration file.  Let's describe a bit more  redis_url  option.  redis_url  allows to set Redis connection parameters in a form of URL in format  redis://:password@hostname:port/db_number . When  redis_url  set Centrifugo will use URL instead of values provided in  redis_host ,  redis_port ,  redis_password ,  redis_db  options.",
            "title": "Redis engine"
        },
        {
            "location": "/server/engines/#scaling-with-redis-tutorial",
            "text": "Let's see how to start several Centrifugo nodes using Redis engine. We will start 3 Centrifugo nodes and all those nodes will be connected via Redis.  First, you should have Redis running. As soon as it's running - we can launch 3 Centrifugo instances. Open your terminal and start first one:  centrifugo --config=config.json --port=8000 --engine=redis --redis_host=127.0.0.1 --redis_port=6379  If your Redis on the same machine and runs on its default port you can omit  redis_host  and  redis_port  options in command above.  Then open another terminal and start another Centrifugo instance:  centrifugo --config=config.json --port=8001 --engine=redis --redis_host=127.0.0.1 --redis_port=6379  Note that we use another port number ( 8001 ) as port 8000 already busy by our first Centrifugo instance. If you are starting Centrifugo instances on different machines then you most probably can use\nthe same port number ( 8000  or whatever you want) for all instances.  And finally let's start third instance:  centrifugo --config=config.json --port=8002 --engine=redis --redis_host=127.0.0.1 --redis_port=6379  Now you have 3 Centrifugo instances running on ports 8000, 8001, 8002 and clients can connect to any of them. You can also send API requests to any of those nodes \u2013 as all nodes connected over Redis PUB/SUB message will be delivered to all interested clients on all nodes.  To load balance clients between nodes you can use Nginx \u2013 you can find its configuration here in documentation.",
            "title": "Scaling with Redis tutorial"
        },
        {
            "location": "/server/engines/#redis-sharding",
            "text": "Centrifugo has a built-in Redis sharding support.  This resolves situation when Redis becoming a bottleneck on large Centrifugo setup. Redis is single-threaded server, it's very fast but it's power is not infinite so when your Redis approaches 100% CPU usage then sharding feature can help your application to scale.  At moment Centrifugo supports simple comma-based approach to configuring Redis shards. Let's just look on examples.  To start Centrifugo with 2 Redis shards on localhost running on port 6379 and port 6380:  centrifugo --config=config.json --engine=redis --redis_port=6379,6380  To start Centrifugo with Redis instances on different hosts:  centrifugo --config=config.json --engine=redis --redis_host=192.168.1.34,192.168.1.35  If you also need to customize AUTH password, Redis DB number then you can use  redis_url  option.  Note, that due to how Redis PUB/SUB work it's not possible (and it's pretty useless anyway) to run shards in one Redis instances using different Redis DB numbers.  When sharding enabled Centrifugo will spread channels and history/presence keys over configured Redis instances using consistent hashing algorithm. At moment we use Jump consistent hash algorithm (see  paper  and  implementation )",
            "title": "Redis sharding"
        },
        {
            "location": "/server/admin/",
            "text": "Admin web interface\n\u00b6\n\n\nCentrifugo comes with builtin admin web interface.\n\n\nIt can:\n\n\n\n\nshow current server general information and statistics from server nodes.\n\n\ncall \npublish\n, \nbroadcast\n, \nunsubscribe\n, \ndisconnect\n, \nhistory\n, \npresence\n, \npresence_stats\n, \nchannels\n, \ninfo\n server API commands. \n\n\n\n\nFor \npublish\n command Ace JSON editor helps to write JSON to send into channel.\n\n\nTo enable admin interface you must run \ncentrifugo\n with \n--admin\n and provide some security options in configuration file.\n\n\ncentrifugo --config\n=\nconfig.json --admin\n\n\n\n\nAlso you must set two options in config: \nadmin_password\n and \nadmin_secret\n:\n\n\n{\n\n    \n...,\n\n    \n\"admin_password\"\n:\n \n\"<PASSWORD>\"\n,\n\n    \n\"admin_secret\"\n:\n \n\"<SECRET>\"\n\n\n}\n\n\n\n\n\n\n\nadmin_password\n \u2013 this is a password to log into admin web interface\n\n\nadmin_secret\n - this is a secret key for authentication token set on successful login.\n\n\n\n\nMake both strong and keep in secret.\n\n\nAfter setting this in config go to http://localhost:8000 (by default) - and you should see web interface. Although there is \npassword\n based authentication a good advice is to protect web interface by firewall rules in production.\n\n\nIf you don't want to use embedded web interface you can specify path to your own custom web interface directory:\n\n\n{\n\n    \n...,\n\n    \n\"admin_password\"\n:\n \n\"<PASSWORD>\"\n,\n\n    \n\"admin_secret\"\n:\n \n\"<SECRET>\"\n,\n\n    \n\"admin_web_path\"\n:\n \n\"<PATH>\"\n\n\n}\n\n\n\n\n\nThis can be useful if you want to modify official \nweb interface code\n in some way.\n\n\nThere is also an option to run Centrifugo in insecure admin mode - in this case you don't need to set \nadmin_password\n and \nadmin_secret\n in config \u2013 in web interface you will be logged in automatically without any password. Note that this is only an option for production if you protected admin web interface with firewall rules. Otherwise anyone in internet will have full access to admin functionality described above. To start Centrifugo with admin web interface in insecure admin mode run:\n\n\ncentrifugo --config=config.json --admin --admin_insecure",
            "title": "Admin web interface"
        },
        {
            "location": "/server/admin/#admin-web-interface",
            "text": "Centrifugo comes with builtin admin web interface.  It can:   show current server general information and statistics from server nodes.  call  publish ,  broadcast ,  unsubscribe ,  disconnect ,  history ,  presence ,  presence_stats ,  channels ,  info  server API commands.    For  publish  command Ace JSON editor helps to write JSON to send into channel.  To enable admin interface you must run  centrifugo  with  --admin  and provide some security options in configuration file.  centrifugo --config = config.json --admin  Also you must set two options in config:  admin_password  and  admin_secret :  { \n     ..., \n     \"admin_password\" :   \"<PASSWORD>\" , \n     \"admin_secret\" :   \"<SECRET>\"  }    admin_password  \u2013 this is a password to log into admin web interface  admin_secret  - this is a secret key for authentication token set on successful login.   Make both strong and keep in secret.  After setting this in config go to http://localhost:8000 (by default) - and you should see web interface. Although there is  password  based authentication a good advice is to protect web interface by firewall rules in production.  If you don't want to use embedded web interface you can specify path to your own custom web interface directory:  { \n     ..., \n     \"admin_password\" :   \"<PASSWORD>\" , \n     \"admin_secret\" :   \"<SECRET>\" , \n     \"admin_web_path\" :   \"<PATH>\"  }   This can be useful if you want to modify official  web interface code  in some way.  There is also an option to run Centrifugo in insecure admin mode - in this case you don't need to set  admin_password  and  admin_secret  in config \u2013 in web interface you will be logged in automatically without any password. Note that this is only an option for production if you protected admin web interface with firewall rules. Otherwise anyone in internet will have full access to admin functionality described above. To start Centrifugo with admin web interface in insecure admin mode run:  centrifugo --config=config.json --admin --admin_insecure",
            "title": "Admin web interface"
        },
        {
            "location": "/server/monitoring/",
            "text": "Monitoring\n\u00b6\n\n\nCentrifugo supports reporting metrics in Prometheus format and can automatically export metrics to Graphite.\n\n\nPrometheus\n\u00b6\n\n\nTo enable Prometheus endpoint start Centrifugo with \nprometheus\n option on:\n\n\n{\n\n    \n...\n\n    \n\"prometheus\"\n:\n \ntrue\n\n\n}\n\n\n\n\n\n./centrifugo --config=config.json\n\n\n\n\nThis will enable \n/metrics\n endpoint so Centrifugo instance can be monitored by your Prometheus server.\n\n\nGraphite\n\u00b6\n\n\nTo enable automatic export to Graphite (via TCP):\n\n\n{\n\n    \n\"graphite\"\n:\n \ntrue\n,\n\n    \n\"graphite_host\"\n:\n \n\"localhost\"\n,\n\n    \n\"graphite_port\"\n:\n \n2003\n\n\n}",
            "title": "Monitoring"
        },
        {
            "location": "/server/monitoring/#monitoring",
            "text": "Centrifugo supports reporting metrics in Prometheus format and can automatically export metrics to Graphite.",
            "title": "Monitoring"
        },
        {
            "location": "/server/monitoring/#prometheus",
            "text": "To enable Prometheus endpoint start Centrifugo with  prometheus  option on:  { \n     ... \n     \"prometheus\" :   true  }   ./centrifugo --config=config.json  This will enable  /metrics  endpoint so Centrifugo instance can be monitored by your Prometheus server.",
            "title": "Prometheus"
        },
        {
            "location": "/server/monitoring/#graphite",
            "text": "To enable automatic export to Graphite (via TCP):  { \n     \"graphite\" :   true , \n     \"graphite_host\" :   \"localhost\" , \n     \"graphite_port\" :   2003  }",
            "title": "Graphite"
        },
        {
            "location": "/server/api/",
            "text": "Server HTTP API\n\u00b6\n\n\nHTTP API is a way to send commands to Centrifugo.\n\n\nWhy we need API?\n\n\nIf you look at configuration options you see an option called \npublish\n defined on configuration top level and for channel namespace. When turned on this option allows browser clients to publish into channels directly. If client publishes a message into channel directly \u2013 your application will not receive that message (it just goes through Centrifugo towards subscribed clients). This pattern can be useful sometimes but in most cases you first need to send new event from client to backend over non-Centrifugo transport (for example via AJAX request in web application), then process it on application backend side \u2013 probably validate, save into main app database \u2013 and then \npublish\n into Centrifugo using HTTP API so Centrifugo broadcast message to all clients subscribed on channel.\n\n\nServer API works on \n/api\n endpoint. It's very simple to use: you just have to send POST request with JSON command to this endpoint.\n\n\nIn this chapter we will look at API protocol internals - for new API client library authors and just if you are curious how existing API clients work.\n\n\nAPI request is a POST HTTP request with \napplication/json\n Content-Type and JSON payload in request body.\n\n\nAPI protected by \napi_key\n set in Centrifugo configuration. I.e. \napi_key\n must be added to config, like:\n\n\n{\n\n    \n...\n\n    \n\"api_key\"\n:\n \n\"<YOUR API KEY>\"\n\n\n}\n\n\n\n\n\nThis API key must be set in request \nAuthorization\n header in this way:\n\n\nAuthorization\n:\n \napikey\n \n<\nKEY\n>\n\n\n\n\n\nIt's possible to disable API key check on Centrifugo side using \napi_insecure\n configuration option. Be sure to protect API endpoint by firewall rules in this case to prevent anyone in internet to send commands over your unprotected Centrifugo API. API key auth is not very safe for man-in-the-middle so recommended way is running Centrifugo with TLS (we are in 2018 in the end).\n\n\nCommand is a JSON object with two properties: \nmethod\n and \nparams\n.\n\n\nmethod\n is a name of command you want to call.\n\nparams\n is an object with command arguments.\n\n\nThere are several commands available. Let's investigate each of available server API commands.\n\n\npublish\n\u00b6\n\n\nPublish command allows to publish data into channel. It looks like this:\n\n\n{\n\n    \n\"method\"\n:\n \n\"publish\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"channel\"\n:\n \n\"chat\"\n,\n \n        \n\"data\"\n:\n \n{\n\n            \n\"text\"\n:\n \n\"hello\"\n\n        \n}\n\n    \n}\n \n\n}\n\n\n\n\n\nLet's apply all information said above and send publish command to Centrifugo. We will send request using \nrequests\n library for Python. \n\n\nimport\n \njson\n\n\nimport\n \nrequests\n\n\n\ncommand\n \n=\n \n{\n\n    \n\"method\"\n:\n \n\"publish\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"channel\"\n:\n \n\"docs\"\n,\n \n        \n\"data\"\n:\n \n{\n\n            \n\"content\"\n:\n \n\"1\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\napi_key\n \n=\n \n\"YOUR_API_KEY\"\n\n\ndata\n \n=\n \njson\n.\ndumps\n(\ncommand\n)\n\n\nheaders\n \n=\n \n{\n'Content-type'\n:\n \n'application/json'\n,\n \n'Authorization'\n:\n \n'apikey '\n \n+\n \napi_key\n}\n\n\nresp\n \n=\n \nrequests\n.\npost\n(\n\"https://centrifuge.example.com/api\"\n,\n \ndata\n=\ndata\n,\n \nheaders\n=\nheaders\n)\n\n\nprint\n(\nresp\n.\njson\n())\n\n\n\n\n\nThe same using \nhttpie\n console tool:\n\n\n$ \necho\n \n'{\"method\": \"publish\", \"params\": {\"channel\": \"chat\", \"data\": {\"text\": \"hello\"}}}'\n \n|\n http \n\"localhost:8000/api\"\n Authorization:\n\"apikey KEY\"\n -vvv\nPOST /api HTTP/1.1\nAccept: application/json, */*\nAccept-Encoding: gzip, deflate\nAuthorization: apikey KEY\nConnection: keep-alive\nContent-Length: \n80\n\nContent-Type: application/json\nHost: localhost:8000\nUser-Agent: HTTPie/0.9.8\n\n\n{\n\n    \n\"method\"\n: \n\"publish\"\n,\n    \n\"params\"\n: \n{\n\n        \n\"channel\"\n: \n\"chat\"\n,\n        \n\"data\"\n: \n{\n\n            \n\"text\"\n: \n\"hello\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\nHTTP/1.1 \n200\n OK\nContent-Length: \n3\n\nContent-Type: application/json\nDate: Thu, \n17\n May \n2018\n \n22\n:01:42 GMT\n\n\n{}\n\n\n\n\n\nIn case of error response object will contain \nerror\n field:\n\n\n$ \necho\n \n'{\"method\": \"publish\", \"params\": {\"channel\": \"unknown:chat\", \"data\": {\"text\": \"hello\"}}}'\n \n|\n http \n\"localhost:8000/api\"\n Authorization:\n\"apikey KEY\"\n\nHTTP/1.1 \n200\n OK\nContent-Length: \n55\n\nContent-Type: application/json\nDate: Thu, \n17\n May \n2018\n \n22\n:03:09 GMT\n\n\n{\n\n    \n\"error\"\n: \n{\n\n        \n\"code\"\n: \n102\n,\n        \n\"message\"\n: \n\"namespace not found\"\n\n    \n}\n\n\n}\n\n\n\n\n\nerror\n object contains error code and message - this also the same for other commands described below.\n\n\npublish\n command is the main command you need. Again - remember that we have client API libraries that can help you avoid some boilerplate we just wrote and help to properly handle error responses from Centrifugo.\n\n\nLet's look at other available commands:\n\n\nbroadcast\n\u00b6\n\n\nSimilar to \npublish\n but allows to send the same data into many channels.\n\n\n{\n\n    \n\"method\"\n:\n \n\"broadcast\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"channels\"\n:\n \n[\n\"CHANNEL_1\"\n,\n \n\"CHANNEL_2\"\n],\n\n        \n\"data\"\n:\n \n{\n\n            \n\"text\"\n:\n \n\"hello\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nunsubscribe\n\u00b6\n\n\nunsubscribe\n allows to unsubscribe user from channel. \nparams\n is an objects with two keys: \nchannel\n and \nuser\n (user ID you want to unsubscribe)\n\n\n{\n\n    \n\"method\"\n:\n \n\"unsubscribe\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"channel\"\n:\n \n\"CHANNEL NAME\"\n,\n\n        \n\"user\"\n:\n \n\"USER ID\"\n\n    \n}\n\n\n}\n\n\n\n\n\ndisconnect\n\u00b6\n\n\ndisconnect\n allows to disconnect user by ID. \nparams\n in an object with \nuser\n key.\n\n\n{\n\n    \n\"method\"\n:\n \n\"disconnect\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"user\"\n:\n \n\"USER ID\"\n\n    \n}\n\n\n}\n\n\n\n\n\npresence\n\u00b6\n\n\npresence\n allows to get channel presence information (all clients currently subscribed on\nthis channel). \nparams\n is an object with \nchannel\n key.\n\n\n{\n\n    \n\"method\"\n:\n \n\"presence\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"channel\"\n:\n \n\"chat\"\n\n    \n}\n\n\n}\n\n\n\n\n\nExample:\n\n\nfz@centrifugo: \necho\n \n'{\"method\": \"presence\", \"params\": {\"channel\": \"chat\"}}'\n \n|\n http \n\"localhost:8000/api\"\n Authorization:\n\"apikey KEY\"\n\nHTTP/1.1 \n200\n OK\nContent-Length: \n127\n\nContent-Type: application/json\nDate: Thu, \n17\n May \n2018\n \n22\n:13:17 GMT\n\n\n{\n\n    \n\"result\"\n: \n{\n\n        \n\"presence\"\n: \n{\n\n            \n\"c54313b2-0442-499a-a70c-051f8588020f\"\n: \n{\n\n                \n\"client\"\n: \n\"c54313b2-0442-499a-a70c-051f8588020f\"\n,\n                \n\"user\"\n: \n\"42\"\n\n            \n}\n,\n            \n\"adad13b1-0442-499a-a70c-051f858802da\"\n: \n{\n\n                \n\"client\"\n: \n\"adad13b1-0442-499a-a70c-051f858802da\"\n,\n                \n\"user\"\n: \n\"42\"\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\npresence_stats\n\u00b6\n\n\npresence_stats\n allows to get short channel presence information.\n\n\n{\n\n    \n\"method\"\n:\n \n\"presence_stats\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"channel\"\n:\n \n\"chat\"\n\n    \n}\n\n\n}\n\n\n\n\n\nExample:\n\n\n$ \necho\n \n'{\"method\": \"presence_stats\", \"params\": {\"channel\": \"public:chat\"}}'\n \n|\n http \n\"localhost:8000/api\"\n Authorization:\n\"apikey KEY\"\n\nHTTP/1.1 \n200\n OK\nContent-Length: \n43\n\nContent-Type: application/json\nDate: Thu, \n17\n May \n2018\n \n22\n:09:44 GMT\n\n\n{\n\n    \n\"result\"\n: \n{\n\n        \n\"num_clients\"\n: \n0\n,\n        \n\"num_users\"\n: \n0\n\n    \n}\n\n\n}\n\n\n\n\n\nhistory\n\u00b6\n\n\nhistory\n allows to get channel history information (list of last messages published into channel).\n\n\nparams\n is an object with \nchannel\n key:\n\n\n{\n\n    \n\"method\"\n:\n \n\"history\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"channel\"\n:\n \n\"chat\"\n\n    \n}\n\n\n}\n\n\n\n\n\nExample:\n\n\n$ \necho\n \n'{\"method\": \"history\", \"params\": {\"channel\": \"public:chat\"}}'\n \n|\n http \n\"localhost:8000/api\"\n Authorization:\n\"apikey KEY\"\n\nHTTP/1.1 \n200\n OK\nContent-Length: \n87\n\nContent-Type: application/json\nDate: Thu, \n17\n May \n2018\n \n22\n:14:10 GMT\n\n\n{\n\n    \n\"result\"\n: \n{\n\n        \n\"publications\"\n: \n[\n\n            \n{\n\n                \n\"data\"\n: \n{\n\n                    \n\"text\"\n: \n\"hello\"\n\n                \n}\n,\n                \n\"uid\"\n: \n\"BWcn14OTBrqUhTXyjNg0fg\"\n\n            \n}\n, \n{\n\n                \n\"data\"\n: \n{\n\n                    \n\"text\"\n: \n\"hi!\"\n\n                \n}\n,\n                \n\"uid\"\n: \n\"Ascn14OTBrq14OXyjNg0hg\"\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\nchannels\n\u00b6\n\n\nchannels\n allows to get list of active (with one or more subscribers) channels.\n\n\n{\n\n    \n\"method\"\n:\n \n\"channels\"\n,\n\n    \n\"params\"\n:\n \n{}\n\n\n}\n\n\n\n\n\nExample:\n\n\n$ \necho\n \n'{\"method\": \"channels\", \"params\": {}}'\n \n|\n http \n\"localhost:8000/api\"\n Authorization:\n\"apikey KEY\"\n\nHTTP/1.1 \n200\n OK\nContent-Length: \n27\n\nContent-Type: application/json\nDate: Thu, \n17\n May \n2018\n \n22\n:08:31 GMT\n\n\n{\n\n    \n\"result\"\n: \n{\n\n        \n\"channels\"\n: \n[\n\n            \n\"chat\"\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\ninfo\n\u00b6\n\n\ninfo\n method allows to get information about running Centrifugo nodes.\n\n\n{\n\n    \n\"method\"\n:\n \n\"info\"\n,\n\n    \n\"params\"\n:\n \n{}\n\n\n}\n\n\n\n\n\nExample:\n\n\n$ \necho\n \n'{\"method\": \"info\", \"params\": {}}'\n \n|\n http \n\"localhost:8000/api\"\n Authorization:\n\"apikey KEY\"\n\nHTTP/1.1 \n200\n OK\nContent-Length: \n184\n\nContent-Type: application/json\nDate: Thu, \n17\n May \n2018\n \n22\n:07:58 GMT\n\n\n{\n\n    \n\"result\"\n: \n{\n\n        \n\"nodes\"\n: \n[\n\n            \n{\n\n                \n\"name\"\n: \n\"Alexanders-MacBook-Pro.local_8000\"\n,\n                \n\"num_channels\"\n: \n0\n,\n                \n\"num_clients\"\n: \n0\n,\n                \n\"num_users\"\n: \n0\n,\n                \n\"uid\"\n: \n\"f844a2ed-5edf-4815-b83c-271974003db9\"\n,\n                \n\"uptime\"\n: \n0\n,\n                \n\"version\"\n: \n\"\"\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\nCommand pipelining\n\u00b6\n\n\nIt's possible to combine several commands into one request to Centrifugo. To do this use \nJSON streaming\n format. This can improve server throughput and reduce traffic travelling around.",
            "title": "Server HTTP API"
        },
        {
            "location": "/server/api/#server-http-api",
            "text": "HTTP API is a way to send commands to Centrifugo.  Why we need API?  If you look at configuration options you see an option called  publish  defined on configuration top level and for channel namespace. When turned on this option allows browser clients to publish into channels directly. If client publishes a message into channel directly \u2013 your application will not receive that message (it just goes through Centrifugo towards subscribed clients). This pattern can be useful sometimes but in most cases you first need to send new event from client to backend over non-Centrifugo transport (for example via AJAX request in web application), then process it on application backend side \u2013 probably validate, save into main app database \u2013 and then  publish  into Centrifugo using HTTP API so Centrifugo broadcast message to all clients subscribed on channel.  Server API works on  /api  endpoint. It's very simple to use: you just have to send POST request with JSON command to this endpoint.  In this chapter we will look at API protocol internals - for new API client library authors and just if you are curious how existing API clients work.  API request is a POST HTTP request with  application/json  Content-Type and JSON payload in request body.  API protected by  api_key  set in Centrifugo configuration. I.e.  api_key  must be added to config, like:  { \n     ... \n     \"api_key\" :   \"<YOUR API KEY>\"  }   This API key must be set in request  Authorization  header in this way:  Authorization :   apikey   < KEY >   It's possible to disable API key check on Centrifugo side using  api_insecure  configuration option. Be sure to protect API endpoint by firewall rules in this case to prevent anyone in internet to send commands over your unprotected Centrifugo API. API key auth is not very safe for man-in-the-middle so recommended way is running Centrifugo with TLS (we are in 2018 in the end).  Command is a JSON object with two properties:  method  and  params .  method  is a name of command you want to call. params  is an object with command arguments.  There are several commands available. Let's investigate each of available server API commands.",
            "title": "Server HTTP API"
        },
        {
            "location": "/server/api/#publish",
            "text": "Publish command allows to publish data into channel. It looks like this:  { \n     \"method\" :   \"publish\" , \n     \"params\" :   { \n         \"channel\" :   \"chat\" ,  \n         \"data\" :   { \n             \"text\" :   \"hello\" \n         } \n     }   }   Let's apply all information said above and send publish command to Centrifugo. We will send request using  requests  library for Python.   import   json  import   requests  command   =   { \n     \"method\" :   \"publish\" , \n     \"params\" :   { \n         \"channel\" :   \"docs\" ,  \n         \"data\" :   { \n             \"content\" :   \"1\" \n         } \n     }  }  api_key   =   \"YOUR_API_KEY\"  data   =   json . dumps ( command )  headers   =   { 'Content-type' :   'application/json' ,   'Authorization' :   'apikey '   +   api_key }  resp   =   requests . post ( \"https://centrifuge.example.com/api\" ,   data = data ,   headers = headers )  print ( resp . json ())   The same using  httpie  console tool:  $  echo   '{\"method\": \"publish\", \"params\": {\"channel\": \"chat\", \"data\": {\"text\": \"hello\"}}}'   |  http  \"localhost:8000/api\"  Authorization: \"apikey KEY\"  -vvv\nPOST /api HTTP/1.1\nAccept: application/json, */*\nAccept-Encoding: gzip, deflate\nAuthorization: apikey KEY\nConnection: keep-alive\nContent-Length:  80 \nContent-Type: application/json\nHost: localhost:8000\nUser-Agent: HTTPie/0.9.8 { \n     \"method\" :  \"publish\" ,\n     \"params\" :  { \n         \"channel\" :  \"chat\" ,\n         \"data\" :  { \n             \"text\" :  \"hello\" \n         } \n     }  } \n\nHTTP/1.1  200  OK\nContent-Length:  3 \nContent-Type: application/json\nDate: Thu,  17  May  2018   22 :01:42 GMT {}   In case of error response object will contain  error  field:  $  echo   '{\"method\": \"publish\", \"params\": {\"channel\": \"unknown:chat\", \"data\": {\"text\": \"hello\"}}}'   |  http  \"localhost:8000/api\"  Authorization: \"apikey KEY\" \nHTTP/1.1  200  OK\nContent-Length:  55 \nContent-Type: application/json\nDate: Thu,  17  May  2018   22 :03:09 GMT { \n     \"error\" :  { \n         \"code\" :  102 ,\n         \"message\" :  \"namespace not found\" \n     }  }   error  object contains error code and message - this also the same for other commands described below.  publish  command is the main command you need. Again - remember that we have client API libraries that can help you avoid some boilerplate we just wrote and help to properly handle error responses from Centrifugo.  Let's look at other available commands:",
            "title": "publish"
        },
        {
            "location": "/server/api/#broadcast",
            "text": "Similar to  publish  but allows to send the same data into many channels.  { \n     \"method\" :   \"broadcast\" , \n     \"params\" :   { \n         \"channels\" :   [ \"CHANNEL_1\" ,   \"CHANNEL_2\" ], \n         \"data\" :   { \n             \"text\" :   \"hello\" \n         } \n     }  }",
            "title": "broadcast"
        },
        {
            "location": "/server/api/#unsubscribe",
            "text": "unsubscribe  allows to unsubscribe user from channel.  params  is an objects with two keys:  channel  and  user  (user ID you want to unsubscribe)  { \n     \"method\" :   \"unsubscribe\" , \n     \"params\" :   { \n         \"channel\" :   \"CHANNEL NAME\" , \n         \"user\" :   \"USER ID\" \n     }  }",
            "title": "unsubscribe"
        },
        {
            "location": "/server/api/#disconnect",
            "text": "disconnect  allows to disconnect user by ID.  params  in an object with  user  key.  { \n     \"method\" :   \"disconnect\" , \n     \"params\" :   { \n         \"user\" :   \"USER ID\" \n     }  }",
            "title": "disconnect"
        },
        {
            "location": "/server/api/#presence",
            "text": "presence  allows to get channel presence information (all clients currently subscribed on\nthis channel).  params  is an object with  channel  key.  { \n     \"method\" :   \"presence\" , \n     \"params\" :   { \n         \"channel\" :   \"chat\" \n     }  }   Example:  fz@centrifugo:  echo   '{\"method\": \"presence\", \"params\": {\"channel\": \"chat\"}}'   |  http  \"localhost:8000/api\"  Authorization: \"apikey KEY\" \nHTTP/1.1  200  OK\nContent-Length:  127 \nContent-Type: application/json\nDate: Thu,  17  May  2018   22 :13:17 GMT { \n     \"result\" :  { \n         \"presence\" :  { \n             \"c54313b2-0442-499a-a70c-051f8588020f\" :  { \n                 \"client\" :  \"c54313b2-0442-499a-a70c-051f8588020f\" ,\n                 \"user\" :  \"42\" \n             } ,\n             \"adad13b1-0442-499a-a70c-051f858802da\" :  { \n                 \"client\" :  \"adad13b1-0442-499a-a70c-051f858802da\" ,\n                 \"user\" :  \"42\" \n             } \n         } \n     }  }",
            "title": "presence"
        },
        {
            "location": "/server/api/#presence_stats",
            "text": "presence_stats  allows to get short channel presence information.  { \n     \"method\" :   \"presence_stats\" , \n     \"params\" :   { \n         \"channel\" :   \"chat\" \n     }  }   Example:  $  echo   '{\"method\": \"presence_stats\", \"params\": {\"channel\": \"public:chat\"}}'   |  http  \"localhost:8000/api\"  Authorization: \"apikey KEY\" \nHTTP/1.1  200  OK\nContent-Length:  43 \nContent-Type: application/json\nDate: Thu,  17  May  2018   22 :09:44 GMT { \n     \"result\" :  { \n         \"num_clients\" :  0 ,\n         \"num_users\" :  0 \n     }  }",
            "title": "presence_stats"
        },
        {
            "location": "/server/api/#history",
            "text": "history  allows to get channel history information (list of last messages published into channel).  params  is an object with  channel  key:  { \n     \"method\" :   \"history\" , \n     \"params\" :   { \n         \"channel\" :   \"chat\" \n     }  }   Example:  $  echo   '{\"method\": \"history\", \"params\": {\"channel\": \"public:chat\"}}'   |  http  \"localhost:8000/api\"  Authorization: \"apikey KEY\" \nHTTP/1.1  200  OK\nContent-Length:  87 \nContent-Type: application/json\nDate: Thu,  17  May  2018   22 :14:10 GMT { \n     \"result\" :  { \n         \"publications\" :  [ \n             { \n                 \"data\" :  { \n                     \"text\" :  \"hello\" \n                 } ,\n                 \"uid\" :  \"BWcn14OTBrqUhTXyjNg0fg\" \n             } ,  { \n                 \"data\" :  { \n                     \"text\" :  \"hi!\" \n                 } ,\n                 \"uid\" :  \"Ascn14OTBrq14OXyjNg0hg\" \n             } \n         ] \n     }  }",
            "title": "history"
        },
        {
            "location": "/server/api/#channels",
            "text": "channels  allows to get list of active (with one or more subscribers) channels.  { \n     \"method\" :   \"channels\" , \n     \"params\" :   {}  }   Example:  $  echo   '{\"method\": \"channels\", \"params\": {}}'   |  http  \"localhost:8000/api\"  Authorization: \"apikey KEY\" \nHTTP/1.1  200  OK\nContent-Length:  27 \nContent-Type: application/json\nDate: Thu,  17  May  2018   22 :08:31 GMT { \n     \"result\" :  { \n         \"channels\" :  [ \n             \"chat\" \n         ] \n     }  }",
            "title": "channels"
        },
        {
            "location": "/server/api/#info",
            "text": "info  method allows to get information about running Centrifugo nodes.  { \n     \"method\" :   \"info\" , \n     \"params\" :   {}  }   Example:  $  echo   '{\"method\": \"info\", \"params\": {}}'   |  http  \"localhost:8000/api\"  Authorization: \"apikey KEY\" \nHTTP/1.1  200  OK\nContent-Length:  184 \nContent-Type: application/json\nDate: Thu,  17  May  2018   22 :07:58 GMT { \n     \"result\" :  { \n         \"nodes\" :  [ \n             { \n                 \"name\" :  \"Alexanders-MacBook-Pro.local_8000\" ,\n                 \"num_channels\" :  0 ,\n                 \"num_clients\" :  0 ,\n                 \"num_users\" :  0 ,\n                 \"uid\" :  \"f844a2ed-5edf-4815-b83c-271974003db9\" ,\n                 \"uptime\" :  0 ,\n                 \"version\" :  \"\" \n             } \n         ] \n     }  }",
            "title": "info"
        },
        {
            "location": "/server/api/#command-pipelining",
            "text": "It's possible to combine several commands into one request to Centrifugo. To do this use  JSON streaming  format. This can improve server throughput and reduce traffic travelling around.",
            "title": "Command pipelining"
        },
        {
            "location": "/server/recover/",
            "text": "How message recovery works\n\u00b6\n\n\nOne of the most interesting features of Centrifugo is message recovery after short network disconnects. This mechanism allows client to automatically get missed message on successful resubscribe to channel after being disconnected for a while. In general you would query your application backend for actual state on every client reconnect - but message recovery feature allows Centrifugo itself to deal with this and restore missed messages from history cache thus reducing load on your application backend in some scenarios.\n\n\nTo enable recovery mechanism for channels set \nhistory_recover\n boolean configuration option to \ntrue\n on configuration top level or for channel namespace.\n\n\nWhen subscribing on channels Centrifugo will return missed \npublications\n to client in subscribe Reply and also special \nrecovered\n boolean flag to indicate whether all messages were recovered after disconnect or not.\n\n\nCentrifugo recovery model based on three fields in protocol: \nseq\n, \ngen\n and \nepoch\n. All fields are managed automatically by Centrifugo client libraries but it's good to know how recovery works under the hood.\n\n\nOnce \nhistory_recover\n option enabled every publication will have incremental (inside channel) \nseq\n field. Once \nseq\n exceeds maximum value for \nuint32\n we increment another field \ngen\n (also \nuint32\n) by one. The reason we use 2 \nuint32\n fields instead of one \nuint64\n is that our main target environment - browser Javascript - does not work well with big numbers so we use 2 separate fields as workaround (another possible solution could be passing numbers as strings). Another field is string \nepoch\n. It exists to handle cases when history storage has been restarted while client was in disconnected state so publication numeration in channel started from scratch. For example at moment Memory engine does not persist publication sequences on disk so every restart will start numeration from scratch, after each restart new \nepoch\n field generated and we can understand in recovery process that client could miss messages thus returning it correct \nrecovered\n flag. This also applies to Redis engine \u2013 if you do not use AOF with fsync then sequences can be lost after Redis restart. When using Redis engine you need to use fully in-memory model strategy or AOF with fsync to guarantee reliability of \nrecovered\n flag sent by Centrifugo.\n\n\nWhen server receives subscribe request with \nseq\n, \ngen\n and \nepoch\n set in subscribe command it can look at history cache and find all missed publications. Recovered messages will be passed to client in subscribe reply in correct order and your publication handler will be automatically called to process each missed message.\n\n\nYou can also manually implement your own recovery algorithm on top of basic PUB/SUB possibilities that Centrifugo provides. As we said above you can simply ask your backend for an actual state after every client reconnect completely bypassing recovery mechanism described here.",
            "title": "Message recovery"
        },
        {
            "location": "/server/recover/#how-message-recovery-works",
            "text": "One of the most interesting features of Centrifugo is message recovery after short network disconnects. This mechanism allows client to automatically get missed message on successful resubscribe to channel after being disconnected for a while. In general you would query your application backend for actual state on every client reconnect - but message recovery feature allows Centrifugo itself to deal with this and restore missed messages from history cache thus reducing load on your application backend in some scenarios.  To enable recovery mechanism for channels set  history_recover  boolean configuration option to  true  on configuration top level or for channel namespace.  When subscribing on channels Centrifugo will return missed  publications  to client in subscribe Reply and also special  recovered  boolean flag to indicate whether all messages were recovered after disconnect or not.  Centrifugo recovery model based on three fields in protocol:  seq ,  gen  and  epoch . All fields are managed automatically by Centrifugo client libraries but it's good to know how recovery works under the hood.  Once  history_recover  option enabled every publication will have incremental (inside channel)  seq  field. Once  seq  exceeds maximum value for  uint32  we increment another field  gen  (also  uint32 ) by one. The reason we use 2  uint32  fields instead of one  uint64  is that our main target environment - browser Javascript - does not work well with big numbers so we use 2 separate fields as workaround (another possible solution could be passing numbers as strings). Another field is string  epoch . It exists to handle cases when history storage has been restarted while client was in disconnected state so publication numeration in channel started from scratch. For example at moment Memory engine does not persist publication sequences on disk so every restart will start numeration from scratch, after each restart new  epoch  field generated and we can understand in recovery process that client could miss messages thus returning it correct  recovered  flag. This also applies to Redis engine \u2013 if you do not use AOF with fsync then sequences can be lost after Redis restart. When using Redis engine you need to use fully in-memory model strategy or AOF with fsync to guarantee reliability of  recovered  flag sent by Centrifugo.  When server receives subscribe request with  seq ,  gen  and  epoch  set in subscribe command it can look at history cache and find all missed publications. Recovered messages will be passed to client in subscribe reply in correct order and your publication handler will be automatically called to process each missed message.  You can also manually implement your own recovery algorithm on top of basic PUB/SUB possibilities that Centrifugo provides. As we said above you can simply ask your backend for an actual state after every client reconnect completely bypassing recovery mechanism described here.",
            "title": "How message recovery works"
        },
        {
            "location": "/server/signals/",
            "text": "Signal handling\n\u00b6\n\n\nYou can send HUP signal to Centrifugo to reload configuration:\n\n\nkill -HUP <PID>\n\n\n\n\nThough at moment this will only reload channel and namespace configuration.\n\n\nAlso Centrifugo tries to gracefully shutdown client connections when SIGINT or SIGTERM signals received. By default maximum graceful shutdown period is 30 seconds but can be changed using \nshutdown_timeout\n configuration option.",
            "title": "Signal handling"
        },
        {
            "location": "/server/signals/#signal-handling",
            "text": "You can send HUP signal to Centrifugo to reload configuration:  kill -HUP <PID>  Though at moment this will only reload channel and namespace configuration.  Also Centrifugo tries to gracefully shutdown client connections when SIGINT or SIGTERM signals received. By default maximum graceful shutdown period is 30 seconds but can be changed using  shutdown_timeout  configuration option.",
            "title": "Signal handling"
        },
        {
            "location": "/server/connection_expiration/",
            "text": "Connection expiration\n\u00b6\n\n\nIn authentication chapter we mentioned \nexp\n claim in connection token that allows to expire client connection at some point of time. In this chapter we will look at details on what happens when Centrifugo detects that connection is going to expire.\n\n\nSo first you should do is enable client expiration mechanism in Centrifugo providing connection token with expiration:\n\n\nimport\n \njwt\n\n\nimport\n \ntime\n\n\n\ntoken\n \n=\n \njwt\n.\nencode\n({\n\"sub\"\n:\n \n\"42\"\n,\n \n\"exp\"\n:\n \nint\n(\ntime\n.\ntime\n())\n \n+\n \n10\n*\n60\n},\n \n\"secret\"\n)\n.\ndecode\n()\n\n\n\nprint\n(\ntoken\n)\n\n\n\n\n\nLet's suppose that you set \nexp\n field to timestamp that will expire in 10 minutes and client connected to Centrifugo with this token. During 10 mins connection will be kept by Centrifugo. When this time passed Centrifugo gives connection some time (configured, 25 seconds by default) to refresh its credentials and provide new valid token with new \nexp\n.\n\n\nWhen client first connects to Centrifugo it receives \nttl\n value in connect reply. That \nttl\n value contains number of seconds after which client must send \nrefresh\n command with new credentials to Centrifugo. Centrifugo clients must handle this \nttl\n field and automatically start refresh process.\n\n\nFor example Javascript browser client  will send AJAX POST request to your application when it's time to refresh credentials. By default this request goes to \n/centrifuge/refresh\n url endpoint. In response your server must return JSON with new connection token:\n\n\n{\n\n    \n\"token\"\n:\n \ntoken\n\n\n}\n\n\n\n\n\nSo you must just return the same connection token for your user when rendering page initially. But with actual valid \nexp\n. Javascript client will then send them to Centrifugo server and connection will be refreshed for a time you set in \nexp\n.\n\n\nIn this case you know which user want to refresh its connection because this is just a general request to your app - so your session mechanism will tell you about the user.\n\n\nIf you don't want to refresh connection for this user - just return 403 Forbidden on refresh request to your application backend.\n\n\nJavascript client also has options to hook into refresh mechanism to implement your custom way of refreshing. Other Centrifugo clients also should have hooks to refresh credentials but depending on client API for this can be different - see specific client docs.",
            "title": "Connection expiration"
        },
        {
            "location": "/server/connection_expiration/#connection-expiration",
            "text": "In authentication chapter we mentioned  exp  claim in connection token that allows to expire client connection at some point of time. In this chapter we will look at details on what happens when Centrifugo detects that connection is going to expire.  So first you should do is enable client expiration mechanism in Centrifugo providing connection token with expiration:  import   jwt  import   time  token   =   jwt . encode ({ \"sub\" :   \"42\" ,   \"exp\" :   int ( time . time ())   +   10 * 60 },   \"secret\" ) . decode ()  print ( token )   Let's suppose that you set  exp  field to timestamp that will expire in 10 minutes and client connected to Centrifugo with this token. During 10 mins connection will be kept by Centrifugo. When this time passed Centrifugo gives connection some time (configured, 25 seconds by default) to refresh its credentials and provide new valid token with new  exp .  When client first connects to Centrifugo it receives  ttl  value in connect reply. That  ttl  value contains number of seconds after which client must send  refresh  command with new credentials to Centrifugo. Centrifugo clients must handle this  ttl  field and automatically start refresh process.  For example Javascript browser client  will send AJAX POST request to your application when it's time to refresh credentials. By default this request goes to  /centrifuge/refresh  url endpoint. In response your server must return JSON with new connection token:  { \n     \"token\" :   token  }   So you must just return the same connection token for your user when rendering page initially. But with actual valid  exp . Javascript client will then send them to Centrifugo server and connection will be refreshed for a time you set in  exp .  In this case you know which user want to refresh its connection because this is just a general request to your app - so your session mechanism will tell you about the user.  If you don't want to refresh connection for this user - just return 403 Forbidden on refresh request to your application backend.  Javascript client also has options to hook into refresh mechanism to implement your custom way of refreshing. Other Centrifugo clients also should have hooks to refresh credentials but depending on client API for this can be different - see specific client docs.",
            "title": "Connection expiration"
        },
        {
            "location": "/server/private_channels/",
            "text": "Private channels\n\u00b6\n\n\nIn channels chapter we mentioned private channels. This chapter has more information about private channel mechanism in Centrifugo.\n\n\nAll channels starting with \n$\n considered private. In this case your backend should additionally provide token for subscription request. The way how this token is obtained varies depending on client implementation.\n\n\nFor example in Javascript client AJAX POST request is automatically sent to\u00a0\n/centrifuge/subscribe\n endpoint on every private channel subscription attempt. Other client libraries can provide a hook for your custom code that will obtain private channel subscription token from application backend.\n\n\nPrivate channel subscription token is also JWT (like connection token described in \nauthentication chapter\n). But it has different claims.\n\n\n\n\nNote\n\n\nConnection token and private channel subscription token are different entities. Though both are JWT and you can generate them using any JWT library.\n\n\n\n\nClaims\n\u00b6\n\n\nPrivate channel subscription token claims are: \nclient\n, \nchannel\n, \ninfo\n, \nb64info\n and \nexp\n. What do they mean? Let's describe in detail.\n\n\nclient\n\u00b6\n\n\nRequired. Client ID which wants to subscribe on channel (\nstring\n).\n\n\nchannel\n\u00b6\n\n\nRequired. Channel that client tries to subscribe to (\nstring\n).\n\n\ninfo\n\u00b6\n\n\nOptional. Additional information for connection regarding to channel (\nvalid JSON\n).\n\n\nb64info\n\u00b6\n\n\nOptional. Additional information for connection regarding to channel in base64 format (\nstring\n).\n\n\nexp\n\u00b6\n\n\nOptional. This is standard JWT claim that allows to set private channel subscription token expiration time.\n\n\nAt moment if subscription token expires client connection will be closed and client will try to reconnect. In most cases you don't need this and should prefer using \nexp\n of connection token to deactivate connection. But if you need more granular per-channel control this may fit your needs.\n\n\nOnce \nexp\n set in token every subscription token must be periodically refreshed. Refer to specific client documentation in order to see how to refresh subscription tokens.\n\n\nExample\n\u00b6\n\n\nSo to generate subscription token you can use smth like this in Python (assuming client ID is \nXXX\n and private channel is \n$gossips\n):\n\n\nimport\n \njwt\n\n\n\ntoken\n \n=\n \njwt\n.\nencode\n({\n\"client\"\n:\n \n\"XXX\"\n,\n \n\"channel\"\n:\n \n\"$gossips\"\n},\n \n\"secret\"\n,\n \nalgorithm\n=\n\"HS256\"\n)\n.\ndecode\n()\n\n\n\nprint\n(\ntoken\n)\n\n\n\n\n\nAgain - the same \nsecret\n from Centrifugo configuration is used to generate private channel JWT as was used to generate connection JWT. And as with connection JWT only \nHS256\n algorithm is supported at moment.",
            "title": "Private channels"
        },
        {
            "location": "/server/private_channels/#private-channels",
            "text": "In channels chapter we mentioned private channels. This chapter has more information about private channel mechanism in Centrifugo.  All channels starting with  $  considered private. In this case your backend should additionally provide token for subscription request. The way how this token is obtained varies depending on client implementation.  For example in Javascript client AJAX POST request is automatically sent to\u00a0 /centrifuge/subscribe  endpoint on every private channel subscription attempt. Other client libraries can provide a hook for your custom code that will obtain private channel subscription token from application backend.  Private channel subscription token is also JWT (like connection token described in  authentication chapter ). But it has different claims.   Note  Connection token and private channel subscription token are different entities. Though both are JWT and you can generate them using any JWT library.",
            "title": "Private channels"
        },
        {
            "location": "/server/private_channels/#claims",
            "text": "Private channel subscription token claims are:  client ,  channel ,  info ,  b64info  and  exp . What do they mean? Let's describe in detail.",
            "title": "Claims"
        },
        {
            "location": "/server/private_channels/#client",
            "text": "Required. Client ID which wants to subscribe on channel ( string ).",
            "title": "client"
        },
        {
            "location": "/server/private_channels/#channel",
            "text": "Required. Channel that client tries to subscribe to ( string ).",
            "title": "channel"
        },
        {
            "location": "/server/private_channels/#info",
            "text": "Optional. Additional information for connection regarding to channel ( valid JSON ).",
            "title": "info"
        },
        {
            "location": "/server/private_channels/#b64info",
            "text": "Optional. Additional information for connection regarding to channel in base64 format ( string ).",
            "title": "b64info"
        },
        {
            "location": "/server/private_channels/#exp",
            "text": "Optional. This is standard JWT claim that allows to set private channel subscription token expiration time.  At moment if subscription token expires client connection will be closed and client will try to reconnect. In most cases you don't need this and should prefer using  exp  of connection token to deactivate connection. But if you need more granular per-channel control this may fit your needs.  Once  exp  set in token every subscription token must be periodically refreshed. Refer to specific client documentation in order to see how to refresh subscription tokens.",
            "title": "exp"
        },
        {
            "location": "/server/private_channels/#example",
            "text": "So to generate subscription token you can use smth like this in Python (assuming client ID is  XXX  and private channel is  $gossips ):  import   jwt  token   =   jwt . encode ({ \"client\" :   \"XXX\" ,   \"channel\" :   \"$gossips\" },   \"secret\" ,   algorithm = \"HS256\" ) . decode ()  print ( token )   Again - the same  secret  from Centrifugo configuration is used to generate private channel JWT as was used to generate connection JWT. And as with connection JWT only  HS256  algorithm is supported at moment.",
            "title": "Example"
        },
        {
            "location": "/server/protobuf/",
            "text": "Protobuf binary protocol\n\u00b6\n\n\nIn most cases you will use Centrifugo with JSON protocol which is used by default. It consists of simple human-readable frames that can be easily inspected. Also it's a very simple task to publish JSON encoded data to HTTP API endpoint. You may want to use binary Protobuf client protocol if:\n\n\n\n\nyou want less traffic on wire as Protobuf is very compact\n\n\nyou want maximum performance as Protobuf encoding/decoding is very efficient\n\n\nyou can sacrifice human-readable JSON for your application\n\n\n\n\nBinary protobuf protocol only works for raw Websocket connections (as SockJS can't deal with binary). With most clients to use binary you just need to provide query parameter \nformat\n to Websocket URL, so final URL look like:\n\n\nwss://centrifugo.example.com/connection/websocket?format=protobuf\n\n\n\n\nAfter doing this Centrifugo will use binary frames to pass data between client and server. Your application specific payload can be random bytes.\n\n\n\n\nNote\n\n\nYou still can continue to encode your application specific data as JSON when using Protobuf protocol thus have a possibility to coexist with clients that use JSON protocol on the same Centrifugo installation inside the same channels.",
            "title": "Protobuf protocol"
        },
        {
            "location": "/server/protobuf/#protobuf-binary-protocol",
            "text": "In most cases you will use Centrifugo with JSON protocol which is used by default. It consists of simple human-readable frames that can be easily inspected. Also it's a very simple task to publish JSON encoded data to HTTP API endpoint. You may want to use binary Protobuf client protocol if:   you want less traffic on wire as Protobuf is very compact  you want maximum performance as Protobuf encoding/decoding is very efficient  you can sacrifice human-readable JSON for your application   Binary protobuf protocol only works for raw Websocket connections (as SockJS can't deal with binary). With most clients to use binary you just need to provide query parameter  format  to Websocket URL, so final URL look like:  wss://centrifugo.example.com/connection/websocket?format=protobuf  After doing this Centrifugo will use binary frames to pass data between client and server. Your application specific payload can be random bytes.   Note  You still can continue to encode your application specific data as JSON when using Protobuf protocol thus have a possibility to coexist with clients that use JSON protocol on the same Centrifugo installation inside the same channels.",
            "title": "Protobuf binary protocol"
        },
        {
            "location": "/server/protocol/",
            "text": "Client protocol\n\u00b6\n\n\nThis chapter describes internal client-server protocol in details to help developers build new client libraries and understand how existing client libraries work.\n\n\nNote that you can always look at existing client implementations in case of any questions, for example \ncentrifuge-js\n or \ncentrifuge-go\n.\n\n\nClient implementation checklist\n\u00b6\n\n\nFirst we will look at list of features client library should support. Depending on client implementation some features can be not implemented. If you an author of client library you can use this list as checklist.\n\n\n\n\nNote\n\n\nField and method names presented in this checklist can have different names depending on programmer's taste and language style guide\n\n\n\n\nSo, client:\n\n\n\n\nShould work both with Centrifugo and Centrifuge library based server. To work with Centrifugo client must have a method to set connection token. To work with Centrifuge lib client must provide a method to set custom headers (the only exception is browser clients where browser automatically sets headers with respect to domain rules)\n\n\nShould allow to use JSON payload\n\n\nShould allow to use binary payload (actually you can only implement Protobuf protocol as you can pass JSON over it)\n\n\nMust handle cases when many different Replies received in one websocket frame. In case of JSON protocol newline-delimited JSON-streaming format is used to combine several Replies into one websocket frame. In case of Protobuf protocol varint length-prefixed format is used\n\n\nMust survive server reload/restart and internet connection lost. In this case client must try to reconnect with exponentioal backoff strategy\n\n\nMust have several callback methods: \nonConnect\n, \nonDisconnect\n. Depending on implementation you can also use \nonError\n callback for critical errors that could not be gracefully handled. \n\n\nShould also have \nonMessage\n callback to handle async messages from server.\n\n\nMust have method to subscribe on channel and set several event handlers: \nonPublish\n, \nonJoin\n, \nonLeave\n, \nonSubscribeSuccess\n, \nonSubscribeError\n, \nonUnsubscribe\n. After subscribe method called it should return \nSubscription\n object to caller. This subscription object in turn should have some methods: \npublish\n, \nunsubscribe\n, \nsubscribe\n, \nhistory\n, \npresence\n, \npresence_stats\n.\n\n\nShould have \npublish\n method to publish into channel without subscribing to it.\n\n\nShould have \nrpc\n method to send RPC request to server.\n\n\nShould have \nsend\n method to send asynchronous message to server (without waiting response).\n\n\nShould handle disconnect reason. In case of Websocket it is sent by server in CLOSE Websocket frame. This is a string containing JSON object with fields: \nreason\n (string) and \nreconnect\n (bool). Client should give users access to these fields in disconnect event and automatically follow \nreconnect\n advice\n\n\nMust send periodic \nping\n commands to server and thus detect broken connection. If no ping reply received from server in configured window reconnect workflow must be initiated\n\n\nShould fully reconnect if subscription request timed out. Timeout can be configured by client library users.\n\n\nShould send commands to server with timeout and handle timeout error - depending on method called timeout error handling can differ a bit. For example as said above timeout on subscription request results in full client reconnect workflow.\n\n\nShould support connection token refresh mechanism\n\n\nShould support private channel subscriptions and private subscription token refresh mechanism\n\n\nShould automatically recover messages after reconnect and set appropriate fields in subscribe event context. Two important fields in \nonSubscribeSuccess\n event context are \nrecovered\n and \nisResubscribe\n. First field let user know what server thinks about subscription state - were all messages recovered or not. The second field must only be true if resubscribe was caused by temporary network connection lost. If user initiated resubscribe himself (calling \nunsubscribe\n method and then \nsubscribe\n method) then recover workflow should not be used and \nisResubscribe\n must be \nfalse\n.\n\n\n\n\nBelow in this document we will describe protocol concepts in detail.\n\n\nThis document describes protocol specifics for Websocket transport which supports binary and text formats to transfer data. As Centrifuge has various types of messages it serializes protocol messages using JSON or Protobuf (in case of binary websockets).\n\n\n\n\nNote\n\n\nSockJS works almost the same way as JSON websocket described here but has its own extra framing on top of Centrifuge protocol messages. SockJS can only work with JSON - it's not possible to transfer binary data over it. SockJS is only needed as fallback to Websocket in web browsers.\n\n\n\n\nTop level framing\n\u00b6\n\n\nCentrifuge protocol defined in \nProtobuf schema\n. That schema is a source of truth and all protocol description below describes messages from that schema.\n\n\nClient sends \nCommand\n to server.\n\n\nServer sends \nReply\n to client.\n\n\nOne request from client to server and one response from server to client can have more than one \nCommand\n or \nReply\n.\n\n\nWhen JSON format is used then many \nCommand\n can be sent from client to server in JSON streaming line-delimited format. I.e. each individual \nCommand\n encoded to JSON and then commands joined together using new line symbol \n\\n\n:\n\n\n{\n\"id\"\n:\n \n1\n,\n \n\"method\"\n:\n \n\"subscribe\"\n,\n \n\"params\"\n:\n \n{\n\"channel\"\n:\n \n\"ch1\"\n}}\n\n\n{\n\"id\"\n:\n \n2\n,\n \n\"method\"\n:\n \n\"subscribe\"\n,\n \n\"params\"\n:\n \n{\n\"channel\"\n:\n \n\"ch2\"\n}}\n\n\n\n\n\nFor example here is how we do this in Javascript client when JSON format used:\n\n\nfunction\n \nencodeCommands\n(\ncommands\n)\n \n{\n\n    \nconst\n \nencodedCommands\n \n=\n \n[];\n\n    \nfor\n \n(\nconst\n \ni\n \nin\n \ncommands\n)\n \n{\n\n      \nif\n \n(\ncommands\n.\nhasOwnProperty\n(\ni\n))\n \n{\n\n        \nencodedCommands\n.\npush\n(\nJSON\n.\nstringify\n(\ncommands\n[\ni\n]));\n\n      \n}\n\n    \n}\n\n    \nreturn\n \nencodedCommands\n.\njoin\n(\n'\\n'\n);\n\n\n}\n\n\n\n\n\n\n\nNote\n\n\nThis doc will use JSON format for examples because it's human-readable. Everything said here for JSON is also true for Protobuf encoded case. The only difference is how several individual \nCommand\n or server \nReply\n joined into one request \u2013 see below.\n\n\n\n\n\n\nNote\n\n\nMethod is made as ENUM in protobuf schema and can be sent as integer value but it's possible to send it as string in JSON case \u2013 this was made to make JSON protocol human-friendly.\n\n\n\n\nWhen Protobuf format is used then many \nCommand\n can be sent from client to server in length-delimited format where each individual \nCommand\n marshaled to bytes prepended by \nvarint\n length. See existing client implementations for encoding example.\n\n\nThe same rules relate to many \nReply\n in one response from server to client. Line-delimited JSON and varint-length prefixed Protobuf.\n\n\nFor example here is how we read server response and extracting individual replies in Javascript client when JSON format used:\n\n\nfunction\n \ndecodeReplies\n(\ndata\n)\n \n{\n\n    \nconst\n \nreplies\n \n=\n \n[];\n\n    \nconst\n \nencodedReplies\n \n=\n \ndata\n.\nsplit\n(\n'\\n'\n);\n\n    \nfor\n \n(\nconst\n \ni\n \nin\n \nencodedReplies\n)\n \n{\n\n      \nif\n \n(\nencodedReplies\n.\nhasOwnProperty\n(\ni\n))\n \n{\n\n        \nif\n \n(\n!\nencodedReplies\n[\ni\n])\n \n{\n\n          \ncontinue\n;\n\n        \n}\n\n        \nconst\n \nreply\n \n=\n \nJSON\n.\nparse\n(\nencodedReplies\n[\ni\n]);\n\n        \nreplies\n.\npush\n(\nreply\n);\n\n      \n}\n\n    \n}\n\n    \nreturn\n \nreplies\n;\n\n\n}\n\n\n\n\n\nFor Protobuf case see existing client implementations for decoding example.\n\n\nAs you can see each \nCommand\n has \nid\n field. This is an incremental integer field. This field will be echoed in server to client replies to commands so client could match a certain \nReply\n to \nCommand\n sent before. This is important because Websocket is asynchronous protocol where server and client both send messages at any moment and there is no builtin request-response pattern. Having \nid\n allows to match reply to command send before.\n\n\nSo you can expect something like this in response after sending commands to server:\n\n\n{\n\"id\"\n:\n \n1\n,\n \n\"result\"\n:\n \n{}}\n\n\n{\n\"id\"\n:\n \n2\n,\n \n\"result\"\n:\n \n{}}\n\n\n\n\n\nBesides \nid\n \nReply\n from server to client have two important fields: \nresult\n and \nerror\n.\n\n\nresult\n contains useful payload object which can be different depending on \nReply\n.\n\n\nerror\n contains error object in case of \nCommand\n processing resulted in some error on server. \nerror\n is optional and if \nReply\n does not have \nerror\n then it means that \nCommand\n processed successfuly and client can parse \nresult\n object in an appropriate way.\n\n\nerror\n objects looks like this:\n\n\n{\n\n    \n\"code\"\n:\n \n100\n,\n\n    \n\"message\"\n:\n \n\"internal server error\"\n\n\n}\n\n\n\n\n\nWe will talk more about error handling below.\n\n\nThe special type of \nReply\n is asynchronous \nReply\n. Those replies have no \nid\n field set (or \nid\n can be equal to zero). Async replies can come to client in any moment - not as reaction to issued \nCommand\n but as message from server to client in arbitrary time. For example this can be message published into channel.\n\n\nCentrifuge library defines several command types client can issue. And well-written client must be aware of all those commands and client workflow. Communication with Centrifuge/Centrifugo server starts with \nconnect\n command.\n\n\nConnect\n\u00b6\n\n\nFirst of all client must dial with server and then send \nconnect\n \nCommand\n to it.\n\n\nDefault Websocket endpoint in Centrifugo is:\n\n\nws://centrifugo.example.com/connection/websocket\n\n\n\n\nIn case of using TLS:\n\n\nwss://centrifugo.example.com/connection/websocket\n\n\n\n\nAfter successful dial to websocket endpoint client must send \nconnect\n command to server to authorize itself.\n\n\nconnect\n command looks like:\n\n\n{\n\n    \n\"id\"\n:\n \n1\n,\n\n    \n\"method\"\n:\n \n\"connect\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"token\"\n:\n \n\"JWT\"\n,\n\n        \n\"data\"\n:\n \n{}\n\n    \n}\n\n\n}\n\n\n\n\n\nWhere params fields are passed to client from application backend:\n\n\n\n\nstring \ntoken\n - connection token.\n\n\nJSON \ndata\n - this is only available for Centrifuge library and not for Centrifugo server. It contains custom connect data, for example it can contain client settings. \n\n\n\n\nIn response to \nconnect\n command server sends connect reply. It looks this way:\n\n\n{\n\n    \n\"id\"\n:\n1\n,\n\n    \n\"result\"\n:\n{\n\n        \n\"client\"\n:\n\"421bf374-dd01-4f82-9def-8c31697e956f\"\n,\n\n        \n\"version\"\n:\n\"2.0.0\"\n\n    \n}\n\n\n}\n\n\n\n\n\nresult\n has some fields:\n\n\n\n\nstring \nclient\n - unique client connection ID server issued to this connection\n\n\nstring \nversion\n - server version\n\n\noptional bool \nexpires\n - whether or not server will expire connection\n\n\noptional int32 \nttl\n - time in seconds until connection will expire\n\n\n\n\nSubscribe\n\u00b6\n\n\nAs soon as client successfully connected and got unique connection ID it is ready to\nsubscribe on channels. To do this it must send \nsubscribe\n command to server:\n\n\n{\n\n    \n\"id\"\n:\n \n2\n,\n\n    \n\"method\"\n:\n \n\"subscribe\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"channel\"\n:\n \n\"ch1\"\n\n    \n}\n\n\n}\n\n\n\n\n\nFields that can be set in \nparams\n are:\n\n\n\n\nstring \nchannel\n - channel to subscribe\n\n\n\n\nIn response to subscribe client receives reply like:\n\n\n{\n\n    \n\"id\"\n:\n2\n,\n\n    \n\"result\"\n:\n{}\n\n\n}\n\n\n\n\n\nresult\n can have the following fields that relate to subscription expiration:\n\n\n\n\noptional bool \nexpires\n - indicates whether subscription expires or not.\n\n\noptional uint32 \nttl\n - number of seconds until subscription expire.\n\n\n\n\nAnd several fields that relate to message recovery:\n\n\n\n\noptional bool \nrecoverable\n - means that messages can be recovered in this subscription.\n\n\noptional uint32 \nseq\n - current publication sequence inside channel\n\n\noptional uint32 \ngen\n - current publication generation inside channel\n\n\noptional string \nepoch\n - current epoch inside channel\n\n\noptional array \npublications\n - this is an array of missed publications in channel. When received client must call general publication event handler for each message in this array.\n\n\noptional bool \nrecovered\n - this flag is set to \ntrue\n when server thinks that all missed publications were successfully recovered and send in subscribe reply (in \npublications\n array) and \nfalse\n otherwise.\n\n\n\n\nSee more about meaning of recovery related fields in \nspecial doc chapter\n.\n\n\nAfter client received successful reply on \nsubscribe\n command it will receive asynchronous reply messages published to this channel. Messages can be of several types:\n\n\n\n\nPublication\n message\n\n\nJoin\n message\n\n\nLeave\n message\n\n\nUnsub\n message\n\n\n\n\nSee more about asynchronous messages below. \n\n\nUnsubscribe\n\u00b6\n\n\nThis is simple. When client wants to unsubscribe from channel and therefore stop receiving asynchronous subscription messages from connection related to channel it must call \nunsubscribe\n command:\n\n\n{\n\n    \n\"id\"\n:\n \n3\n,\n\n    \n\"method\"\n:\n \n\"unsubscribe\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"channel\"\n:\n \n\"ch1\"\n\n    \n}\n\n\n}\n\n\n\n\n\nActually server response does not mean a lot for client - it must immediately remove channel subscription from internal implementation data structures and ignore all messages related to channel.\n\n\nRefresh\n\u00b6\n\n\nIt's possible to turn on client connection expiration mechanism on server. While enabled server will keep track of connections whose time of life (defined by \nexp\n timestamp) is close to the end. In this case connection will be closed. Client can prevent closing connection refreshing it's connection credentials. To do this it must send \nrefresh\n command to server. \nrefresh\n command similar to \nconnect\n:\n\n\n{\n\n    \n\"id\"\n:\n \n4\n,\n\n    \n\"method\"\n:\n \n\"refresh\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"token\"\n:\n \n\"JWT\"\n\n    \n}\n\n\n}\n\n\n\n\n\nJust with actual \nexp\n and new \nsign\n.\n\n\nThe tip whether or not connection must be refreshed comes in reply to \nconnect\n command shown above - fields \nexpires\n and \nttl\n.\n\n\nWhen client connection expire mechanism is on the value of field \nexpires\n in connect reply is \ntrue\n. In this case client implementation should look at \nttl\n value which is seconds left until connection will be considered expired. Client must send \nrefresh\n command after this \nttl\n seconds. Server gives client a configured window to refresh token after \nttl\n passed and then closes connection if client have not updated its token.\n\n\nWhen connecting with already expired token an error will be returned (with code \n109\n). In this case client should refresh its token and reconnect with exponential backoff. \n\n\nRPC-like calls: publish, history, presence\n\u00b6\n\n\nThe mechanics of these calls is simple - client sends command and expects response from server.\n\n\npublish\n command allows to publish message into channel from client.\n\n\n\n\nNote\n\n\nTo publish from client \npublish\n option in server configuration must be set to \ntrue\n\n\n\n\nhistory\n allows to ask server for channel history if enabled.\n\n\npresence\n allows to ask server for channel presence information if enabled.\n\n\nAsynchronous server-to-client messages\n\u00b6\n\n\nThere are several types of asynchronous messages that can come from server to client. All of them relate to current client subscriptions.\n\n\nThe most important message is \nPublication\n:\n\n\n{\n\n    \n\"result\"\n:\n{\n\n        \n\"channel\"\n:\n\"ch1\"\n,\n\n        \n\"data\"\n:\n{\n\n            \n\"data\"\n:\n{\n\"input\"\n:\n\"1\"\n},\n\n            \n\"info\"\n:\n{\n\n                \n\"user\"\n:\n\"2694\"\n,\n\n                \n\"client\"\n:\n\"5c48510e-cf49-4fa8-a9b2-490b22231e74\"\n,\n\n                \n\"conn_info\"\n:\n{\n\"name\"\n:\n\"Alexander\"\n},\n\n                \n\"chan_info\"\n:\n{}\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nPublication\n is a message published into channel. Note that there is no \nid\n field in this message - this symptom\nallows to distinguish it from \nReply\n to \nCommand\n.  \n\n\nNext message is \nJoin\n message:\n\n\n{\n\n    \n\"result\"\n:\n{\n\n        \n\"type\"\n:\n1\n,\n\n        \n\"channel\"\n:\n\"ch1\"\n,\n\n        \n\"data\"\n:\n{\n\n            \n\"info\"\n:\n{\n\n                \n\"user\"\n:\n\"2694\"\n,\n\n                \n\"client\"\n:\n\"5c48510e-cf49-4fa8-a9b2-490b22231e74\"\n,\n\n                \n\"conn_info\"\n:\n{\n\"name\"\n:\n\"Alexander\"\n},\n\n                \n\"chan_info\"\n:\n{}\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nJoin\n messages sent when someone joined (subscribed on) channel.\n\n\n\n\nNote\n\n\nTo enable \nJoin\n and \nLeave\n messages \njoin_leave\n option must be enabled on server globally or for channel namespace.\n\n\n\n\nLeave\n messages sent when someone left (unsubscribed from) channel.\n\n\n{\n\n    \n\"result\"\n:\n{\n\n        \n\"type\"\n:\n2\n,\n\n        \n\"channel\"\n:\n\"ch1\"\n,\n\n        \n\"data\"\n:\n{\n\n            \n\"info\"\n:\n{\n\n                \n\"user\"\n:\n\"2694\"\n,\n\n                \n\"client\"\n:\n\"5c48510e-cf49-4fa8-a9b2-490b22231e74\"\n,\n\n                \n\"conn_info\"\n:\n{\n\"name\"\n:\n\"Alexander\"\n},\n\n                \n\"chan_info\"\n:\n{}\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nAnd finally \nUnsub\n message that means that server unsubscribed current client from channel:\n\n\n{\n\n    \n\"result\"\n:\n{\n\n        \n\"type\"\n:\n3\n,\n\n        \n\"channel\"\n:\n\"ch1\"\n,\n\n        \n\"data\"\n:\n{}\n\n    \n}\n\n\n}\n\n\n\n\n\nIt's possible to distinguish between different types of asynchronous messages looking at \ntype\n field (for \nPublication\n this field not set or \n0\n).\n\n\nPing Pong\n\u00b6\n\n\nTo maintain connection alive and detect broken connections client must periodically send \nping\n commands to server and expect replies to it. Ping command looks like:\n\n\n{\n\n    \n\"id\"\n:\n32\n,\n\n    \n\"method\"\n:\n\"ping\"\n\n\n}\n\n\n\n\n\nServer just echoes this command back. When client does not receive ping reply for some time it must consider connection broken and try to reconnect. Recommended ping interval is 25 seconds, recommended period to wait for pong is 1-5 seconds. Though those numbers can vary.\n\n\nHandle disconnects\n\u00b6\n\n\nClient should handle disconnect advices from server. In websocket case disconnect advice is sent in reason field of CLOSE Websocket frame. Reason contains string which is \ndisconnect\n object encoded into JSON (even in case of Protobuf scenario). That objects looks like:\n\n\n{\n\n    \n\"reason\"\n:\n \n\"shutdown\"\n,\n\n    \n\"reconnect\"\n:\n \ntrue\n \n\n}\n\n\n\n\n\nIt contains string reason of connection closing and advice to reconnect or not. Client should take this reconnect advice into account.\n\n\nIn case of network problems and random disconnect from server without well known reason client should always try to  reconnect with exponential intervals.\n\n\nHandle errors\n\u00b6\n\n\nThis section contains advices to error handling in client implementations.\n\n\nErrors can happen during various operations and can be handled in special way in context of some commands to tolerate network and server problems.\n\n\nErrors during \nconnect\n must result in full client reconnect with exponential backoff strategy. The special case is error with code \n110\n which signals that connection token already expired. As we said above client should update its connection JWT before connecting to server again.  \n\n\nErrors during \nsubscribe\n must result in full client reconnect in case of internal error (code \n100\n). And be sent to subscribe error event handler of subscription if received error is persistent. Persistent errors are errors like \npermission denied\n, \nbad request\n, \nnamespace not found\n etc. Persistent errors in most situation mean a mistake from developers side.\n\n\nThe special corner case is client-side timeout during \nsubscribe\n operation. As protocol is asynchronous it's possible in this case that server will eventually subscribe client on channel but client will think that it's not subscribed. It's possible to retry subscription request and tolerate \nalready subscribed\n (code \n105\n) error as expected. But the simplest solution is to reconnect entirely as this is simpler and gives client a chance to connect to working server instance.\n\n\nErrors during rpc-like operations can be just returned to caller - i.e. user javascript code. Calls like \nhistory\n and \npresence\n are idempotent. You should be accurate with unidempotent operations like \npublish\n - in case of client timeout it's possible to send the same message into channel twice if retry publish after timeout - so users of libraries must care about this case \u2013 making sure they have some protection from displaying message twice on client side (maybe some sort of unique key in payload).\n\n\nClient implementation advices\n\u00b6\n\n\nHere are some advices about client public API. Examples here are in Javascript language. This is just an attempt to help in developing a client - but rules here is not obligatorily the best way to implement client.\n\n\nCreate client instance:\n\n\nvar\n \ncentrifuge\n \n=\n \nnew\n \nCentrifuge\n(\n\"ws://localhost:8000/connection/websocket\"\n,\n \n{});\n\n\n\n\n\nSet connection token (in case of using Centrifugo):\n\n\ncentrifuge\n.\nsetToken\n(\n\"XXX\"\n)\n\n\n\n\n\nConnect to server:\n\n\ncentrifuge\n.\nconnect\n();\n\n\n\n\n\n2 event handlers can be set to \ncentrifuge\n object: \nconnect\n and \ndisconnect\n\n\ncentrifuge\n.\non\n(\n'connect'\n,\n \nfunction\n(\ncontext\n)\n \n{\n\n    \nconsole\n.\nlog\n(\ncontext\n);\n\n\n});\n\n\n\ncentrifuge\n.\non\n(\n'disconnect'\n,\n \nfunction\n(\ncontext\n)\n \n{\n\n    \nconsole\n.\nlog\n(\ncontext\n);\n\n\n});\n\n\n\n\n\nClient created in \ndisconnected\n state with \nreconnect\n attribute set to \ntrue\n and \nreconnecting\n flag set to \nfalse\n . After \nconnect()\n called state goes to \nconnecting\n. It's only possible to connect from \ndisconnected\n state. Every time \nconnect()\n called \nreconnect\n flag of client must be set to \ntrue\n. After each failed connect attempt state must be set to \ndisconnected\n, \ndisconnect\n event must be emitted (only if \nreconnecting\n flag is \nfalse\n), and then \nreconnecting\n flag must be set to \ntrue\n (if client should continue reconnecting) to not emit \ndisconnect\n event again after next in a row connect attempt failure. In case of failure next connection attempt must be scheduled automatically with backoff strategy. On successful connect \nreconnecting\n flag must be set to \nfalse\n, backoff retry must be resetted and \nconnect\n event must be emitted. When connection lost then the same set of actions as when connect failed must be performed.\n\n\nClient must allow to subscribe on channels:\n\n\nvar\n \nsubscription\n \n=\n \ncentrifuge\n.\nsubscribe\n(\n\"channel\"\n,\n \neventHandlers\n);\n\n\n\n\n\nSubscription object created and control immediately returned to caller - subscribing must be performed asynchronously. This is required because client can automatically reconnect later so event-based model better suites for subscriptions. \n\n\nSubscription should support several event handlers:\n\n\n\n\nhandler for publication received from channel\n\n\njoin message handler\n\n\nleave message handler\n\n\nerror handler\n\n\nsubscribe success event handler\n\n\nunsubscribe event handler\n\n\n\n\nEvery time client connects to server it must restore all subscriptions.\n\n\nEvery time client disconnects from server it must call unsubscribe handlers for all active subscriptions and then emit disconnect event.\n\n\nClient must periodically (once in 25 secs, configurable) send ping messages to server. If pong has not beed received in 5 secs (configurable) then client must disconnect from server and try to reconnect with backoff strategy.\n\n\nClient can automatically batch several requests into one frame to server and also must be able to handle several replies received from server in one frame.",
            "title": "Client protocol"
        },
        {
            "location": "/server/protocol/#client-protocol",
            "text": "This chapter describes internal client-server protocol in details to help developers build new client libraries and understand how existing client libraries work.  Note that you can always look at existing client implementations in case of any questions, for example  centrifuge-js  or  centrifuge-go .",
            "title": "Client protocol"
        },
        {
            "location": "/server/protocol/#client-implementation-checklist",
            "text": "First we will look at list of features client library should support. Depending on client implementation some features can be not implemented. If you an author of client library you can use this list as checklist.   Note  Field and method names presented in this checklist can have different names depending on programmer's taste and language style guide   So, client:   Should work both with Centrifugo and Centrifuge library based server. To work with Centrifugo client must have a method to set connection token. To work with Centrifuge lib client must provide a method to set custom headers (the only exception is browser clients where browser automatically sets headers with respect to domain rules)  Should allow to use JSON payload  Should allow to use binary payload (actually you can only implement Protobuf protocol as you can pass JSON over it)  Must handle cases when many different Replies received in one websocket frame. In case of JSON protocol newline-delimited JSON-streaming format is used to combine several Replies into one websocket frame. In case of Protobuf protocol varint length-prefixed format is used  Must survive server reload/restart and internet connection lost. In this case client must try to reconnect with exponentioal backoff strategy  Must have several callback methods:  onConnect ,  onDisconnect . Depending on implementation you can also use  onError  callback for critical errors that could not be gracefully handled.   Should also have  onMessage  callback to handle async messages from server.  Must have method to subscribe on channel and set several event handlers:  onPublish ,  onJoin ,  onLeave ,  onSubscribeSuccess ,  onSubscribeError ,  onUnsubscribe . After subscribe method called it should return  Subscription  object to caller. This subscription object in turn should have some methods:  publish ,  unsubscribe ,  subscribe ,  history ,  presence ,  presence_stats .  Should have  publish  method to publish into channel without subscribing to it.  Should have  rpc  method to send RPC request to server.  Should have  send  method to send asynchronous message to server (without waiting response).  Should handle disconnect reason. In case of Websocket it is sent by server in CLOSE Websocket frame. This is a string containing JSON object with fields:  reason  (string) and  reconnect  (bool). Client should give users access to these fields in disconnect event and automatically follow  reconnect  advice  Must send periodic  ping  commands to server and thus detect broken connection. If no ping reply received from server in configured window reconnect workflow must be initiated  Should fully reconnect if subscription request timed out. Timeout can be configured by client library users.  Should send commands to server with timeout and handle timeout error - depending on method called timeout error handling can differ a bit. For example as said above timeout on subscription request results in full client reconnect workflow.  Should support connection token refresh mechanism  Should support private channel subscriptions and private subscription token refresh mechanism  Should automatically recover messages after reconnect and set appropriate fields in subscribe event context. Two important fields in  onSubscribeSuccess  event context are  recovered  and  isResubscribe . First field let user know what server thinks about subscription state - were all messages recovered or not. The second field must only be true if resubscribe was caused by temporary network connection lost. If user initiated resubscribe himself (calling  unsubscribe  method and then  subscribe  method) then recover workflow should not be used and  isResubscribe  must be  false .   Below in this document we will describe protocol concepts in detail.  This document describes protocol specifics for Websocket transport which supports binary and text formats to transfer data. As Centrifuge has various types of messages it serializes protocol messages using JSON or Protobuf (in case of binary websockets).   Note  SockJS works almost the same way as JSON websocket described here but has its own extra framing on top of Centrifuge protocol messages. SockJS can only work with JSON - it's not possible to transfer binary data over it. SockJS is only needed as fallback to Websocket in web browsers.",
            "title": "Client implementation checklist"
        },
        {
            "location": "/server/protocol/#top-level-framing",
            "text": "Centrifuge protocol defined in  Protobuf schema . That schema is a source of truth and all protocol description below describes messages from that schema.  Client sends  Command  to server.  Server sends  Reply  to client.  One request from client to server and one response from server to client can have more than one  Command  or  Reply .  When JSON format is used then many  Command  can be sent from client to server in JSON streaming line-delimited format. I.e. each individual  Command  encoded to JSON and then commands joined together using new line symbol  \\n :  { \"id\" :   1 ,   \"method\" :   \"subscribe\" ,   \"params\" :   { \"channel\" :   \"ch1\" }}  { \"id\" :   2 ,   \"method\" :   \"subscribe\" ,   \"params\" :   { \"channel\" :   \"ch2\" }}   For example here is how we do this in Javascript client when JSON format used:  function   encodeCommands ( commands )   { \n     const   encodedCommands   =   []; \n     for   ( const   i   in   commands )   { \n       if   ( commands . hasOwnProperty ( i ))   { \n         encodedCommands . push ( JSON . stringify ( commands [ i ])); \n       } \n     } \n     return   encodedCommands . join ( '\\n' );  }    Note  This doc will use JSON format for examples because it's human-readable. Everything said here for JSON is also true for Protobuf encoded case. The only difference is how several individual  Command  or server  Reply  joined into one request \u2013 see below.    Note  Method is made as ENUM in protobuf schema and can be sent as integer value but it's possible to send it as string in JSON case \u2013 this was made to make JSON protocol human-friendly.   When Protobuf format is used then many  Command  can be sent from client to server in length-delimited format where each individual  Command  marshaled to bytes prepended by  varint  length. See existing client implementations for encoding example.  The same rules relate to many  Reply  in one response from server to client. Line-delimited JSON and varint-length prefixed Protobuf.  For example here is how we read server response and extracting individual replies in Javascript client when JSON format used:  function   decodeReplies ( data )   { \n     const   replies   =   []; \n     const   encodedReplies   =   data . split ( '\\n' ); \n     for   ( const   i   in   encodedReplies )   { \n       if   ( encodedReplies . hasOwnProperty ( i ))   { \n         if   ( ! encodedReplies [ i ])   { \n           continue ; \n         } \n         const   reply   =   JSON . parse ( encodedReplies [ i ]); \n         replies . push ( reply ); \n       } \n     } \n     return   replies ;  }   For Protobuf case see existing client implementations for decoding example.  As you can see each  Command  has  id  field. This is an incremental integer field. This field will be echoed in server to client replies to commands so client could match a certain  Reply  to  Command  sent before. This is important because Websocket is asynchronous protocol where server and client both send messages at any moment and there is no builtin request-response pattern. Having  id  allows to match reply to command send before.  So you can expect something like this in response after sending commands to server:  { \"id\" :   1 ,   \"result\" :   {}}  { \"id\" :   2 ,   \"result\" :   {}}   Besides  id   Reply  from server to client have two important fields:  result  and  error .  result  contains useful payload object which can be different depending on  Reply .  error  contains error object in case of  Command  processing resulted in some error on server.  error  is optional and if  Reply  does not have  error  then it means that  Command  processed successfuly and client can parse  result  object in an appropriate way.  error  objects looks like this:  { \n     \"code\" :   100 , \n     \"message\" :   \"internal server error\"  }   We will talk more about error handling below.  The special type of  Reply  is asynchronous  Reply . Those replies have no  id  field set (or  id  can be equal to zero). Async replies can come to client in any moment - not as reaction to issued  Command  but as message from server to client in arbitrary time. For example this can be message published into channel.  Centrifuge library defines several command types client can issue. And well-written client must be aware of all those commands and client workflow. Communication with Centrifuge/Centrifugo server starts with  connect  command.",
            "title": "Top level framing"
        },
        {
            "location": "/server/protocol/#connect",
            "text": "First of all client must dial with server and then send  connect   Command  to it.  Default Websocket endpoint in Centrifugo is:  ws://centrifugo.example.com/connection/websocket  In case of using TLS:  wss://centrifugo.example.com/connection/websocket  After successful dial to websocket endpoint client must send  connect  command to server to authorize itself.  connect  command looks like:  { \n     \"id\" :   1 , \n     \"method\" :   \"connect\" , \n     \"params\" :   { \n         \"token\" :   \"JWT\" , \n         \"data\" :   {} \n     }  }   Where params fields are passed to client from application backend:   string  token  - connection token.  JSON  data  - this is only available for Centrifuge library and not for Centrifugo server. It contains custom connect data, for example it can contain client settings.    In response to  connect  command server sends connect reply. It looks this way:  { \n     \"id\" : 1 , \n     \"result\" : { \n         \"client\" : \"421bf374-dd01-4f82-9def-8c31697e956f\" , \n         \"version\" : \"2.0.0\" \n     }  }   result  has some fields:   string  client  - unique client connection ID server issued to this connection  string  version  - server version  optional bool  expires  - whether or not server will expire connection  optional int32  ttl  - time in seconds until connection will expire",
            "title": "Connect"
        },
        {
            "location": "/server/protocol/#subscribe",
            "text": "As soon as client successfully connected and got unique connection ID it is ready to\nsubscribe on channels. To do this it must send  subscribe  command to server:  { \n     \"id\" :   2 , \n     \"method\" :   \"subscribe\" , \n     \"params\" :   { \n         \"channel\" :   \"ch1\" \n     }  }   Fields that can be set in  params  are:   string  channel  - channel to subscribe   In response to subscribe client receives reply like:  { \n     \"id\" : 2 , \n     \"result\" : {}  }   result  can have the following fields that relate to subscription expiration:   optional bool  expires  - indicates whether subscription expires or not.  optional uint32  ttl  - number of seconds until subscription expire.   And several fields that relate to message recovery:   optional bool  recoverable  - means that messages can be recovered in this subscription.  optional uint32  seq  - current publication sequence inside channel  optional uint32  gen  - current publication generation inside channel  optional string  epoch  - current epoch inside channel  optional array  publications  - this is an array of missed publications in channel. When received client must call general publication event handler for each message in this array.  optional bool  recovered  - this flag is set to  true  when server thinks that all missed publications were successfully recovered and send in subscribe reply (in  publications  array) and  false  otherwise.   See more about meaning of recovery related fields in  special doc chapter .  After client received successful reply on  subscribe  command it will receive asynchronous reply messages published to this channel. Messages can be of several types:   Publication  message  Join  message  Leave  message  Unsub  message   See more about asynchronous messages below.",
            "title": "Subscribe"
        },
        {
            "location": "/server/protocol/#unsubscribe",
            "text": "This is simple. When client wants to unsubscribe from channel and therefore stop receiving asynchronous subscription messages from connection related to channel it must call  unsubscribe  command:  { \n     \"id\" :   3 , \n     \"method\" :   \"unsubscribe\" , \n     \"params\" :   { \n         \"channel\" :   \"ch1\" \n     }  }   Actually server response does not mean a lot for client - it must immediately remove channel subscription from internal implementation data structures and ignore all messages related to channel.",
            "title": "Unsubscribe"
        },
        {
            "location": "/server/protocol/#refresh",
            "text": "It's possible to turn on client connection expiration mechanism on server. While enabled server will keep track of connections whose time of life (defined by  exp  timestamp) is close to the end. In this case connection will be closed. Client can prevent closing connection refreshing it's connection credentials. To do this it must send  refresh  command to server.  refresh  command similar to  connect :  { \n     \"id\" :   4 , \n     \"method\" :   \"refresh\" , \n     \"params\" :   { \n         \"token\" :   \"JWT\" \n     }  }   Just with actual  exp  and new  sign .  The tip whether or not connection must be refreshed comes in reply to  connect  command shown above - fields  expires  and  ttl .  When client connection expire mechanism is on the value of field  expires  in connect reply is  true . In this case client implementation should look at  ttl  value which is seconds left until connection will be considered expired. Client must send  refresh  command after this  ttl  seconds. Server gives client a configured window to refresh token after  ttl  passed and then closes connection if client have not updated its token.  When connecting with already expired token an error will be returned (with code  109 ). In this case client should refresh its token and reconnect with exponential backoff.",
            "title": "Refresh"
        },
        {
            "location": "/server/protocol/#rpc-like-calls-publish-history-presence",
            "text": "The mechanics of these calls is simple - client sends command and expects response from server.  publish  command allows to publish message into channel from client.   Note  To publish from client  publish  option in server configuration must be set to  true   history  allows to ask server for channel history if enabled.  presence  allows to ask server for channel presence information if enabled.",
            "title": "RPC-like calls: publish, history, presence"
        },
        {
            "location": "/server/protocol/#asynchronous-server-to-client-messages",
            "text": "There are several types of asynchronous messages that can come from server to client. All of them relate to current client subscriptions.  The most important message is  Publication :  { \n     \"result\" : { \n         \"channel\" : \"ch1\" , \n         \"data\" : { \n             \"data\" : { \"input\" : \"1\" }, \n             \"info\" : { \n                 \"user\" : \"2694\" , \n                 \"client\" : \"5c48510e-cf49-4fa8-a9b2-490b22231e74\" , \n                 \"conn_info\" : { \"name\" : \"Alexander\" }, \n                 \"chan_info\" : {} \n             } \n         } \n     }  }   Publication  is a message published into channel. Note that there is no  id  field in this message - this symptom\nallows to distinguish it from  Reply  to  Command .    Next message is  Join  message:  { \n     \"result\" : { \n         \"type\" : 1 , \n         \"channel\" : \"ch1\" , \n         \"data\" : { \n             \"info\" : { \n                 \"user\" : \"2694\" , \n                 \"client\" : \"5c48510e-cf49-4fa8-a9b2-490b22231e74\" , \n                 \"conn_info\" : { \"name\" : \"Alexander\" }, \n                 \"chan_info\" : {} \n             } \n         } \n     }  }   Join  messages sent when someone joined (subscribed on) channel.   Note  To enable  Join  and  Leave  messages  join_leave  option must be enabled on server globally or for channel namespace.   Leave  messages sent when someone left (unsubscribed from) channel.  { \n     \"result\" : { \n         \"type\" : 2 , \n         \"channel\" : \"ch1\" , \n         \"data\" : { \n             \"info\" : { \n                 \"user\" : \"2694\" , \n                 \"client\" : \"5c48510e-cf49-4fa8-a9b2-490b22231e74\" , \n                 \"conn_info\" : { \"name\" : \"Alexander\" }, \n                 \"chan_info\" : {} \n             } \n         } \n     }  }   And finally  Unsub  message that means that server unsubscribed current client from channel:  { \n     \"result\" : { \n         \"type\" : 3 , \n         \"channel\" : \"ch1\" , \n         \"data\" : {} \n     }  }   It's possible to distinguish between different types of asynchronous messages looking at  type  field (for  Publication  this field not set or  0 ).",
            "title": "Asynchronous server-to-client messages"
        },
        {
            "location": "/server/protocol/#ping-pong",
            "text": "To maintain connection alive and detect broken connections client must periodically send  ping  commands to server and expect replies to it. Ping command looks like:  { \n     \"id\" : 32 , \n     \"method\" : \"ping\"  }   Server just echoes this command back. When client does not receive ping reply for some time it must consider connection broken and try to reconnect. Recommended ping interval is 25 seconds, recommended period to wait for pong is 1-5 seconds. Though those numbers can vary.",
            "title": "Ping Pong"
        },
        {
            "location": "/server/protocol/#handle-disconnects",
            "text": "Client should handle disconnect advices from server. In websocket case disconnect advice is sent in reason field of CLOSE Websocket frame. Reason contains string which is  disconnect  object encoded into JSON (even in case of Protobuf scenario). That objects looks like:  { \n     \"reason\" :   \"shutdown\" , \n     \"reconnect\" :   true   }   It contains string reason of connection closing and advice to reconnect or not. Client should take this reconnect advice into account.  In case of network problems and random disconnect from server without well known reason client should always try to  reconnect with exponential intervals.",
            "title": "Handle disconnects"
        },
        {
            "location": "/server/protocol/#handle-errors",
            "text": "This section contains advices to error handling in client implementations.  Errors can happen during various operations and can be handled in special way in context of some commands to tolerate network and server problems.  Errors during  connect  must result in full client reconnect with exponential backoff strategy. The special case is error with code  110  which signals that connection token already expired. As we said above client should update its connection JWT before connecting to server again.    Errors during  subscribe  must result in full client reconnect in case of internal error (code  100 ). And be sent to subscribe error event handler of subscription if received error is persistent. Persistent errors are errors like  permission denied ,  bad request ,  namespace not found  etc. Persistent errors in most situation mean a mistake from developers side.  The special corner case is client-side timeout during  subscribe  operation. As protocol is asynchronous it's possible in this case that server will eventually subscribe client on channel but client will think that it's not subscribed. It's possible to retry subscription request and tolerate  already subscribed  (code  105 ) error as expected. But the simplest solution is to reconnect entirely as this is simpler and gives client a chance to connect to working server instance.  Errors during rpc-like operations can be just returned to caller - i.e. user javascript code. Calls like  history  and  presence  are idempotent. You should be accurate with unidempotent operations like  publish  - in case of client timeout it's possible to send the same message into channel twice if retry publish after timeout - so users of libraries must care about this case \u2013 making sure they have some protection from displaying message twice on client side (maybe some sort of unique key in payload).",
            "title": "Handle errors"
        },
        {
            "location": "/server/protocol/#client-implementation-advices",
            "text": "Here are some advices about client public API. Examples here are in Javascript language. This is just an attempt to help in developing a client - but rules here is not obligatorily the best way to implement client.  Create client instance:  var   centrifuge   =   new   Centrifuge ( \"ws://localhost:8000/connection/websocket\" ,   {});   Set connection token (in case of using Centrifugo):  centrifuge . setToken ( \"XXX\" )   Connect to server:  centrifuge . connect ();   2 event handlers can be set to  centrifuge  object:  connect  and  disconnect  centrifuge . on ( 'connect' ,   function ( context )   { \n     console . log ( context );  });  centrifuge . on ( 'disconnect' ,   function ( context )   { \n     console . log ( context );  });   Client created in  disconnected  state with  reconnect  attribute set to  true  and  reconnecting  flag set to  false  . After  connect()  called state goes to  connecting . It's only possible to connect from  disconnected  state. Every time  connect()  called  reconnect  flag of client must be set to  true . After each failed connect attempt state must be set to  disconnected ,  disconnect  event must be emitted (only if  reconnecting  flag is  false ), and then  reconnecting  flag must be set to  true  (if client should continue reconnecting) to not emit  disconnect  event again after next in a row connect attempt failure. In case of failure next connection attempt must be scheduled automatically with backoff strategy. On successful connect  reconnecting  flag must be set to  false , backoff retry must be resetted and  connect  event must be emitted. When connection lost then the same set of actions as when connect failed must be performed.  Client must allow to subscribe on channels:  var   subscription   =   centrifuge . subscribe ( \"channel\" ,   eventHandlers );   Subscription object created and control immediately returned to caller - subscribing must be performed asynchronously. This is required because client can automatically reconnect later so event-based model better suites for subscriptions.   Subscription should support several event handlers:   handler for publication received from channel  join message handler  leave message handler  error handler  subscribe success event handler  unsubscribe event handler   Every time client connects to server it must restore all subscriptions.  Every time client disconnects from server it must call unsubscribe handlers for all active subscriptions and then emit disconnect event.  Client must periodically (once in 25 secs, configurable) send ping messages to server. If pong has not beed received in 5 secs (configurable) then client must disconnect from server and try to reconnect with backoff strategy.  Client can automatically batch several requests into one frame to server and also must be able to handle several replies received from server in one frame.",
            "title": "Client implementation advices"
        },
        {
            "location": "/transports/",
            "text": "This section describes client transports that Centrifugo supports and some specific topics and configuration regarding to each of those transports.\n\n\nAt moment Centrifugo supports 2 transports:\n\n\n\n\nWebsocket\n\n\nSockJS\n\n\n\n\nHaving both of these transport means that it's possible to connect to Centrifugo from everywhere.",
            "title": "Overview"
        },
        {
            "location": "/transports/websocket/",
            "text": "Websocket\n\u00b6\n\n\nWebsocket\n is the main transport in Centrifugo. It's a very efficient low-overhead protocol on top of TCP.\n\n\nThe biggest advantage is that Websocket works out of the box in all modern browsers and almost all programming languages have Websocket implementations. This makes Websocket a pretty universal transport that can even be used to connect to Centrifugo from web apps and mobile apps and other environments.\n\n\nWebsocket connection endpoint in Centrifugo is \n/connection/websocket\n. If you want to use Protobuf binary protocol then you need to connect to \n/connection/websocket?format=protobuf\n\n\nWebsocket compression\n\u00b6\n\n\nAn experimental feature for raw websocket endpoint - \npermessage-deflate\n compression for  websocket messages. Btw look at \ngreat article\n about websocket compression.\n\n\nWe consider this experimental because this websocket compression is experimental in \nGorilla Websocket\n library that Centrifugo uses internally.\n\n\nWebsocket compression can reduce amount of traffic travelling over the wire. But keep in mind that \nenabling websocket compression will result in much slower Centrifugo performance and more memory usage\n \u2013 depending on your message rate this can be very noticeable.\n\n\nTo enable websocket compression for raw websocket endpoint set \nwebsocket_compression\n:\n \ntrue\n in configuration file. After this clients that support permessage-deflate will negotiate compression with server automatically. Note that enabling compression does not mean that every connection will use it - this depends on client support for this feature.\n\n\nAnother option is \nwebsocket_compression_min_size\n. Default 0. This is a minimal size of message in bytes for which we use \ndeflate\n compression when writing it to client's connection. Default value \n0\n means that we will compress all messages when \nwebsocket_compression\n enabled and compression support negotiated with client.\n\n\nIt's also possible to control websocket compression level defined at \ncompress/flate\n By default when compression with client negotiated Centrifugo uses compression level 1 (BestSpeed). If you want to set custom compression level use \nwebsocket_compression_level\n configuration option.",
            "title": "Websocket"
        },
        {
            "location": "/transports/websocket/#websocket",
            "text": "Websocket  is the main transport in Centrifugo. It's a very efficient low-overhead protocol on top of TCP.  The biggest advantage is that Websocket works out of the box in all modern browsers and almost all programming languages have Websocket implementations. This makes Websocket a pretty universal transport that can even be used to connect to Centrifugo from web apps and mobile apps and other environments.  Websocket connection endpoint in Centrifugo is  /connection/websocket . If you want to use Protobuf binary protocol then you need to connect to  /connection/websocket?format=protobuf",
            "title": "Websocket"
        },
        {
            "location": "/transports/websocket/#websocket-compression",
            "text": "An experimental feature for raw websocket endpoint -  permessage-deflate  compression for  websocket messages. Btw look at  great article  about websocket compression.  We consider this experimental because this websocket compression is experimental in  Gorilla Websocket  library that Centrifugo uses internally.  Websocket compression can reduce amount of traffic travelling over the wire. But keep in mind that  enabling websocket compression will result in much slower Centrifugo performance and more memory usage  \u2013 depending on your message rate this can be very noticeable.  To enable websocket compression for raw websocket endpoint set  websocket_compression :   true  in configuration file. After this clients that support permessage-deflate will negotiate compression with server automatically. Note that enabling compression does not mean that every connection will use it - this depends on client support for this feature.  Another option is  websocket_compression_min_size . Default 0. This is a minimal size of message in bytes for which we use  deflate  compression when writing it to client's connection. Default value  0  means that we will compress all messages when  websocket_compression  enabled and compression support negotiated with client.  It's also possible to control websocket compression level defined at  compress/flate  By default when compression with client negotiated Centrifugo uses compression level 1 (BestSpeed). If you want to set custom compression level use  websocket_compression_level  configuration option.",
            "title": "Websocket compression"
        },
        {
            "location": "/transports/sockjs/",
            "text": "SockJS\n\u00b6\n\n\nSockJS is a polyfill browser library which provides HTTP-based fallback transports in case when it's not possible to establish Websocket connection. This can happen in old client browsers or because of some proxy behind client and server that cuts of Websocket traffic. You can find more information on \nSockJS project Github page\n.\n\n\nIf you have a requirement to work everywhere SockJS is the solution. SockJS will automatically choose best fallback transport if Websocket connection failed for some reason. Some of the fallback transports are:\n\n\n\n\nEventsource (SSE)\n\n\nXHR-streaming\n\n\nLong-polling\n\n\nAnd more (see SockJS docs)\n\n\n\n\nOne caveat when using SockJS is that \nyou need to use sticky sessions mechanism if you have many Centrifugo nodes running\n. This mechanism is usually supported by load balancers (for example Nginx). Sticky sessions mean that all requests from the same client will come to the same Centrifugo node. This is necessary because SockJS maintains connection session in process memory thus allowing bidirectional communication between client and server. Sticky mechanism is not required if you only use one Centrifugo node on backend. See how enable sticky sessions in Nginx in deploy section of this doc.\n\n\nSockJS connection endpoint in Centrifugo is \n/connection/sockjs\n. SockJS does not support binary so you only limited in using JSON with it.",
            "title": "SockJS"
        },
        {
            "location": "/transports/sockjs/#sockjs",
            "text": "SockJS is a polyfill browser library which provides HTTP-based fallback transports in case when it's not possible to establish Websocket connection. This can happen in old client browsers or because of some proxy behind client and server that cuts of Websocket traffic. You can find more information on  SockJS project Github page .  If you have a requirement to work everywhere SockJS is the solution. SockJS will automatically choose best fallback transport if Websocket connection failed for some reason. Some of the fallback transports are:   Eventsource (SSE)  XHR-streaming  Long-polling  And more (see SockJS docs)   One caveat when using SockJS is that  you need to use sticky sessions mechanism if you have many Centrifugo nodes running . This mechanism is usually supported by load balancers (for example Nginx). Sticky sessions mean that all requests from the same client will come to the same Centrifugo node. This is necessary because SockJS maintains connection session in process memory thus allowing bidirectional communication between client and server. Sticky mechanism is not required if you only use one Centrifugo node on backend. See how enable sticky sessions in Nginx in deploy section of this doc.  SockJS connection endpoint in Centrifugo is  /connection/sockjs . SockJS does not support binary so you only limited in using JSON with it.",
            "title": "SockJS"
        },
        {
            "location": "/libraries/client/",
            "text": "Client libraries\n\u00b6\n\n\nThese libraries allow your users to connect to Centrifugo from application frontend.\n\n\n\n\ncentrifuge-js\n \u2013 for browser, NodeJS and React Native.\n\n\ncentrifuge-go\n - for Go language.\n\n\ncentrifuge-mobile\n - for iOS and Android using \ncentrifuge-go\n as basis and \ngomobile\n project to create bindings.\n\n\ncentrifuge-dart\n - for Dart and Flutter.\n\n\n\n\nThere are no native mobile clients at moment but hopefully this will change soon with open-source community help.",
            "title": "Client libraries"
        },
        {
            "location": "/libraries/client/#client-libraries",
            "text": "These libraries allow your users to connect to Centrifugo from application frontend.   centrifuge-js  \u2013 for browser, NodeJS and React Native.  centrifuge-go  - for Go language.  centrifuge-mobile  - for iOS and Android using  centrifuge-go  as basis and  gomobile  project to create bindings.  centrifuge-dart  - for Dart and Flutter.   There are no native mobile clients at moment but hopefully this will change soon with open-source community help.",
            "title": "Client libraries"
        },
        {
            "location": "/libraries/api/",
            "text": "HTTP API clients\n\u00b6\n\n\nIf you look at server API docs you will find that sending API request to Centrifugo is a very simple task to do in any programming language - this is just a POST request with JSON payload in body and \nAuthorization\n header. See more in \nspecial chapter\n in server section.\n\n\nWe have several client libraries for different languages so you don't have to construct proper HTTP requests manually:\n\n\n\n\ncent\n for Python\n\n\nrubycent\n for Ruby (\nnot available for Centrifugo v2 yet\n)\n\n\nphpcent\n for PHP (\nnot available for Centrifugo v2 yet\n)\n\n\njscent\n for NodeJS (\nnot available for Centrifugo v2 yet\n)\n\n\ngocent\n for Go",
            "title": "API libraries"
        },
        {
            "location": "/libraries/api/#http-api-clients",
            "text": "If you look at server API docs you will find that sending API request to Centrifugo is a very simple task to do in any programming language - this is just a POST request with JSON payload in body and  Authorization  header. See more in  special chapter  in server section.  We have several client libraries for different languages so you don't have to construct proper HTTP requests manually:   cent  for Python  rubycent  for Ruby ( not available for Centrifugo v2 yet )  phpcent  for PHP ( not available for Centrifugo v2 yet )  jscent  for NodeJS ( not available for Centrifugo v2 yet )  gocent  for Go",
            "title": "HTTP API clients"
        },
        {
            "location": "/deploy/packages/",
            "text": "RPM and DEB packages\n\u00b6\n\n\nEvery time we make new Centrifugo release we upload rpm and deb packages for\npopular linux distributions on \npackagecloud.io\n.\n\n\nCurrently we support versions of the following distributions:\n\n\n\n\n64-bit Debian 8 Jessie\n\n\n64-bit Debian 9 Stretch\n\n\n64-bit Ubuntu 16.04 Xenial\n\n\n64-bit Ubuntu 18.04 Bionic\n\n\n64-bit Centos 7\n\n\n\n\nSee \nfull list of available packages\n and\n\ninstallation instructions\n.\n\n\nAlso note that if your Linux distro is not in list you can ask us to package\nfor it or just download appropriate package from packagecloud that fits your\ndistribution.\n\n\nCentrifugo also works on 32-bit architectures, but we don't support packaging for it\nas 64-bit is more convenient for servers today.",
            "title": "RPM and DEB packages"
        },
        {
            "location": "/deploy/packages/#rpm-and-deb-packages",
            "text": "Every time we make new Centrifugo release we upload rpm and deb packages for\npopular linux distributions on  packagecloud.io .  Currently we support versions of the following distributions:   64-bit Debian 8 Jessie  64-bit Debian 9 Stretch  64-bit Ubuntu 16.04 Xenial  64-bit Ubuntu 18.04 Bionic  64-bit Centos 7   See  full list of available packages  and installation instructions .  Also note that if your Linux distro is not in list you can ask us to package\nfor it or just download appropriate package from packagecloud that fits your\ndistribution.  Centrifugo also works on 32-bit architectures, but we don't support packaging for it\nas 64-bit is more convenient for servers today.",
            "title": "RPM and DEB packages"
        },
        {
            "location": "/deploy/docker/",
            "text": "Docker image\n\u00b6\n\n\nCentrifugo server has docker image \navailable on Docker Hub\n.\n\n\ndocker pull centrifugo/centrifugo\n\n\n\n\nRun:\n\n\ndocker run --ulimit \nnofile\n=\n65536\n:65536 -v /host/dir/with/config/file:/centrifugo -p \n8000\n:8000 centrifugo/centrifugo centrifugo -c config.json\n\n\n\n\nNote that docker allows to set \nnofile\n limits in command-line arguments which is pretty important to handle lots of simultaneous persistent connections and not run out of open file limit.",
            "title": "Docker image"
        },
        {
            "location": "/deploy/docker/#docker-image",
            "text": "Centrifugo server has docker image  available on Docker Hub .  docker pull centrifugo/centrifugo  Run:  docker run --ulimit  nofile = 65536 :65536 -v /host/dir/with/config/file:/centrifugo -p  8000 :8000 centrifugo/centrifugo centrifugo -c config.json  Note that docker allows to set  nofile  limits in command-line arguments which is pretty important to handle lots of simultaneous persistent connections and not run out of open file limit.",
            "title": "Docker image"
        },
        {
            "location": "/deploy/nginx/",
            "text": "Nginx configuration\n\u00b6\n\n\nAlthough it's possible to  use Centrifugo without any reverse proxy before it,\nit's still a good idea to keep Centrifugo behind mature reverse proxy to deal with\nedge cases when handling HTTP/Websocket connections from the wild. Also you probably\nwant some sort of load balancing eventually between Centrifugo nodes so that proxy\ncan be such a balancer too.\n\n\nIn this section we will look at \nNginx\n configuration to deploy Centrifugo.\n\n\nMinimal Nginx version \u2013 \n1.3.13\n because it was the first version that can proxy\nWebsocket connections.\n\n\nThere are 2 ways: running Centrifugo server as separate service on its own\ndomain or embed it to a location of your web site (for example to \n/centrifugo\n).\n\n\nSeparate domain for Centrifugo\n\u00b6\n\n\nupstream\n \ncentrifugo\n \n{\n\n    \n#\n \nEnumerate\n \nall\n \nupstream\n \nservers\n \nhere\n\n    \n#sticky\n;\n\n    \nip_hash\n;\n\n    \nserver\n \n127.0.0.1:8000\n;\n\n    \n#server\n \n127.0.0.1:8001\n;\n\n\n}\n\n\n\nmap\n \n$\nhttp_upgrade\n \n$\nconnection_upgrade\n \n{\n\n    \ndefault\n \nupgrade\n;\n\n    \n''\n      \nclose\n;\n\n\n}\n\n\n\n#\nserver\n \n{\n\n\n#\n   \nlisten\n \n80\n;\n\n\n#\n   \nserver_name\n \ncentrifugo.example.com\n;\n\n\n#\n   \nrewrite\n \n^(.*)\n \nhttps\n:\n//\n$\nserver_name\n$\n1\n \npermanent\n;\n\n\n#\n}\n\n\n\nserver\n \n{\n\n\n    \nserver_name\n \ncentrifugo.example.com\n;\n\n\n    \nlisten\n \n80\n;\n\n\n    \n#listen\n \n443\n;\n\n    \n#ssl\n \non\n;\n\n    \n#ssl_protocols\n \nTLSv1\n \nTLSv1.1\n \nTLSv1.2\n;\n\n    \n#ssl_ciphers\n \nAES128-SHA\n:\nAES256-SHA\n:\nRC4-SHA\n:\nDES-CBC3-SHA\n:\nRC4-MD5\n;\n\n    \n#ssl_certificate\n \n/etc/nginx/ssl/wildcard.example.com.crt\n;\n\n    \n#ssl_certificate_key\n \n/etc/nginx/ssl/wildcard.example.com.key\n;\n\n    \n#ssl_session_cache\n \nshared\n:\nSSL\n:\n10\nm\n;\nssl_session_timeout\n \n10m\n;\n\n\n    \ninclude\n \n/etc/nginx/mime.types\n;\n\n    \ndefault_type\n \napplication/octet-stream\n;\n\n\n    \nsendfile\n \non\n;\n\n    \ntcp_nopush\n \non\n;\n\n    \ntcp_nodelay\n \non\n;\n\n    \ngzip\n \non\n;\n\n    \ngzip_min_length\n \n1000\n;\n\n    \ngzip_proxied\n \nany\n;\n\n\n    \n#\n \nOnly\n \nretry\n \nif\n \nthere\n \nwas\n \na\n \ncommunication\n \nerror,\n \nnot\n \na\n \ntimeout\n\n    \n#\n \non\n \nthe\n \nTornado\n \nserver\n \n(to\n \navoid\n \npropagating\n \n\"queries\n \nof\n \ndeath\"\n\n    \n#\n \nto\n \nall\n \nfrontends)\n\n    \nproxy_next_upstream\n \nerror\n;\n\n\n    \nproxy_set_header\n \nX-Real-IP\n \n$remote_addr\n;\n\n    \nproxy_set_header\n \nX-Scheme\n \n$scheme\n;\n\n    \nproxy_set_header\n \nHost\n \n$http_host\n;\n\n\n    \nlocation\n \n/connection\n \n{\n\n        \nproxy_pass\n \nhttp\n:\n//\ncentrifugo\n;\n\n        \nproxy_buffering\n \noff\n;\n\n        \nkeepalive_timeout\n \n65\n;\n\n        \nproxy_read_timeout\n \n60s\n;\n\n        \nproxy_http_version\n \n1.1\n;\n\n        \nproxy_set_header\n \nX-Real-IP\n \n$remote_addr\n;\n\n        \nproxy_set_header\n \nX-Scheme\n \n$scheme\n;\n\n        \nproxy_set_header\n \nHost\n \n$http_host\n;\n\n        \nproxy_set_header\n \nUpgrade\n \n$http_upgrade\n;\n\n        \nproxy_set_header\n \nConnection\n \n$connection_upgrade\n;\n\n    \n}\n\n\n    \nlocation\n \n/\n \n{\n\n        \nproxy_pass\n \nhttp\n:\n//\ncentrifugo\n;\n\n    \n}\n\n\n    \nerror_page\n   \n500\n \n502\n \n503\n \n504\n  \n/\n50x\n.\nhtml\n;\n\n\n    \nlocation\n \n=\n \n/\n50x\n.\nhtml\n \n{\n\n        \nroot\n   \n/usr/share/nginx/html\n;\n\n    \n}\n\n\n}\n\n\n\n\n\nEmbed to a location of web site\n\u00b6\n\n\nupstream\n \ncentrifugo\n \n{\n\n    \n#\n \nEnumerate\n \nall\n \nthe\n \nTornado\n \nservers\n \nhere\n\n    \n#sticky\n;\n\n    \nip_hash\n;\n\n    \nserver\n \n127.0.0.1:8000\n;\n\n    \n#server\n \n127.0.0.1:8001\n;\n\n\n}\n\n\n\nmap\n \n$\nhttp_upgrade\n \n$\nconnection_upgrade\n \n{\n\n    \ndefault\n \nupgrade\n;\n\n    \n''\n      \nclose\n;\n\n\n}\n\n\n\nserver\n \n{\n\n\n    \n#\n \n...\n \nyour\n \nweb\n \nsite\n \nNginx\n \nconfig\n\n\n    \nlocation\n \n/centrifugo/\n \n{\n\n        \nrewrite\n \n^/centrifugo/(.*)\n        \n/$1\n \nbreak\n;\n\n        \nproxy_pass_header\n \nServer\n;\n\n        \nproxy_set_header\n \nHost\n \n$http_host\n;\n\n        \nproxy_redirect\n \noff\n;\n\n        \nproxy_set_header\n \nX-Real-IP\n \n$remote_addr\n;\n\n        \nproxy_set_header\n \nX-Scheme\n \n$scheme\n;\n\n        \nproxy_pass\n \nhttp\n:\n//\ncentrifugo\n;\n\n    \n}\n\n\n    \nlocation\n \n/\ncentrifugo\n/\nconnection\n \n{\n\n        \nrewrite\n \n^/centrifugo(.*)\n        \n$1\n \nbreak\n;\n\n\n        \nproxy_next_upstream\n \nerror\n;\n\n        \ngzip\n \non\n;\n\n        \ngzip_min_length\n \n1000\n;\n\n        \ngzip_proxied\n \nany\n;\n\n        \nproxy_buffering\n \noff\n;\n\n        \nkeepalive_timeout\n \n65\n;\n\n        \nproxy_pass\n \nhttp\n:\n//\ncentrifugo\n;\n\n        \nproxy_read_timeout\n \n60s\n;\n\n        \nproxy_set_header\n \nX-Real-IP\n \n$remote_addr\n;\n\n        \nproxy_set_header\n \nX-Scheme\n \n$scheme\n;\n\n        \nproxy_set_header\n \nHost\n \n$http_host\n;\n\n        \nproxy_http_version\n \n1.1\n;\n\n        \nproxy_set_header\n \nUpgrade\n \n$http_upgrade\n;\n\n        \nproxy_set_header\n \nConnection\n \n$connection_upgrade\n;\n\n    \n}\n\n\n}\n\n\n\n\n\nsticky\n\u00b6\n\n\nYou may be noticed commented \nsticky;\n directive in nginx upstream configuration.\n\n\nWhen using SockJS and client connects to Centrifugo - SockJS session created - and\nto communicate client must send all next requests to the same upstream backend.\n\n\nIn this configuration we use \nip_hash;\n directive to proxy clients with the same ip\naddress to the same upstream backend.\n\n\nBut \nip_hash;\n is not the best choice in this case, because there could be situations\nwhere a lot of different browsers are coming with the same IP address (behind proxies)\nand the load balancing system won't be fair. Also fair load balancing does not work\nduring development - when all clients connecting from localhost.\n\n\nSo the best solution would be using something like \nnginx-sticky-module\n\nwhich uses setting a special cookie to track the upstream server for client.\n\n\nworker_connections\n\u00b6\n\n\nYou may also need to update \nworker_connections\n option of Nginx:\n\n\nevents {\n    worker_connections 40000;\n}\n\n\n\n\nUpstream keepalive\n\u00b6\n\n\nSee \nchapter about operating system tuning\n for more details.",
            "title": "Nginx configuration"
        },
        {
            "location": "/deploy/nginx/#nginx-configuration",
            "text": "Although it's possible to  use Centrifugo without any reverse proxy before it,\nit's still a good idea to keep Centrifugo behind mature reverse proxy to deal with\nedge cases when handling HTTP/Websocket connections from the wild. Also you probably\nwant some sort of load balancing eventually between Centrifugo nodes so that proxy\ncan be such a balancer too.  In this section we will look at  Nginx  configuration to deploy Centrifugo.  Minimal Nginx version \u2013  1.3.13  because it was the first version that can proxy\nWebsocket connections.  There are 2 ways: running Centrifugo server as separate service on its own\ndomain or embed it to a location of your web site (for example to  /centrifugo ).",
            "title": "Nginx configuration"
        },
        {
            "location": "/deploy/nginx/#separate-domain-for-centrifugo",
            "text": "upstream   centrifugo   { \n     #   Enumerate   all   upstream   servers   here \n     #sticky ; \n     ip_hash ; \n     server   127.0.0.1:8000 ; \n     #server   127.0.0.1:8001 ;  }  map   $ http_upgrade   $ connection_upgrade   { \n     default   upgrade ; \n     ''        close ;  }  # server   {  #     listen   80 ;  #     server_name   centrifugo.example.com ;  #     rewrite   ^(.*)   https : // $ server_name $ 1   permanent ;  # }  server   { \n\n     server_name   centrifugo.example.com ; \n\n     listen   80 ; \n\n     #listen   443 ; \n     #ssl   on ; \n     #ssl_protocols   TLSv1   TLSv1.1   TLSv1.2 ; \n     #ssl_ciphers   AES128-SHA : AES256-SHA : RC4-SHA : DES-CBC3-SHA : RC4-MD5 ; \n     #ssl_certificate   /etc/nginx/ssl/wildcard.example.com.crt ; \n     #ssl_certificate_key   /etc/nginx/ssl/wildcard.example.com.key ; \n     #ssl_session_cache   shared : SSL : 10 m ; ssl_session_timeout   10m ; \n\n     include   /etc/nginx/mime.types ; \n     default_type   application/octet-stream ; \n\n     sendfile   on ; \n     tcp_nopush   on ; \n     tcp_nodelay   on ; \n     gzip   on ; \n     gzip_min_length   1000 ; \n     gzip_proxied   any ; \n\n     #   Only   retry   if   there   was   a   communication   error,   not   a   timeout \n     #   on   the   Tornado   server   (to   avoid   propagating   \"queries   of   death\" \n     #   to   all   frontends) \n     proxy_next_upstream   error ; \n\n     proxy_set_header   X-Real-IP   $remote_addr ; \n     proxy_set_header   X-Scheme   $scheme ; \n     proxy_set_header   Host   $http_host ; \n\n     location   /connection   { \n         proxy_pass   http : // centrifugo ; \n         proxy_buffering   off ; \n         keepalive_timeout   65 ; \n         proxy_read_timeout   60s ; \n         proxy_http_version   1.1 ; \n         proxy_set_header   X-Real-IP   $remote_addr ; \n         proxy_set_header   X-Scheme   $scheme ; \n         proxy_set_header   Host   $http_host ; \n         proxy_set_header   Upgrade   $http_upgrade ; \n         proxy_set_header   Connection   $connection_upgrade ; \n     } \n\n     location   /   { \n         proxy_pass   http : // centrifugo ; \n     } \n\n     error_page     500   502   503   504    / 50x . html ; \n\n     location   =   / 50x . html   { \n         root     /usr/share/nginx/html ; \n     }  }",
            "title": "Separate domain for Centrifugo"
        },
        {
            "location": "/deploy/nginx/#embed-to-a-location-of-web-site",
            "text": "upstream   centrifugo   { \n     #   Enumerate   all   the   Tornado   servers   here \n     #sticky ; \n     ip_hash ; \n     server   127.0.0.1:8000 ; \n     #server   127.0.0.1:8001 ;  }  map   $ http_upgrade   $ connection_upgrade   { \n     default   upgrade ; \n     ''        close ;  }  server   { \n\n     #   ...   your   web   site   Nginx   config \n\n     location   /centrifugo/   { \n         rewrite   ^/centrifugo/(.*)          /$1   break ; \n         proxy_pass_header   Server ; \n         proxy_set_header   Host   $http_host ; \n         proxy_redirect   off ; \n         proxy_set_header   X-Real-IP   $remote_addr ; \n         proxy_set_header   X-Scheme   $scheme ; \n         proxy_pass   http : // centrifugo ; \n     } \n\n     location   / centrifugo / connection   { \n         rewrite   ^/centrifugo(.*)          $1   break ; \n\n         proxy_next_upstream   error ; \n         gzip   on ; \n         gzip_min_length   1000 ; \n         gzip_proxied   any ; \n         proxy_buffering   off ; \n         keepalive_timeout   65 ; \n         proxy_pass   http : // centrifugo ; \n         proxy_read_timeout   60s ; \n         proxy_set_header   X-Real-IP   $remote_addr ; \n         proxy_set_header   X-Scheme   $scheme ; \n         proxy_set_header   Host   $http_host ; \n         proxy_http_version   1.1 ; \n         proxy_set_header   Upgrade   $http_upgrade ; \n         proxy_set_header   Connection   $connection_upgrade ; \n     }  }",
            "title": "Embed to a location of web site"
        },
        {
            "location": "/deploy/nginx/#sticky",
            "text": "You may be noticed commented  sticky;  directive in nginx upstream configuration.  When using SockJS and client connects to Centrifugo - SockJS session created - and\nto communicate client must send all next requests to the same upstream backend.  In this configuration we use  ip_hash;  directive to proxy clients with the same ip\naddress to the same upstream backend.  But  ip_hash;  is not the best choice in this case, because there could be situations\nwhere a lot of different browsers are coming with the same IP address (behind proxies)\nand the load balancing system won't be fair. Also fair load balancing does not work\nduring development - when all clients connecting from localhost.  So the best solution would be using something like  nginx-sticky-module \nwhich uses setting a special cookie to track the upstream server for client.",
            "title": "sticky"
        },
        {
            "location": "/deploy/nginx/#worker_connections",
            "text": "You may also need to update  worker_connections  option of Nginx:  events {\n    worker_connections 40000;\n}",
            "title": "worker_connections"
        },
        {
            "location": "/deploy/nginx/#upstream-keepalive",
            "text": "See  chapter about operating system tuning  for more details.",
            "title": "Upstream keepalive"
        },
        {
            "location": "/deploy/tls/",
            "text": "TLS\n\u00b6\n\n\nTLS/SSL layer is very important not only for securing your connections but also to increase a\nchance to establish Websocket connection. \nIn most situations you will put TLS termination task\non your reverse proxy/load balancing software such as Nginx\n.\n\n\nThere are situations though when you want to serve secure connections by Centrifugo itself.\n\n\nThere are two ways to do this: using TLS certificate \ncert\n and \nkey\n files that you've got\nfrom your CA provider or using automatic certificate handling via \nACME\n provider (only\n\nLet's Encrypt\n at this moment).\n\n\nUsing crt and key files\n\u00b6\n\n\nIn first way you already have \ncert\n and \nkey\n files. For development you can create self-signed\ncertificate - see \nthis instruction\n as\nexample.\n\n\nThen to start Centrifugo use the following command:\n\n\n./centrifugo --config=config.json --tls --tls_key=server.key --tls_cert=server.crt\n\n\n\n\nOr just use configuration file:\n\n\n{\n\n  \n...\n\n  \n\"tls\"\n:\n \ntrue\n,\n\n  \n\"tls_key\"\n:\n \n\"server.key\"\n,\n\n  \n\"tls_cert\"\n:\n \n\"server.crt\"\n\n\n}\n\n\n\n\n\nAnd run:\n\n\n./centrifugo --config=config.json\n\n\n\n\nAutomatic certificates\n\u00b6\n\n\nFor automatic certificates from Let's Encrypt add into configuration file:\n\n\n{\n  ...\n  \"tls_autocert\": true,\n  \"tls_autocert_host_whitelist\": \"www.example.com\",\n  \"tls_autocert_cache_dir\": \"/tmp/certs\",\n  \"tls_autocert_email\": \"user@example.com\",\n  \"tls_autocert_http\": true,\n  \"tls_autocert_http_addr\": \":80\"\n}\n\n\n\n\ntls_autocert\n (boolean) says Centrifugo that you want automatic certificate handling using ACME provider.\n\n\ntls_autocert_host_whitelist\n (string) is a string with your app domain address. This can be comma-separated\nlist. It's optional but recommended for extra security.\n\n\ntls_autocert_cache_dir\n (string) is a path to a folder to cache issued certificate files. This is optional\nbut will increase performance.\n\n\ntls_autocert_email\n (string) is optional - it's an email address ACME provider will send notifications\nabout problems with your certificates.\n\n\ntls_autocert_http\n (boolean) is an option to handle http_01 ACME challenge on non-TLS port.\n\n\ntls_autocert_http_addr\n (string) can be used to set address for handling http_01 ACME challenge (default is \n:80\n)\n\n\nWhen configured correctly and your domain is valid (\nlocalhost\n will not work) - certificates\nwill be retrieved on first request to Centrifugo.\n\n\nAlso Let's Encrypt certificates will be automatically renewed.\n\n\nThere are tho options that allow Centrifugo to support TLS client connections from older\nbrowsers such as Chrome 49 on Windows XP and IE8 on XP:\n\n\n\n\ntls_autocert_force_rsa\n - this is a boolean option, by default \nfalse\n. When enabled it forces\n    autocert manager generate certificates with 2048-bit RSA keys.\n\n\ntls_autocert_server_name\n - string option, allows to set server name for client handshake hello.\n    This can be useful to deal with old browsers without SNI support - see \ncomment",
            "title": "TLS"
        },
        {
            "location": "/deploy/tls/#tls",
            "text": "TLS/SSL layer is very important not only for securing your connections but also to increase a\nchance to establish Websocket connection.  In most situations you will put TLS termination task\non your reverse proxy/load balancing software such as Nginx .  There are situations though when you want to serve secure connections by Centrifugo itself.  There are two ways to do this: using TLS certificate  cert  and  key  files that you've got\nfrom your CA provider or using automatic certificate handling via  ACME  provider (only Let's Encrypt  at this moment).",
            "title": "TLS"
        },
        {
            "location": "/deploy/tls/#using-crt-and-key-files",
            "text": "In first way you already have  cert  and  key  files. For development you can create self-signed\ncertificate - see  this instruction  as\nexample.  Then to start Centrifugo use the following command:  ./centrifugo --config=config.json --tls --tls_key=server.key --tls_cert=server.crt  Or just use configuration file:  { \n   ... \n   \"tls\" :   true , \n   \"tls_key\" :   \"server.key\" , \n   \"tls_cert\" :   \"server.crt\"  }   And run:  ./centrifugo --config=config.json",
            "title": "Using crt and key files"
        },
        {
            "location": "/deploy/tls/#automatic-certificates",
            "text": "For automatic certificates from Let's Encrypt add into configuration file:  {\n  ...\n  \"tls_autocert\": true,\n  \"tls_autocert_host_whitelist\": \"www.example.com\",\n  \"tls_autocert_cache_dir\": \"/tmp/certs\",\n  \"tls_autocert_email\": \"user@example.com\",\n  \"tls_autocert_http\": true,\n  \"tls_autocert_http_addr\": \":80\"\n}  tls_autocert  (boolean) says Centrifugo that you want automatic certificate handling using ACME provider.  tls_autocert_host_whitelist  (string) is a string with your app domain address. This can be comma-separated\nlist. It's optional but recommended for extra security.  tls_autocert_cache_dir  (string) is a path to a folder to cache issued certificate files. This is optional\nbut will increase performance.  tls_autocert_email  (string) is optional - it's an email address ACME provider will send notifications\nabout problems with your certificates.  tls_autocert_http  (boolean) is an option to handle http_01 ACME challenge on non-TLS port.  tls_autocert_http_addr  (string) can be used to set address for handling http_01 ACME challenge (default is  :80 )  When configured correctly and your domain is valid ( localhost  will not work) - certificates\nwill be retrieved on first request to Centrifugo.  Also Let's Encrypt certificates will be automatically renewed.  There are tho options that allow Centrifugo to support TLS client connections from older\nbrowsers such as Chrome 49 on Windows XP and IE8 on XP:   tls_autocert_force_rsa  - this is a boolean option, by default  false . When enabled it forces\n    autocert manager generate certificates with 2048-bit RSA keys.  tls_autocert_server_name  - string option, allows to set server name for client handshake hello.\n    This can be useful to deal with old browsers without SNI support - see  comment",
            "title": "Automatic certificates"
        },
        {
            "location": "/deploy/redis/",
            "text": "Redis\n\u00b6\n\n\nThis section describes some aspects about deploying Redis for Centrifugo server.\n\n\nSentinel for high availability\n\u00b6\n\n\nCentrifugo supports official way to add high availability to Redis - Redis \nSentinel\n.\n\n\nFor this you only need to utilize 2 Redis Engine options: \nredis_master_name\n and \nredis_sentinels\n.\n\n\nredis_master_name\n - is a name of master your Sentinels monitor.\n\n\nredis_sentinels\n - comma-separated addresses of Sentinel servers. At least one known server required.\n\n\nSo you can start Centrifugo which will use Sentinels to discover redis master instance like this:\n\n\ncentrifugo --config=config.json --engine=redis --redis_master_name=mymaster --redis_sentinels=\":26379\"\n\n\n\n\nSentinel configuration files can look like this:\n\n\nport 26379\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 10000\nsentinel failover-timeout mymaster 60000\n\n\n\n\nYou can find how to properly setup Sentinels \nin official documentation\n.\n\n\nNote that when your redis master instance down there will be small downtime interval until Sentinels\ndiscover a problem and come to quorum decision about new master. The length of this period depends on\nSentinel configuration.\n\n\nHaproxy\n\u00b6\n\n\nAlternatively you can use Haproxy between Centrifugo and Redis to let it properly balance traffic to Redis master. In this case you still need to configure Sentinels but you can omit Sentinel specifics from Centrifugo configuration and just use Redis address as in simple non-HA case.\n\n\nFor example you can use something like this in Haproxy config:\n\n\nlisten redis\n    server redis-01 127.0.0.1:6380 check port 6380 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2\n    server redis-02 127.0.0.1:6381 check port 6381 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2 backup\n    bind *:16379\n    mode tcp\n    option tcpka\n    option tcplog\n    option tcp-check\n    tcp-check send PING\\r\\n\n    tcp-check expect string +PONG\n    tcp-check send info\\ replication\\r\\n\n    tcp-check expect string role:master\n    tcp-check send QUIT\\r\\n\n    tcp-check expect string +OK\n    balance roundrobin\n\n\n\n\nAnd then just point Centrifugo to this Haproxy:\n\n\ncentrifugo --config=config.json --engine=redis --redis_host=localhost --redis_port=16379",
            "title": "Redis HA"
        },
        {
            "location": "/deploy/redis/#redis",
            "text": "This section describes some aspects about deploying Redis for Centrifugo server.",
            "title": "Redis"
        },
        {
            "location": "/deploy/redis/#sentinel-for-high-availability",
            "text": "Centrifugo supports official way to add high availability to Redis - Redis  Sentinel .  For this you only need to utilize 2 Redis Engine options:  redis_master_name  and  redis_sentinels .  redis_master_name  - is a name of master your Sentinels monitor.  redis_sentinels  - comma-separated addresses of Sentinel servers. At least one known server required.  So you can start Centrifugo which will use Sentinels to discover redis master instance like this:  centrifugo --config=config.json --engine=redis --redis_master_name=mymaster --redis_sentinels=\":26379\"  Sentinel configuration files can look like this:  port 26379\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 10000\nsentinel failover-timeout mymaster 60000  You can find how to properly setup Sentinels  in official documentation .  Note that when your redis master instance down there will be small downtime interval until Sentinels\ndiscover a problem and come to quorum decision about new master. The length of this period depends on\nSentinel configuration.",
            "title": "Sentinel for high availability"
        },
        {
            "location": "/deploy/redis/#haproxy",
            "text": "Alternatively you can use Haproxy between Centrifugo and Redis to let it properly balance traffic to Redis master. In this case you still need to configure Sentinels but you can omit Sentinel specifics from Centrifugo configuration and just use Redis address as in simple non-HA case.  For example you can use something like this in Haproxy config:  listen redis\n    server redis-01 127.0.0.1:6380 check port 6380 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2\n    server redis-02 127.0.0.1:6381 check port 6381 check inter 2s weight 1 inter 2s downinter 5s rise 10 fall 2 backup\n    bind *:16379\n    mode tcp\n    option tcpka\n    option tcplog\n    option tcp-check\n    tcp-check send PING\\r\\n\n    tcp-check expect string +PONG\n    tcp-check send info\\ replication\\r\\n\n    tcp-check expect string role:master\n    tcp-check send QUIT\\r\\n\n    tcp-check expect string +OK\n    balance roundrobin  And then just point Centrifugo to this Haproxy:  centrifugo --config=config.json --engine=redis --redis_host=localhost --redis_port=16379",
            "title": "Haproxy"
        },
        {
            "location": "/deploy/tuning/",
            "text": "Tuning operating system\n\u00b6\n\n\nAs Centrifugo/Centrifuge deals with lots of persistent connections your operating system must be\nready for it.\n\n\nopen files limit\n\u00b6\n\n\nFirst of all you should increase a max number of open files your processes can open.\n\n\nTo get you current open files limit run:\n\n\nulimit -n\n\n\n\n\nThe result shows approximately how many clients your server can handle.\n\n\nSee http://docs.basho.com/riak/latest/ops/tuning/open-files-limit/ to know how to increase this number.\n\n\nIf you install Centrifugo using RPM from repo then it automatically sets max open files limit to 32768.\n\n\nYou may also need to increase max open files for Nginx.\n\n\nlots of sockets in TIME_WAIT state.\n\u00b6\n\n\nLook how many socket descriptors in TIME_WAIT state.\n\n\nnetstat -an |grep TIME_WAIT | grep CENTRIFUGO_PID | wc -l\n\n\n\n\nUnder load when lots of connections and disconnection happen lots of used socket descriptors can\nstay in TIME_WAIT state. Those descriptors can not be reused for a while. So you can get various\nerrors when using Centrifugo. For example something like \n(99: Cannot assign requested address)while connecting to upstream\n in Nginx error log and 502 on client side. In this case there are\nseveral advices that can help.\n\n\nNice article about TIME_WAIT sockets: http://vincent.bernat.im/en/blog/2014-tcp-time-wait-state-linux.html\n\n\nThere is a perfect article about operating system tuning for lots of connections: https://engineering.gosquared.com/optimising-nginx-node-js-and-networking-for-heavy-workloads.\n\n\nTo summarize:\n\n\n\n\nIncrease ip_local_port_range\n\n\nIf you are using Nginx set \nkeepalive\n directive in upstream.\n\n\n\n\nupstream\n \ncentrifugo\n \n{\n\n    \n#sticky\n;\n\n    \nip_hash\n;\n\n    \nserver\n \n127.0.0.1:8000\n;\n\n    \nkeepalive\n \n512\n;\n\n\n}\n\n\n\n\n\n\n\nAnd finally if the problem is not gone away consider trying to enable \nnet.ipv4.tcp_tw_reuse",
            "title": "OS tuning"
        },
        {
            "location": "/deploy/tuning/#tuning-operating-system",
            "text": "As Centrifugo/Centrifuge deals with lots of persistent connections your operating system must be\nready for it.",
            "title": "Tuning operating system"
        },
        {
            "location": "/deploy/tuning/#open-files-limit",
            "text": "First of all you should increase a max number of open files your processes can open.  To get you current open files limit run:  ulimit -n  The result shows approximately how many clients your server can handle.  See http://docs.basho.com/riak/latest/ops/tuning/open-files-limit/ to know how to increase this number.  If you install Centrifugo using RPM from repo then it automatically sets max open files limit to 32768.  You may also need to increase max open files for Nginx.",
            "title": "open files limit"
        },
        {
            "location": "/deploy/tuning/#lots-of-sockets-in-time_wait-state",
            "text": "Look how many socket descriptors in TIME_WAIT state.  netstat -an |grep TIME_WAIT | grep CENTRIFUGO_PID | wc -l  Under load when lots of connections and disconnection happen lots of used socket descriptors can\nstay in TIME_WAIT state. Those descriptors can not be reused for a while. So you can get various\nerrors when using Centrifugo. For example something like  (99: Cannot assign requested address)while connecting to upstream  in Nginx error log and 502 on client side. In this case there are\nseveral advices that can help.  Nice article about TIME_WAIT sockets: http://vincent.bernat.im/en/blog/2014-tcp-time-wait-state-linux.html  There is a perfect article about operating system tuning for lots of connections: https://engineering.gosquared.com/optimising-nginx-node-js-and-networking-for-heavy-workloads.  To summarize:   Increase ip_local_port_range  If you are using Nginx set  keepalive  directive in upstream.   upstream   centrifugo   { \n     #sticky ; \n     ip_hash ; \n     server   127.0.0.1:8000 ; \n     keepalive   512 ;  }    And finally if the problem is not gone away consider trying to enable  net.ipv4.tcp_tw_reuse",
            "title": "lots of sockets in TIME_WAIT state."
        },
        {
            "location": "/misc/insecure_modes/",
            "text": "Insecure modes\n\u00b6\n\n\nThis chapter describes several insecure options that enable several insecure modes in Centrifugo.\n\n\nInsecure client connection\n\u00b6\n\n\nThe boolean option \nclient_insecure\n (default \nfalse\n) allows to connect to Centrifugo without JWT token. This means there is no user authentication involved. This mode can be useful to demo projects based on Centrifugo, personal projects or real-time application prototyping.\n\n\nInsecure API mode\n\u00b6\n\n\nThis mode can be enabled using boolean option \napi_insecure\n (default \nfalse\n). When on there is no need to provide API key in HTTP requests. When using this mode everyone that has access to \n/api\n endpoint can send any command to server. Enabling this option can be reasonable if \n/api\n endpoint protected by firewall rules.\n\n\nThe option is also useful in development to simplify sending API commands to Centrifugo using CURL for example without specifying \nAuthorization\n header in requests.\n\n\nInsecure admin mode\n\u00b6\n\n\nThis mode can be enabled using boolean option \nadmin_insecure\n (default \nfalse\n). When on there is no authentication in admin web interface. Again - this is not secure but can be justified if you protected admin interface by firewall rules or you want to use basic authentication for Centrifugo admin interface.",
            "title": "Insecure modes"
        },
        {
            "location": "/misc/insecure_modes/#insecure-modes",
            "text": "This chapter describes several insecure options that enable several insecure modes in Centrifugo.",
            "title": "Insecure modes"
        },
        {
            "location": "/misc/insecure_modes/#insecure-client-connection",
            "text": "The boolean option  client_insecure  (default  false ) allows to connect to Centrifugo without JWT token. This means there is no user authentication involved. This mode can be useful to demo projects based on Centrifugo, personal projects or real-time application prototyping.",
            "title": "Insecure client connection"
        },
        {
            "location": "/misc/insecure_modes/#insecure-api-mode",
            "text": "This mode can be enabled using boolean option  api_insecure  (default  false ). When on there is no need to provide API key in HTTP requests. When using this mode everyone that has access to  /api  endpoint can send any command to server. Enabling this option can be reasonable if  /api  endpoint protected by firewall rules.  The option is also useful in development to simplify sending API commands to Centrifugo using CURL for example without specifying  Authorization  header in requests.",
            "title": "Insecure API mode"
        },
        {
            "location": "/misc/insecure_modes/#insecure-admin-mode",
            "text": "This mode can be enabled using boolean option  admin_insecure  (default  false ). When on there is no authentication in admin web interface. Again - this is not secure but can be justified if you protected admin interface by firewall rules or you want to use basic authentication for Centrifugo admin interface.",
            "title": "Insecure admin mode"
        },
        {
            "location": "/misc/migrate/",
            "text": "Migration notes from Centrifugo v1\n\u00b6\n\n\nIn version 2 of Centrifugo many things changed in backwards incompatible way comparing to version 1. This document aims to help Centrifugo v1 users to migrate their projects to version 2 (if they want to).\n\n\nNew client protocol and client libraries\n\u00b6\n\n\nIn Centrifugo v2 internal client-server protocol changed meaning that old client library version won't work with new server. So first step in migrating - update client libraries to new version with Centrifugo v2 support.\n\n\nWhile refactoring client's API changed a bit so you have to adapt your code to those changes.\n\n\nFor the moment of this writing we have no native mobile libraries for Centrifugo v2. So if you are using \ncentrifuge-ios\n or \ncentrifuge-android\n then you can't migrate to v2 until those libraries will be ported.\n\n\nMigrate communication with API\n\u00b6\n\n\nCentrifugo v2 simplified communication with API - requests should not be signed with secret key anymore thus you can simply integrate your backend with Centrifugo without using any of our helper libraries - just send JSON API command as POST request to api endpoint. Don't forget to use api key and protect API endpoint with TLS (more information in server API description document).\n\n\nCentrifugo v1 could process messages published in Redis queue. In v2 this possibility was removed because this technique is not good in terms of error handling and non-deterministic delay before message will be processed by Centrifugo node worker. Migrate to using HTTP or GRPC API.\n\n\nUse JWT instead of hand-crafted connection token\n\u00b6\n\n\nIn Centrifugo v2 you must use JWT instead of hand-crafted tokens of v1. This means that you need to download JWT library for your language (there are plenty of them \u2013 see jwt.io) and build connection token with it.\n\n\nSee dedicated docs chapter to see how token can be built. \n\n\nAll connection information will be passed inside this single token string. This means you only need to pass one string to your frontend. No need to pass \nuser\n, \ntimestamp\n, \ninfo\n anymore. This also means that you will have less problems with escaping features of template engines - because JWT is safe base64 string.\n\n\nConnection expiration (connection check mechanism) now based on \nexp\n claim of JWT \u2013 you don't need to enable it globally in configuration. \n\n\nUse JWT instead of hand-crafted signature for private subscriptions\n\u00b6\n\n\nRead chapter about private subscriptions to find how you should now use JWT for private channel subscriptions.\n\n\nChannel options changed\n\u00b6\n\n\nChannel option \nrecover\n now called \nhistory_recover\n.\n\n\nThere is no \nwatch\n channel option anymore - in Centrifugo v2 admin websocket connection was removed as it made code base much more overhelmed for almost nothing. \n\n\nSockJS endpoint changed\n\u00b6\n\n\nIt's now \n/connection/sockjs\n instead of \n/connection\n\n\nNew way to export metrics\n\u00b6\n\n\nCentrifugo is now uses Prometheus primitives internally so if you are using Prometheus you can simply configure it to monitor Centrifugo. Also Centrifugo is able to automatically convert and export metrics to Graphite. See special Monitoring chapter in server docs.\n\n\nPreviously you have to periodically call \nstats\n command and export metrics manually. This is gone in Centrifugo v2.\n\n\nOptions renamed\n\u00b6\n\n\nSome of advanced options have been renamed \u2013 if you are using advanced configuration then refer to documentation to find actual option names.\n\n\nNo client limited channels anymore\n\u00b6\n\n\nThat was a pretty useless feature of Centrifugo v1.\n\n\nNew reserved symbols in channel name\n\u00b6\n\n\nSymbols \n*\n and \n/\n in channel name are now reserved for Centrifugo future needs - please do not use it in channels.\n\n\nCentrifugo v1 repos\n\u00b6\n\n\nHere some links for those who still use Centrifugo v1\n\n\n\n\nCentrifugo v1 source code\n\n\nCentrifugo v1 documentation\n\n\ncentrifuge-js v1\n\n\ncentrifuge-go\n\n\ncentrifuge-mobile\n\n\nexamples",
            "title": "Migrate from Centrifugo v1"
        },
        {
            "location": "/misc/migrate/#migration-notes-from-centrifugo-v1",
            "text": "In version 2 of Centrifugo many things changed in backwards incompatible way comparing to version 1. This document aims to help Centrifugo v1 users to migrate their projects to version 2 (if they want to).",
            "title": "Migration notes from Centrifugo v1"
        },
        {
            "location": "/misc/migrate/#new-client-protocol-and-client-libraries",
            "text": "In Centrifugo v2 internal client-server protocol changed meaning that old client library version won't work with new server. So first step in migrating - update client libraries to new version with Centrifugo v2 support.  While refactoring client's API changed a bit so you have to adapt your code to those changes.  For the moment of this writing we have no native mobile libraries for Centrifugo v2. So if you are using  centrifuge-ios  or  centrifuge-android  then you can't migrate to v2 until those libraries will be ported.",
            "title": "New client protocol and client libraries"
        },
        {
            "location": "/misc/migrate/#migrate-communication-with-api",
            "text": "Centrifugo v2 simplified communication with API - requests should not be signed with secret key anymore thus you can simply integrate your backend with Centrifugo without using any of our helper libraries - just send JSON API command as POST request to api endpoint. Don't forget to use api key and protect API endpoint with TLS (more information in server API description document).  Centrifugo v1 could process messages published in Redis queue. In v2 this possibility was removed because this technique is not good in terms of error handling and non-deterministic delay before message will be processed by Centrifugo node worker. Migrate to using HTTP or GRPC API.",
            "title": "Migrate communication with API"
        },
        {
            "location": "/misc/migrate/#use-jwt-instead-of-hand-crafted-connection-token",
            "text": "In Centrifugo v2 you must use JWT instead of hand-crafted tokens of v1. This means that you need to download JWT library for your language (there are plenty of them \u2013 see jwt.io) and build connection token with it.  See dedicated docs chapter to see how token can be built.   All connection information will be passed inside this single token string. This means you only need to pass one string to your frontend. No need to pass  user ,  timestamp ,  info  anymore. This also means that you will have less problems with escaping features of template engines - because JWT is safe base64 string.  Connection expiration (connection check mechanism) now based on  exp  claim of JWT \u2013 you don't need to enable it globally in configuration.",
            "title": "Use JWT instead of hand-crafted connection token"
        },
        {
            "location": "/misc/migrate/#use-jwt-instead-of-hand-crafted-signature-for-private-subscriptions",
            "text": "Read chapter about private subscriptions to find how you should now use JWT for private channel subscriptions.",
            "title": "Use JWT instead of hand-crafted signature for private subscriptions"
        },
        {
            "location": "/misc/migrate/#channel-options-changed",
            "text": "Channel option  recover  now called  history_recover .  There is no  watch  channel option anymore - in Centrifugo v2 admin websocket connection was removed as it made code base much more overhelmed for almost nothing.",
            "title": "Channel options changed"
        },
        {
            "location": "/misc/migrate/#sockjs-endpoint-changed",
            "text": "It's now  /connection/sockjs  instead of  /connection",
            "title": "SockJS endpoint changed"
        },
        {
            "location": "/misc/migrate/#new-way-to-export-metrics",
            "text": "Centrifugo is now uses Prometheus primitives internally so if you are using Prometheus you can simply configure it to monitor Centrifugo. Also Centrifugo is able to automatically convert and export metrics to Graphite. See special Monitoring chapter in server docs.  Previously you have to periodically call  stats  command and export metrics manually. This is gone in Centrifugo v2.",
            "title": "New way to export metrics"
        },
        {
            "location": "/misc/migrate/#options-renamed",
            "text": "Some of advanced options have been renamed \u2013 if you are using advanced configuration then refer to documentation to find actual option names.",
            "title": "Options renamed"
        },
        {
            "location": "/misc/migrate/#no-client-limited-channels-anymore",
            "text": "That was a pretty useless feature of Centrifugo v1.",
            "title": "No client limited channels anymore"
        },
        {
            "location": "/misc/migrate/#new-reserved-symbols-in-channel-name",
            "text": "Symbols  *  and  /  in channel name are now reserved for Centrifugo future needs - please do not use it in channels.",
            "title": "New reserved symbols in channel name"
        },
        {
            "location": "/misc/migrate/#centrifugo-v1-repos",
            "text": "Here some links for those who still use Centrifugo v1   Centrifugo v1 source code  Centrifugo v1 documentation  centrifuge-js v1  centrifuge-go  centrifuge-mobile  examples",
            "title": "Centrifugo v1 repos"
        },
        {
            "location": "/faq/",
            "text": "FAQ\n\u00b6\n\n\nAnswers on various questions here.\n\n\nHow many connections can one Centrifugo instance handle?\n\u00b6\n\n\nThis depends on many factors. Hardware, message rate, size of messages, channel options enabled, client distribution over channels, websocket compression on/off etc. So no certain answer on this question exists. Common sense, tests and monitoring can help here. Generally we suggest to not put more than 50-100k clients on one node - but you should measure.\n\n\nCan Centrifugo scale horizontally?\n\u00b6\n\n\nYes, it can. It can do this using builtin Redis Engine. Redis is very fast \u2013 for example it can handle hundreds of thousands requests per second. This should be OK for most applications in internet. But if you are using Centrifugo and approaching this limit then it's possible to add sharding support to balance queries between different Redis instances.\n\n\nMessage delivery model and message order guarantees\n\u00b6\n\n\nThe model of message delivery of Centrifugo server is at most once.\n\n\nThis means that message you send to Centrifugo can be theoretically lost while moving towards your clients. Centrifugo tries to do a best effort to prevent message losses but you should be aware of this fact. Your application should tolerate this. Centrifugo has an option to automatically recover messages that have been lost because of short network disconnections. But there are cases when Centrifugo can't guarantee message delivery. We also recommend to model your applications in a way that users don't notice when message have been lost. For example if your user posts a new comment over AJAX call to your application backend - you should not rely only on Centrifugo to get new comment form and display it - you should return new comment data in AJAX call response and render it. Be careful to not draw comments twice in this case.\n\n\nMessage order in channels guaranteed to be the same while you publish messages into channel one after another or publish them in one request. If you do parallel publishes into the same channel then Centrifugo can't guarantee message order.\n\n\nCentrifugo stops accepting new connections, why?\n\u00b6\n\n\nThe most popular reason behind this is reaching open file limit. Just make it higher, we described how to do this nearby in this doc.\n\n\nCan I use Centrifugo without reverse-proxy like Nginx before it?\n\u00b6\n\n\nYes, you can - Go standard library designed to allow this. But proxy before Centrifugo can\nbe very useful for load balancing clients for example.\n\n\nDoes Centrifugo work with HTTP/2?\n\u00b6\n\n\nYes, Centrifugo works with HTTP/2.\n\n\nYou can disable HTTP/2 running Centrifugo server with \nGODEBUG\n environment variable:\n\n\nGODEBUG=\"http2server=0\" centrifugo -c config.json\n\n\n\n\nIs there a way to use single connection to Centrifugo from different browser tabs?\n\u00b6\n\n\nIf underlying transport is HTTP-based and you use HTTP/2 then this will work automatically. In case of websocket connection there is a way to do this using \nSharedWorker\n object though we have no support to work this way in our Javascript library.\n\n\nWhat if I need to send push notifications to mobile or web applications?\n\u00b6\n\n\nSometimes it's confusing to see a difference between real-time messages and push notifications. Centrifugo is a real-time messaging server. It can not send push notifications to devices - to Apple iOS devices via APNS, Android devices via GCM or browsers over Web Push API. This is a goal for another software. But the reasonable question here is how can I know when I need to send real-time message to client online or push notification to its device because application closed at client's device at moment. The solution is pretty simple. You can keep critical notifications for client in database. And when client read message send ack to your backend marking that notification as read by client, you save this ack too. Periodically you can check which notifications were sent to clients but they have not read it (no ack received). For such notification you can send push notification to its device using your own or another open-source solution. Look at Firebase for example!\n\n\nCan I know message was really delivered to client?\n\u00b6\n\n\nYou can but Centrifugo does not have such API. What you have to do to ensure your client received message is sending confirmation ack from your client to your application backend as soon as client processed message coming from Centrifugo channel.\n\n\nCan I publish new messages over websocket connection from client?\n\u00b6\n\n\nCentrifugo designed to stream messages from server to client. Even though it's possible to publish messages into channels directly from client (when \npublish\n channel option enabled) - we strongly discourage this in production usage as those messages will go through Centrifugo without any control. Of course Centrifugo could resend those message to your application endpoint but it would be very inefficient and much worse than just sending new events from client to your backend.\n\n\nSo in general when user generates an event it must be first delivered to your app backend using a convenient way (for example AJAX POST request for web application), processed on backend (validated, saved into main application database) and then published to Centrifugo using Centrifugo HTTP API or Redis queue.\n\n\nSometimes publishing from client directly into channel can be useful though - for personal projects, for demonstrations (like we do in our \nexamples\n) or if you trust your users and want to build application without backend. In all cases when you don't need any message control\non your backend.\n\n\nHow to create secure channel for two users only (private chat case)?\n\u00b6\n\n\nThere are several ways to achieve it:\n\n\n\n\nuse private channel (starting with \n$\n) - every time user will try to subscribe on it your backend should provide sign to confirm that subscription request. Read more in \nspecial chapter about channels\n\n\nnext is \nuser limited channels\n (with \n#\n) - you can create channel with name like \ndialog#42,567\n to limit subscribers only to user with id \n42\n and user with ID \n567\n\n\nfinally you can create hard to guess channel name (based on some secret key and user IDs or just generate and save this long unique name into your main app database) so other users won't know this channel to subscribe on it. This is the simplest but not the safest way - but can be reasonable to consider in many situations.\n\n\n\n\nWhat's a best way to organize channel configuration?\n\u00b6\n\n\nIn most situations your application need several real-time features. We suggest to use namespaces for every real-time feature if it requires some option enabled.\n\n\nFor example if you need join/leave messages for chat app - create special channel namespace with this \njoin_leave\n option enabled. Otherwise your other channels will receive join/leave messages too - increasing load and traffic in system but not actually used by clients.\n\n\nThe same relates to other channel options.\n\n\nCan I rely on Centrifugo and its message history for guaranteed message delivery?\n\u00b6\n\n\nNo - Centrifugo is best-effort transport. This means that if you want strongly guaranteed message delivery to your clients then you can't just rely on Centrifugo and its message history cache. In this case you still can use Centrifugo for real-time but you should build some additional logic on top your application backend and main data storage to satisfy your guarantees.\n\n\nCentrifugo can keep message history for a while and you can want to rely on it for your needs. Centrifugo is not designed as data storage - it uses message history mostly for recovering missed messages after short client internet connection disconnects. It's not designed to be used to sync client state after being offline for a long time - this logic should be on your app backend.\n\n\nWhat is the difference between Centrifugo and Centrifuge\n\u00b6\n\n\nCentrifugo\n is server built on top of \nCentrifuge\n library for Go language.\n\n\nThis documentation was built to describe Centrifugo. Though many things said here can be considered as extra documentation for Centrifuge library.\n\n\nI have not found an answer on my question here:\n\u00b6\n\n\nWe have \nGitter chat room\n and \nTelegram group\n - welcome!\n\n\nI want to contribute to this awesome project\n\u00b6\n\n\nWe have many things you can help with \u2013 just ask us in our chat rooms.",
            "title": "FAQ"
        },
        {
            "location": "/faq/#faq",
            "text": "Answers on various questions here.",
            "title": "FAQ"
        },
        {
            "location": "/faq/#how-many-connections-can-one-centrifugo-instance-handle",
            "text": "This depends on many factors. Hardware, message rate, size of messages, channel options enabled, client distribution over channels, websocket compression on/off etc. So no certain answer on this question exists. Common sense, tests and monitoring can help here. Generally we suggest to not put more than 50-100k clients on one node - but you should measure.",
            "title": "How many connections can one Centrifugo instance handle?"
        },
        {
            "location": "/faq/#can-centrifugo-scale-horizontally",
            "text": "Yes, it can. It can do this using builtin Redis Engine. Redis is very fast \u2013 for example it can handle hundreds of thousands requests per second. This should be OK for most applications in internet. But if you are using Centrifugo and approaching this limit then it's possible to add sharding support to balance queries between different Redis instances.",
            "title": "Can Centrifugo scale horizontally?"
        },
        {
            "location": "/faq/#message-delivery-model-and-message-order-guarantees",
            "text": "The model of message delivery of Centrifugo server is at most once.  This means that message you send to Centrifugo can be theoretically lost while moving towards your clients. Centrifugo tries to do a best effort to prevent message losses but you should be aware of this fact. Your application should tolerate this. Centrifugo has an option to automatically recover messages that have been lost because of short network disconnections. But there are cases when Centrifugo can't guarantee message delivery. We also recommend to model your applications in a way that users don't notice when message have been lost. For example if your user posts a new comment over AJAX call to your application backend - you should not rely only on Centrifugo to get new comment form and display it - you should return new comment data in AJAX call response and render it. Be careful to not draw comments twice in this case.  Message order in channels guaranteed to be the same while you publish messages into channel one after another or publish them in one request. If you do parallel publishes into the same channel then Centrifugo can't guarantee message order.",
            "title": "Message delivery model and message order guarantees"
        },
        {
            "location": "/faq/#centrifugo-stops-accepting-new-connections-why",
            "text": "The most popular reason behind this is reaching open file limit. Just make it higher, we described how to do this nearby in this doc.",
            "title": "Centrifugo stops accepting new connections, why?"
        },
        {
            "location": "/faq/#can-i-use-centrifugo-without-reverse-proxy-like-nginx-before-it",
            "text": "Yes, you can - Go standard library designed to allow this. But proxy before Centrifugo can\nbe very useful for load balancing clients for example.",
            "title": "Can I use Centrifugo without reverse-proxy like Nginx before it?"
        },
        {
            "location": "/faq/#does-centrifugo-work-with-http2",
            "text": "Yes, Centrifugo works with HTTP/2.  You can disable HTTP/2 running Centrifugo server with  GODEBUG  environment variable:  GODEBUG=\"http2server=0\" centrifugo -c config.json",
            "title": "Does Centrifugo work with HTTP/2?"
        },
        {
            "location": "/faq/#is-there-a-way-to-use-single-connection-to-centrifugo-from-different-browser-tabs",
            "text": "If underlying transport is HTTP-based and you use HTTP/2 then this will work automatically. In case of websocket connection there is a way to do this using  SharedWorker  object though we have no support to work this way in our Javascript library.",
            "title": "Is there a way to use single connection to Centrifugo from different browser tabs?"
        },
        {
            "location": "/faq/#what-if-i-need-to-send-push-notifications-to-mobile-or-web-applications",
            "text": "Sometimes it's confusing to see a difference between real-time messages and push notifications. Centrifugo is a real-time messaging server. It can not send push notifications to devices - to Apple iOS devices via APNS, Android devices via GCM or browsers over Web Push API. This is a goal for another software. But the reasonable question here is how can I know when I need to send real-time message to client online or push notification to its device because application closed at client's device at moment. The solution is pretty simple. You can keep critical notifications for client in database. And when client read message send ack to your backend marking that notification as read by client, you save this ack too. Periodically you can check which notifications were sent to clients but they have not read it (no ack received). For such notification you can send push notification to its device using your own or another open-source solution. Look at Firebase for example!",
            "title": "What if I need to send push notifications to mobile or web applications?"
        },
        {
            "location": "/faq/#can-i-know-message-was-really-delivered-to-client",
            "text": "You can but Centrifugo does not have such API. What you have to do to ensure your client received message is sending confirmation ack from your client to your application backend as soon as client processed message coming from Centrifugo channel.",
            "title": "Can I know message was really delivered to client?"
        },
        {
            "location": "/faq/#can-i-publish-new-messages-over-websocket-connection-from-client",
            "text": "Centrifugo designed to stream messages from server to client. Even though it's possible to publish messages into channels directly from client (when  publish  channel option enabled) - we strongly discourage this in production usage as those messages will go through Centrifugo without any control. Of course Centrifugo could resend those message to your application endpoint but it would be very inefficient and much worse than just sending new events from client to your backend.  So in general when user generates an event it must be first delivered to your app backend using a convenient way (for example AJAX POST request for web application), processed on backend (validated, saved into main application database) and then published to Centrifugo using Centrifugo HTTP API or Redis queue.  Sometimes publishing from client directly into channel can be useful though - for personal projects, for demonstrations (like we do in our  examples ) or if you trust your users and want to build application without backend. In all cases when you don't need any message control\non your backend.",
            "title": "Can I publish new messages over websocket connection from client?"
        },
        {
            "location": "/faq/#how-to-create-secure-channel-for-two-users-only-private-chat-case",
            "text": "There are several ways to achieve it:   use private channel (starting with  $ ) - every time user will try to subscribe on it your backend should provide sign to confirm that subscription request. Read more in  special chapter about channels  next is  user limited channels  (with  # ) - you can create channel with name like  dialog#42,567  to limit subscribers only to user with id  42  and user with ID  567  finally you can create hard to guess channel name (based on some secret key and user IDs or just generate and save this long unique name into your main app database) so other users won't know this channel to subscribe on it. This is the simplest but not the safest way - but can be reasonable to consider in many situations.",
            "title": "How to create secure channel for two users only (private chat case)?"
        },
        {
            "location": "/faq/#whats-a-best-way-to-organize-channel-configuration",
            "text": "In most situations your application need several real-time features. We suggest to use namespaces for every real-time feature if it requires some option enabled.  For example if you need join/leave messages for chat app - create special channel namespace with this  join_leave  option enabled. Otherwise your other channels will receive join/leave messages too - increasing load and traffic in system but not actually used by clients.  The same relates to other channel options.",
            "title": "What's a best way to organize channel configuration?"
        },
        {
            "location": "/faq/#can-i-rely-on-centrifugo-and-its-message-history-for-guaranteed-message-delivery",
            "text": "No - Centrifugo is best-effort transport. This means that if you want strongly guaranteed message delivery to your clients then you can't just rely on Centrifugo and its message history cache. In this case you still can use Centrifugo for real-time but you should build some additional logic on top your application backend and main data storage to satisfy your guarantees.  Centrifugo can keep message history for a while and you can want to rely on it for your needs. Centrifugo is not designed as data storage - it uses message history mostly for recovering missed messages after short client internet connection disconnects. It's not designed to be used to sync client state after being offline for a long time - this logic should be on your app backend.",
            "title": "Can I rely on Centrifugo and its message history for guaranteed message delivery?"
        },
        {
            "location": "/faq/#what-is-the-difference-between-centrifugo-and-centrifuge",
            "text": "Centrifugo  is server built on top of  Centrifuge  library for Go language.  This documentation was built to describe Centrifugo. Though many things said here can be considered as extra documentation for Centrifuge library.",
            "title": "What is the difference between Centrifugo and Centrifuge"
        },
        {
            "location": "/faq/#i-have-not-found-an-answer-on-my-question-here",
            "text": "We have  Gitter chat room  and  Telegram group  - welcome!",
            "title": "I have not found an answer on my question here:"
        },
        {
            "location": "/faq/#i-want-to-contribute-to-this-awesome-project",
            "text": "We have many things you can help with \u2013 just ask us in our chat rooms.",
            "title": "I want to contribute to this awesome project"
        }
    ]
}