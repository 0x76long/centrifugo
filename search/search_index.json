{
    "docs": [
        {
            "location": "/",
            "text": "Centrifugo\n\u00b6\n\n\nThis is a work in progress documentation for Centrifugo v2\n\n\nCentrifugo is a language-agnostic real-time server. It's main goal is to help adding real-time messages to your application. Language-agnostic means that it does not matter which programming language your application uses on frontend or backend sides - Centrifugo can work in conjunction with any. Real-time messages are messages that delivered to your clients almost immediately after some event happened - think live comments, real-time charts, updated counters.\n\n\nThere are several main transports Centrifugo supports at moment:\n\n\n\n\nSockJS (library that tries to establish Websocket connection and falls back to HTTP transports automatically in case of problems with Websockets)\n\n\nWebsocket (JSON or binary Protobuf)\n\n\nGRPC\n\n\n\n\nOverview\n\u00b6\n\n\nOverview",
            "title": "Getting Started"
        },
        {
            "location": "/#centrifugo",
            "text": "This is a work in progress documentation for Centrifugo v2  Centrifugo is a language-agnostic real-time server. It's main goal is to help adding real-time messages to your application. Language-agnostic means that it does not matter which programming language your application uses on frontend or backend sides - Centrifugo can work in conjunction with any. Real-time messages are messages that delivered to your clients almost immediately after some event happened - think live comments, real-time charts, updated counters.  There are several main transports Centrifugo supports at moment:   SockJS (library that tries to establish Websocket connection and falls back to HTTP transports automatically in case of problems with Websockets)  Websocket (JSON or binary Protobuf)  GRPC",
            "title": "Centrifugo"
        },
        {
            "location": "/#overview",
            "text": "Overview",
            "title": "Overview"
        },
        {
            "location": "/concepts/",
            "text": "Concepts\n\u00b6",
            "title": "Concepts"
        },
        {
            "location": "/concepts/#concepts",
            "text": "",
            "title": "Concepts"
        },
        {
            "location": "/server/",
            "text": "Server overview\n\u00b6\n\n\nCentrifugo server is written in Go language. It's an open-source software, the source code is available \non Github\n.\n\n\nCentrifugo is built around centrifuge library for Go language. That library defines custom protocol and message types which must be sent over various transports (Websocket, GRPC, SockJS). Our clients use that protocol internally and provide simple API to features - making persistent connection, subscribing on channels, calling RPC commands and more.",
            "title": "Overview"
        },
        {
            "location": "/server/#server-overview",
            "text": "Centrifugo server is written in Go language. It's an open-source software, the source code is available  on Github .  Centrifugo is built around centrifuge library for Go language. That library defines custom protocol and message types which must be sent over various transports (Websocket, GRPC, SockJS). Our clients use that protocol internally and provide simple API to features - making persistent connection, subscribing on channels, calling RPC commands and more.",
            "title": "Server overview"
        },
        {
            "location": "/server/protocol/",
            "text": "Client protocol\n\u00b6\n\n\nThis chapter describes internal client-server protocol in details to help developers build custom client libraries.\n\n\nNote that you can always look at existing client implementations in case of any questions, for example \ncentrifuge-js\n.\n\n\nWhat client should do\n\u00b6\n\n\nWhen you are using Centrifuge/Centrifugo client you expect some core things from it:\n\n\n\n\nconnect to server and authenticate. Depending on transport endpoint address can differ. For example Centrifugo JSON-encoded Websocket endpoint is \nws://centrifugo.example.com/connection/websocket\n.\n\n\nsubscribe on channels developer wants. This allows to recieve messages published into channels in real-time.\n\n\nhave a possibility to make RPC calls, publish, asking for presence etc.\n\n\nrefresh client connection credentials when connection session lifetime is going to expire.\n\n\nhandle ping/pong messaging with server under the hood to maintain connection alive and detect broken connection.\n\n\nhandle protocol-specific errors, reconnect and recover missed messages automatically.\n\n\n\n\nAt moment Centrifuge/Centrifugo can work with several transports:\n\n\n\n\nWebsocket\n\n\nSockJS\n\n\nGRPC\n\n\n\n\nThis document describes protocol specifics for Websocket transport which supports binary and text formats to transfer data. As Centrifuge has various types of messages it serializes protocol messages using JSON or Protobuf (in case of binary websockets).\n\n\n\n\nNote\n\n\nSockJS works almost the same way as JSON websocket described here but has its own extra framing on top of Centrifuge protocol messages. SockJS can only work with JSON - it's not possible to transfer binary data over it. SockJS is only needed as fallback to Websocket in web browsers.\n\n\n\n\n\n\nNote\n\n\nGRPC support is an experimental at moment. GRPC works similar to what described here but it has its own transport details - Centrifuge library can not control how data travel over network and just uses GRPC generated API to pass messages between server and client over bidirectional streaming.\n\n\n\n\nTop level framing\n\u00b6\n\n\nCentrifuge protocol defined in \nProtobuf schema\n. That schema is a source of truth and all protocol description below describes messages from that schema.\n\n\nClient sends \nCommand\n to server.\n\n\nServer sends \nReply\n to client.\n\n\nOne request from client to server and one response from server to client can have more than one \nCommand\n or \nReply\n.\n\n\nWhen JSON format is used then many \nCommand\n can be sent from client to server in JSON streaming line-delimited format. I.e. many commands delimited by new line symbol \n\\n\n.\n\n\n{\n\"id\"\n:\n \n1\n,\n \n\"method\"\n:\n \n\"subscribe\"\n,\n \n\"params\"\n:\n \n{\n\"channel\"\n:\n \n\"ch1\"\n}}\n\n\n{\n\"id\"\n:\n \n2\n,\n \n\"method\"\n:\n \n\"subscribe\"\n,\n \n\"params\"\n:\n \n{\n\"channel\"\n:\n \n\"ch2\"\n}}\n\n\n\n\n\n\n\nNote\n\n\nThis doc will use JSON format for examples because it's human-readable. Everything said here for JSON is also true for Protobuf encoded case.\n\n\n\n\nWhen Protobuf format is used then many \nCommand\n can be sent from client to server in length-delimited format where each individual \nCommand\n marshaled to bytes prepended by \nvarint\n length.\n\n\nThe same relates to many \nReply\n in one response from server to client. Line-delimited JSON and varint-length prefixed Protobuf.\n\n\nAs you see above each \nCommand\n has \nid\n field. This is an incremental integer field. This field will be echoed in server to client replies to commands so client could match a certain \nReply\n to \nCommand\n sent before. This is important because Websocket is asynchronous protocol where server and client both send messages in full-duplex mode.\n\n\nSo you can expect something like this when sending commands to server:\n\n\n{\n\"id\"\n:\n \n1\n,\n \n\"result\"\n:\n \n{}}\n\n\n{\n\"id\"\n:\n \n2\n,\n \n\"result\"\n:\n \n{}}\n\n\n\n\n\nBesides \nid\n \nReply\n from server to client have two important fields: \nresult\n and \nerror\n.\n\n\nresult\n contains useful payload object which can be different depending on \nReply\n.\n\n\nerror\n contains error object in case of \nCommand\n processing resulted in some error on server. \nerror\n is optional and if \nReply\n does not have \nerror\n then it means that \nCommand\n processed successfuly and client can parse \nresult\n object in an appropriate way.\n\n\nerror\n objects looks like this:\n\n\n{\n\n    \n\"code\"\n:\n \n100\n,\n\n    \n\"message\"\n:\n \n\"internal server error\"\n,\n\n    \n\"retry\"\n:\n \ntrue\n\n\n}\n\n\n\n\n\nWe will talk more about error handling below.\n\n\nThe special type of \nReply\n is asynchronous \nReply\n. Those replies have no \nid\n field set (or \nid\n can be equal to zero). Async replies can come to client in any moment - not as reaction to issued \nCommand\n but as message from server to client in arbitrary time. For example this can be message published into channel.\n\n\nCentrifuge library defines several command types client can issue. And well-written client must be aware of all those commands and client workflow. Communication with Centrifuge/Centrifugo server starts with \nconnect\n command.\n\n\nConnect\n\u00b6\n\n\nFirst of all client must dial with server and then send \nconnect\n \nCommand\n to it.\n\n\nDefault Websocket endpoint in Centrifugo is:\n\n\nws://centrifugo.example.com/connection/websocket\n\n\n\n\nIn case of using TLS:\n\n\nwss://centrifugo.example.com/connection/websocket\n\n\n\n\nAfter successful dial to websocket endpoint client must send \nconnect\n command to server to authorize itself.\n\n\nconnect\n command looks like:\n\n\n{\n\n    \n\"id\"\n:\n \n1\n,\n\n    \n\"method\"\n:\n \n\"connect\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"user\"\n:\n \n\"42\"\n,\n\n        \n\"exp\"\n:\n \n\"1520094208\"\n,\n\n        \n\"info\"\n:\n \n\"\"\n,\n\n        \n\"sign\"\n:\n \n\"xxx\"\n\n    \n}\n\n\n}\n\n\n\n\n\nWhere params fields are passed to client from application backend:\n\n\n\n\nstring \nuser\n - current user ID. Can be empty string for unauthorized user.\n\n\nstring \nexp\n - timestamp seconds when client connection expires.\n\n\nstring \ninfo\n - optional base64 encoded information about connection. This is JSON object encoded to base64 in case of JSON format used and arbitrary bytes for Protobuf format.\n\n\nstring \nsign\n - HMAC SHA-256 sign generated on backend side from Centrifugo secret and fields above. This sign helps to prove the fact that client passed valid \nuser\n, \nexp\n, \ninfo\n fields to server.\n\n\n\n\nIn response to \nconnect\n command server sends connect reply. It looks this way:\n\n\n{\n\n    \n\"id\"\n:\n1\n,\n\n    \n\"result\"\n:\n{\n\n        \n\"client\"\n:\n\"421bf374-dd01-4f82-9def-8c31697e956f\"\n,\n\n        \n\"version\"\n:\n\"2.0.0\"\n\n    \n}\n\n\n}\n\n\n\n\n\nresult\n has some fields:\n\n\n\n\nstring \nclient\n - unique client connection ID server issued to this connection\n\n\nstring \nversion\n - server version\n\n\noptional bool \nexpires\n - whether or not server will expire connection\n\n\noptional bool \nexpired\n - whether or not connection credentials already expired and must be refreshed\n\n\noptional int32 \nttl\n - time in seconds until connection will expire\n\n\n\n\nSubscribe\n\u00b6\n\n\nAs soon as client successfully connected and got unique connection ID it is ready to\nsubscribe on channels. To do this it must send \nsubscribe\n command to server:\n\n\n{\n\n    \n\"id\"\n:\n \n2\n,\n\n    \n\"method\"\n:\n \n\"subscribe\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"channel\"\n:\n \n\"ch1\"\n\n    \n}\n\n\n}\n\n\n\n\n\nFields that can be set in \nparams\n are:\n\n\n\n\nstring \nchannel\n - channel to subscribe\n\n\n\n\nIn response to subscribe client receives reply like:\n\n\n{\n\n    \n\"id\"\n:\n2\n,\n\n    \n\"result\"\n:\n{}\n\n\n}\n\n\n\n\n\nresult\n can have the following fields:\n\n\n\n\noptional array \npublications\n - this is an array of missed publications in channel. When received client must call general publication event handler for each message in this array\n\n\noptional string \nlast\n - this field contains uid of last publication in channel. This allows fresh client which have not received publications before recover messages setting this value into next subscription request. \n\n\noptional bool \nrecovered\n - this flag is set to \ntrue\n when server thinks that all missed publications were successfully recovered and \nfalse\n otherwise.\n\n\n\n\nAfter client received successful reply on \nsubscribe\n command it will receive asynchronous \nreply messages published to this channel. Messages can be of several types:\n\n\n\n\nPublication message\n\n\nJoin message\n\n\nLeave message\n\n\nUnsub message\n\n\n\n\nSee more about asynchronous messages below. \n\n\nUnsubscribe\n\u00b6\n\n\nThis is simple. When client wants to unsubscribe from channel and therefore stop receiving asynchronous subscription messages from connection related to channel it must call \nunsubscribe\n command:\n\n\n{\n\n    \n\"id\"\n:\n \n3\n,\n\n    \n\"method\"\n:\n \n\"unsubscribe\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"channel\"\n:\n \n\"ch1\"\n\n    \n}\n\n\n}\n\n\n\n\n\nActually server response does not mean a lot for client - it must immediately remove channel subscription from internal implementation data structures and ignore all messages related to channel.\n\n\nRefresh\n\u00b6\n\n\nIt's possible to turn on client connection expiration mechanism on server. While enabled server will keep track of connections whose time of life (defined by \nexp\n timestamp) is close to the end. In this case connection will be closed. Client can prevent closing connection refreshing it's connection credentials. To do this it must send \nrefresh\n command to server. \nrefresh\n command similar to \nconnect\n:\n\n\n{\n\n    \n\"id\"\n:\n \n4\n,\n\n    \n\"method\"\n:\n \n\"refresh\"\n,\n\n    \n\"params\"\n:\n \n{\n\n        \n\"user\"\n:\n \n\"42\"\n,\n\n        \n\"exp\"\n:\n \n\"1520096218\"\n,\n\n        \n\"info\"\n:\n \n\"\"\n,\n\n        \n\"sign\"\n:\n \n\"xxx\"\n\n    \n}\n\n\n}\n\n\n\n\n\nJust with actual \nexp\n and new \nsign\n.\n\n\nThe tip whether or not connection must be refreshed comes in reply to \nconnect\n command shown above - fields \nexpires\n, \nexpired\n and \nttl\n.\n\n\nRPC-like calls: publish, history, presence\n\u00b6\n\n\nThe mechanics of these calls is simple - client sends command and expects response from server.\n\n\npublish\n command allows to publish message into channel from client.\n\n\n\n\nNote\n\n\nTo publish from client \npublish\n option in server configuration must be set to \ntrue\n\n\n\n\nhistory\n allows to ask server for channel history if enabled.\n\n\npresence\n allows to ask server for channel presence information if enabled.\n\n\nAsynchronous server-to-client messages\n\u00b6\n\n\nThere are several types of asynchronous messages that can come from server to client. All of them relate to current client subscriptions.\n\n\nThe most important message is \nPublication\n:\n\n\n{\n\n    \n\"result\"\n:\n{\n\n        \n\"channel\"\n:\n\"ch1\"\n,\n\n        \n\"data\"\n:\n{\n\n            \n\"uid\"\n:\n\"Ry4z8l6GvNMejwMxB7Sohe\"\n,\n\n            \n\"data\"\n:\n{\n\"input\"\n:\n\"1\"\n},\n\n            \n\"info\"\n:\n{\n\n                \n\"user\"\n:\n\"2694\"\n,\n\n                \n\"client\"\n:\n\"5c48510e-cf49-4fa8-a9b2-490b22231e74\"\n,\n\n                \n\"conn_info\"\n:\n{\n\"name\"\n:\n\"Alexander\"\n},\n\n                \n\"chan_info\"\n:\n{}\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nPublication\n is a message published into channel. Note that there is no \nid\n field in this message - this symptom\nallows to distinguish it from \nReply\n to \nCommand\n.  \n\n\nNext message is \nJoin\n message:\n\n\n{\n\n    \n\"result\"\n:\n{\n\n        \n\"type\"\n:\n1\n,\n\n        \n\"channel\"\n:\n\"ch1\"\n,\n\n        \n\"data\"\n:\n{\n\n            \n\"info\"\n:\n{\n\n                \n\"user\"\n:\n\"2694\"\n,\n\n                \n\"client\"\n:\n\"5c48510e-cf49-4fa8-a9b2-490b22231e74\"\n,\n\n                \n\"conn_info\"\n:\n{\n\"name\"\n:\n\"Alexander\"\n},\n\n                \n\"chan_info\"\n:\n{}\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nJoin\n messages sent when someone joined (subscribed on) channel.\n\n\n\n\nNote\n\n\nTo enable \nJoin\n and \nLeave\n messages \njoin_leave\n option must be enabled on server globally or for channel namespace.\n\n\n\n\nLeave\n messages sent when someone left (unsubscribed from) channel.\n\n\n{\n\n    \n\"result\"\n:\n{\n\n        \n\"type\"\n:\n2\n,\n\n        \n\"channel\"\n:\n\"ch1\"\n,\n\n        \n\"data\"\n:\n{\n\n            \n\"info\"\n:\n{\n\n                \n\"user\"\n:\n\"2694\"\n,\n\n                \n\"client\"\n:\n\"5c48510e-cf49-4fa8-a9b2-490b22231e74\"\n,\n\n                \n\"conn_info\"\n:\n{\n\"name\"\n:\n\"Alexander\"\n},\n\n                \n\"chan_info\"\n:\n{}\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nAnd finally \nUnsub\n message that means that server unsubscribed current client from channel:\n\n\n{\n\n    \n\"result\"\n:\n{\n\n        \n\"type\"\n:\n3\n,\n\n        \n\"channel\"\n:\n\"ch1\"\n,\n\n        \n\"data\"\n:\n{}\n\n    \n}\n\n\n}\n\n\n\n\n\nIt's possible to distinguish between different types of asynchronous messages looking at \ntype\n field (for \nPublication\n this field not set or \n0\n).\n\n\nPing Pong\n\u00b6\n\n\nTo maintain connection alive and detect broken connections client must periodically send \nping\n commands to server and expect replies to it. Ping command looks like:\n\n\n{\n\n    \n\"id\"\n:\n32\n,\n\n    \n\"method\"\n:\n\"ping\"\n\n\n}\n\n\n\n\n\nServer just echoes this command back. When client does not receive ping reply for some time it must consider connection broken and try to reconnect. Recommended ping interval is 25 seconds, recommended period to wait for pong is 1-5 seconds. Though those numbers can vary.\n\n\nHandle disconnects\n\u00b6\n\n\nClient should handle disconnect advices from server. In websocket case disconnect advice is sent in reason field of CLOSE Websocket frame. Reason contains string which is \ndisconnect\n object encoded into JSON (even in case of Protobuf scenario). That objects looks like:\n\n\n{\n\n    \n\"reason\"\n:\n \n\"shutdown\"\n,\n\n    \n\"reconnect\"\n:\n \ntrue\n \n\n}\n\n\n\n\n\nIt contains string reason of connection closing and advice to reconnect or not. Client should take this reconnect advice into account.\n\n\nIn case of network problems and random disconnect from server without well known reason client should always try to  reconnect with exponential intervals.\n\n\nHandle errors\n\u00b6\n\n\nThis section contains advices to error handling in client implementations.\n\n\nErrors can happen during various operations and can be handled in special way in context of some commands to tolerate network and server problems.\n\n\nErrors during \nconnect\n must result in full client reconnect.\n\n\nErrors during \nsubscribe\n must result in full client reconnect if error is temporary. And be sent to error event handler of subscription if persistent. Persistent errors are errors like \npermission denied\n, \nbad request\n, \nnamespace not found\n etc. Persistent errors in most situation mean an error from developers side.\n\n\nErrors during rpc-like operations can be just returned to caller - i.e. user javascript code. Calls like \nhistory\n and \npresence\n are idempotent. You should be accurate with unidempotent operations like \npublish\n - in case of client timeout it's possible to send the same message into channel twice if retry publish after timeout - so if you care about this case make sure you have some protection from displaying message twice on client side (maybe some sort of unique key in payload).",
            "title": "Client protocol"
        },
        {
            "location": "/server/protocol/#client-protocol",
            "text": "This chapter describes internal client-server protocol in details to help developers build custom client libraries.  Note that you can always look at existing client implementations in case of any questions, for example  centrifuge-js .",
            "title": "Client protocol"
        },
        {
            "location": "/server/protocol/#what-client-should-do",
            "text": "When you are using Centrifuge/Centrifugo client you expect some core things from it:   connect to server and authenticate. Depending on transport endpoint address can differ. For example Centrifugo JSON-encoded Websocket endpoint is  ws://centrifugo.example.com/connection/websocket .  subscribe on channels developer wants. This allows to recieve messages published into channels in real-time.  have a possibility to make RPC calls, publish, asking for presence etc.  refresh client connection credentials when connection session lifetime is going to expire.  handle ping/pong messaging with server under the hood to maintain connection alive and detect broken connection.  handle protocol-specific errors, reconnect and recover missed messages automatically.   At moment Centrifuge/Centrifugo can work with several transports:   Websocket  SockJS  GRPC   This document describes protocol specifics for Websocket transport which supports binary and text formats to transfer data. As Centrifuge has various types of messages it serializes protocol messages using JSON or Protobuf (in case of binary websockets).   Note  SockJS works almost the same way as JSON websocket described here but has its own extra framing on top of Centrifuge protocol messages. SockJS can only work with JSON - it's not possible to transfer binary data over it. SockJS is only needed as fallback to Websocket in web browsers.    Note  GRPC support is an experimental at moment. GRPC works similar to what described here but it has its own transport details - Centrifuge library can not control how data travel over network and just uses GRPC generated API to pass messages between server and client over bidirectional streaming.",
            "title": "What client should do"
        },
        {
            "location": "/server/protocol/#top-level-framing",
            "text": "Centrifuge protocol defined in  Protobuf schema . That schema is a source of truth and all protocol description below describes messages from that schema.  Client sends  Command  to server.  Server sends  Reply  to client.  One request from client to server and one response from server to client can have more than one  Command  or  Reply .  When JSON format is used then many  Command  can be sent from client to server in JSON streaming line-delimited format. I.e. many commands delimited by new line symbol  \\n .  { \"id\" :   1 ,   \"method\" :   \"subscribe\" ,   \"params\" :   { \"channel\" :   \"ch1\" }}  { \"id\" :   2 ,   \"method\" :   \"subscribe\" ,   \"params\" :   { \"channel\" :   \"ch2\" }}    Note  This doc will use JSON format for examples because it's human-readable. Everything said here for JSON is also true for Protobuf encoded case.   When Protobuf format is used then many  Command  can be sent from client to server in length-delimited format where each individual  Command  marshaled to bytes prepended by  varint  length.  The same relates to many  Reply  in one response from server to client. Line-delimited JSON and varint-length prefixed Protobuf.  As you see above each  Command  has  id  field. This is an incremental integer field. This field will be echoed in server to client replies to commands so client could match a certain  Reply  to  Command  sent before. This is important because Websocket is asynchronous protocol where server and client both send messages in full-duplex mode.  So you can expect something like this when sending commands to server:  { \"id\" :   1 ,   \"result\" :   {}}  { \"id\" :   2 ,   \"result\" :   {}}   Besides  id   Reply  from server to client have two important fields:  result  and  error .  result  contains useful payload object which can be different depending on  Reply .  error  contains error object in case of  Command  processing resulted in some error on server.  error  is optional and if  Reply  does not have  error  then it means that  Command  processed successfuly and client can parse  result  object in an appropriate way.  error  objects looks like this:  { \n     \"code\" :   100 , \n     \"message\" :   \"internal server error\" , \n     \"retry\" :   true  }   We will talk more about error handling below.  The special type of  Reply  is asynchronous  Reply . Those replies have no  id  field set (or  id  can be equal to zero). Async replies can come to client in any moment - not as reaction to issued  Command  but as message from server to client in arbitrary time. For example this can be message published into channel.  Centrifuge library defines several command types client can issue. And well-written client must be aware of all those commands and client workflow. Communication with Centrifuge/Centrifugo server starts with  connect  command.",
            "title": "Top level framing"
        },
        {
            "location": "/server/protocol/#connect",
            "text": "First of all client must dial with server and then send  connect   Command  to it.  Default Websocket endpoint in Centrifugo is:  ws://centrifugo.example.com/connection/websocket  In case of using TLS:  wss://centrifugo.example.com/connection/websocket  After successful dial to websocket endpoint client must send  connect  command to server to authorize itself.  connect  command looks like:  { \n     \"id\" :   1 , \n     \"method\" :   \"connect\" , \n     \"params\" :   { \n         \"user\" :   \"42\" , \n         \"exp\" :   \"1520094208\" , \n         \"info\" :   \"\" , \n         \"sign\" :   \"xxx\" \n     }  }   Where params fields are passed to client from application backend:   string  user  - current user ID. Can be empty string for unauthorized user.  string  exp  - timestamp seconds when client connection expires.  string  info  - optional base64 encoded information about connection. This is JSON object encoded to base64 in case of JSON format used and arbitrary bytes for Protobuf format.  string  sign  - HMAC SHA-256 sign generated on backend side from Centrifugo secret and fields above. This sign helps to prove the fact that client passed valid  user ,  exp ,  info  fields to server.   In response to  connect  command server sends connect reply. It looks this way:  { \n     \"id\" : 1 , \n     \"result\" : { \n         \"client\" : \"421bf374-dd01-4f82-9def-8c31697e956f\" , \n         \"version\" : \"2.0.0\" \n     }  }   result  has some fields:   string  client  - unique client connection ID server issued to this connection  string  version  - server version  optional bool  expires  - whether or not server will expire connection  optional bool  expired  - whether or not connection credentials already expired and must be refreshed  optional int32  ttl  - time in seconds until connection will expire",
            "title": "Connect"
        },
        {
            "location": "/server/protocol/#subscribe",
            "text": "As soon as client successfully connected and got unique connection ID it is ready to\nsubscribe on channels. To do this it must send  subscribe  command to server:  { \n     \"id\" :   2 , \n     \"method\" :   \"subscribe\" , \n     \"params\" :   { \n         \"channel\" :   \"ch1\" \n     }  }   Fields that can be set in  params  are:   string  channel  - channel to subscribe   In response to subscribe client receives reply like:  { \n     \"id\" : 2 , \n     \"result\" : {}  }   result  can have the following fields:   optional array  publications  - this is an array of missed publications in channel. When received client must call general publication event handler for each message in this array  optional string  last  - this field contains uid of last publication in channel. This allows fresh client which have not received publications before recover messages setting this value into next subscription request.   optional bool  recovered  - this flag is set to  true  when server thinks that all missed publications were successfully recovered and  false  otherwise.   After client received successful reply on  subscribe  command it will receive asynchronous \nreply messages published to this channel. Messages can be of several types:   Publication message  Join message  Leave message  Unsub message   See more about asynchronous messages below.",
            "title": "Subscribe"
        },
        {
            "location": "/server/protocol/#unsubscribe",
            "text": "This is simple. When client wants to unsubscribe from channel and therefore stop receiving asynchronous subscription messages from connection related to channel it must call  unsubscribe  command:  { \n     \"id\" :   3 , \n     \"method\" :   \"unsubscribe\" , \n     \"params\" :   { \n         \"channel\" :   \"ch1\" \n     }  }   Actually server response does not mean a lot for client - it must immediately remove channel subscription from internal implementation data structures and ignore all messages related to channel.",
            "title": "Unsubscribe"
        },
        {
            "location": "/server/protocol/#refresh",
            "text": "It's possible to turn on client connection expiration mechanism on server. While enabled server will keep track of connections whose time of life (defined by  exp  timestamp) is close to the end. In this case connection will be closed. Client can prevent closing connection refreshing it's connection credentials. To do this it must send  refresh  command to server.  refresh  command similar to  connect :  { \n     \"id\" :   4 , \n     \"method\" :   \"refresh\" , \n     \"params\" :   { \n         \"user\" :   \"42\" , \n         \"exp\" :   \"1520096218\" , \n         \"info\" :   \"\" , \n         \"sign\" :   \"xxx\" \n     }  }   Just with actual  exp  and new  sign .  The tip whether or not connection must be refreshed comes in reply to  connect  command shown above - fields  expires ,  expired  and  ttl .",
            "title": "Refresh"
        },
        {
            "location": "/server/protocol/#rpc-like-calls-publish-history-presence",
            "text": "The mechanics of these calls is simple - client sends command and expects response from server.  publish  command allows to publish message into channel from client.   Note  To publish from client  publish  option in server configuration must be set to  true   history  allows to ask server for channel history if enabled.  presence  allows to ask server for channel presence information if enabled.",
            "title": "RPC-like calls: publish, history, presence"
        },
        {
            "location": "/server/protocol/#asynchronous-server-to-client-messages",
            "text": "There are several types of asynchronous messages that can come from server to client. All of them relate to current client subscriptions.  The most important message is  Publication :  { \n     \"result\" : { \n         \"channel\" : \"ch1\" , \n         \"data\" : { \n             \"uid\" : \"Ry4z8l6GvNMejwMxB7Sohe\" , \n             \"data\" : { \"input\" : \"1\" }, \n             \"info\" : { \n                 \"user\" : \"2694\" , \n                 \"client\" : \"5c48510e-cf49-4fa8-a9b2-490b22231e74\" , \n                 \"conn_info\" : { \"name\" : \"Alexander\" }, \n                 \"chan_info\" : {} \n             } \n         } \n     }  }   Publication  is a message published into channel. Note that there is no  id  field in this message - this symptom\nallows to distinguish it from  Reply  to  Command .    Next message is  Join  message:  { \n     \"result\" : { \n         \"type\" : 1 , \n         \"channel\" : \"ch1\" , \n         \"data\" : { \n             \"info\" : { \n                 \"user\" : \"2694\" , \n                 \"client\" : \"5c48510e-cf49-4fa8-a9b2-490b22231e74\" , \n                 \"conn_info\" : { \"name\" : \"Alexander\" }, \n                 \"chan_info\" : {} \n             } \n         } \n     }  }   Join  messages sent when someone joined (subscribed on) channel.   Note  To enable  Join  and  Leave  messages  join_leave  option must be enabled on server globally or for channel namespace.   Leave  messages sent when someone left (unsubscribed from) channel.  { \n     \"result\" : { \n         \"type\" : 2 , \n         \"channel\" : \"ch1\" , \n         \"data\" : { \n             \"info\" : { \n                 \"user\" : \"2694\" , \n                 \"client\" : \"5c48510e-cf49-4fa8-a9b2-490b22231e74\" , \n                 \"conn_info\" : { \"name\" : \"Alexander\" }, \n                 \"chan_info\" : {} \n             } \n         } \n     }  }   And finally  Unsub  message that means that server unsubscribed current client from channel:  { \n     \"result\" : { \n         \"type\" : 3 , \n         \"channel\" : \"ch1\" , \n         \"data\" : {} \n     }  }   It's possible to distinguish between different types of asynchronous messages looking at  type  field (for  Publication  this field not set or  0 ).",
            "title": "Asynchronous server-to-client messages"
        },
        {
            "location": "/server/protocol/#ping-pong",
            "text": "To maintain connection alive and detect broken connections client must periodically send  ping  commands to server and expect replies to it. Ping command looks like:  { \n     \"id\" : 32 , \n     \"method\" : \"ping\"  }   Server just echoes this command back. When client does not receive ping reply for some time it must consider connection broken and try to reconnect. Recommended ping interval is 25 seconds, recommended period to wait for pong is 1-5 seconds. Though those numbers can vary.",
            "title": "Ping Pong"
        },
        {
            "location": "/server/protocol/#handle-disconnects",
            "text": "Client should handle disconnect advices from server. In websocket case disconnect advice is sent in reason field of CLOSE Websocket frame. Reason contains string which is  disconnect  object encoded into JSON (even in case of Protobuf scenario). That objects looks like:  { \n     \"reason\" :   \"shutdown\" , \n     \"reconnect\" :   true   }   It contains string reason of connection closing and advice to reconnect or not. Client should take this reconnect advice into account.  In case of network problems and random disconnect from server without well known reason client should always try to  reconnect with exponential intervals.",
            "title": "Handle disconnects"
        },
        {
            "location": "/server/protocol/#handle-errors",
            "text": "This section contains advices to error handling in client implementations.  Errors can happen during various operations and can be handled in special way in context of some commands to tolerate network and server problems.  Errors during  connect  must result in full client reconnect.  Errors during  subscribe  must result in full client reconnect if error is temporary. And be sent to error event handler of subscription if persistent. Persistent errors are errors like  permission denied ,  bad request ,  namespace not found  etc. Persistent errors in most situation mean an error from developers side.  Errors during rpc-like operations can be just returned to caller - i.e. user javascript code. Calls like  history  and  presence  are idempotent. You should be accurate with unidempotent operations like  publish  - in case of client timeout it's possible to send the same message into channel twice if retry publish after timeout - so if you care about this case make sure you have some protection from displaying message twice on client side (maybe some sort of unique key in payload).",
            "title": "Handle errors"
        }
    ]
}